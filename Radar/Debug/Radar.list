
Radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c748  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  0800c8f8  0800c8f8  0000d8f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf50  0800cf50  0000e1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf50  0800cf50  0000df50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf58  0800cf58  0000e1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf58  0800cf58  0000df58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf5c  0800cf5c  0000df5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800cf60  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008380  200001f8  0800d158  0000e1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008578  0800d158  0000e578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b17  00000000  00000000  0000e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026cd  00000000  00000000  0001ed3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00021410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bbf  00000000  00000000  00022320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268a5  00000000  00000000  00022edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f7e  00000000  00000000  00049784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea392  00000000  00000000  0005c702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa4  00000000  00000000  00146ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0014c57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c8e0 	.word	0x0800c8e0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	0800c8e0 	.word	0x0800c8e0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 bb06 	b.w	80012cc <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f9a2 	bl	8001010 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__mulsc3>:
 8000cd8:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000cdc:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000ce0:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000ce4:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000ce8:	ee61 5a20 	vmul.f32	s11, s2, s1
 8000cec:	eef4 7a67 	vcmp.f32	s15, s15
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	ee35 7a25 	vadd.f32	s14, s10, s11
 8000cf8:	d604      	bvs.n	8000d04 <__mulsc3+0x2c>
 8000cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfe:	eef0 0a47 	vmov.f32	s1, s14
 8000d02:	4770      	bx	lr
 8000d04:	eeb4 7a47 	vcmp.f32	s14, s14
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	d7f5      	bvc.n	8000cfa <__mulsc3+0x22>
 8000d0e:	ed9f 4aa1 	vldr	s8, [pc, #644]	@ 8000f94 <__mulsc3+0x2bc>
 8000d12:	eef0 4ac0 	vabs.f32	s9, s0
 8000d16:	eef4 4a44 	vcmp.f32	s9, s8
 8000d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1e:	eef0 3ae0 	vabs.f32	s7, s1
 8000d22:	f300 80a0 	bgt.w	8000e66 <__mulsc3+0x18e>
 8000d26:	eef4 3a44 	vcmp.f32	s7, s8
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	f300 809a 	bgt.w	8000e66 <__mulsc3+0x18e>
 8000d32:	2300      	movs	r3, #0
 8000d34:	eddf 4a97 	vldr	s9, [pc, #604]	@ 8000f94 <__mulsc3+0x2bc>
 8000d38:	eeb0 4ac1 	vabs.f32	s8, s2
 8000d3c:	eeb4 4a64 	vcmp.f32	s8, s9
 8000d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d44:	eef0 3ae1 	vabs.f32	s7, s3
 8000d48:	dc48      	bgt.n	8000ddc <__mulsc3+0x104>
 8000d4a:	eef4 3a64 	vcmp.f32	s7, s9
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	dc43      	bgt.n	8000ddc <__mulsc3+0x104>
 8000d54:	bb9b      	cbnz	r3, 8000dbe <__mulsc3+0xe6>
 8000d56:	eef0 6ae6 	vabs.f32	s13, s13
 8000d5a:	eef4 6a64 	vcmp.f32	s13, s9
 8000d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d62:	dc14      	bgt.n	8000d8e <__mulsc3+0xb6>
 8000d64:	eeb0 6ac6 	vabs.f32	s12, s12
 8000d68:	eeb4 6a64 	vcmp.f32	s12, s9
 8000d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d70:	dc0d      	bgt.n	8000d8e <__mulsc3+0xb6>
 8000d72:	eeb0 5ac5 	vabs.f32	s10, s10
 8000d76:	eeb4 5a64 	vcmp.f32	s10, s9
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	dc06      	bgt.n	8000d8e <__mulsc3+0xb6>
 8000d80:	eef0 5ae5 	vabs.f32	s11, s11
 8000d84:	eef4 5a64 	vcmp.f32	s11, s9
 8000d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d8c:	ddb5      	ble.n	8000cfa <__mulsc3+0x22>
 8000d8e:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d96:	f180 80f0 	bvs.w	8000f7a <__mulsc3+0x2a2>
 8000d9a:	eef4 0a60 	vcmp.f32	s1, s1
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	f180 80dd 	bvs.w	8000f60 <__mulsc3+0x288>
 8000da6:	eeb4 1a41 	vcmp.f32	s2, s2
 8000daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dae:	f180 80ca 	bvs.w	8000f46 <__mulsc3+0x26e>
 8000db2:	eef4 1a61 	vcmp.f32	s3, s3
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	f180 80b7 	bvs.w	8000f2c <__mulsc3+0x254>
 8000dbe:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000dc2:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000dc6:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000dca:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000dce:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8000f98 <__mulsc3+0x2c0>
 8000dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dd6:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000dda:	e78e      	b.n	8000cfa <__mulsc3+0x22>
 8000ddc:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8000f94 <__mulsc3+0x2bc>
 8000de0:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000f94 <__mulsc3+0x2bc>
 8000de4:	eeb4 4a67 	vcmp.f32	s8, s15
 8000de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dec:	bfcc      	ite	gt
 8000dee:	2301      	movgt	r3, #1
 8000df0:	2300      	movle	r3, #0
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	ee11 3a10 	vmov	r3, s2
 8000dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	eef0 7ae7 	vabs.f32	s15, s15
 8000e04:	eef4 3a47 	vcmp.f32	s7, s14
 8000e08:	bfb8      	it	lt
 8000e0a:	eef1 7a67 	vneglt.f32	s15, s15
 8000e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e12:	bfcc      	ite	gt
 8000e14:	2301      	movgt	r3, #1
 8000e16:	2300      	movle	r3, #0
 8000e18:	eeb0 1a67 	vmov.f32	s2, s15
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	ee11 3a90 	vmov	r3, s3
 8000e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	eef0 7ae7 	vabs.f32	s15, s15
 8000e2e:	eeb4 0a40 	vcmp.f32	s0, s0
 8000e32:	bfb8      	it	lt
 8000e34:	eef1 7a67 	vneglt.f32	s15, s15
 8000e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3c:	eef0 1a67 	vmov.f32	s3, s15
 8000e40:	d65a      	bvs.n	8000ef8 <__mulsc3+0x220>
 8000e42:	eef4 0a60 	vcmp.f32	s1, s1
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	d7b8      	bvc.n	8000dbe <__mulsc3+0xe6>
 8000e4c:	ee10 3a90 	vmov	r3, s1
 8000e50:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000f9c <__mulsc3+0x2c4>
 8000e54:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8000fa0 <__mulsc3+0x2c8>
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bfb4      	ite	lt
 8000e5c:	eef0 0a67 	vmovlt.f32	s1, s15
 8000e60:	eef0 0a47 	vmovge.f32	s1, s14
 8000e64:	e7ab      	b.n	8000dbe <__mulsc3+0xe6>
 8000e66:	ed9f 4a4b 	vldr	s8, [pc, #300]	@ 8000f94 <__mulsc3+0x2bc>
 8000e6a:	eef4 4a44 	vcmp.f32	s9, s8
 8000e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e72:	bfcc      	ite	gt
 8000e74:	2301      	movgt	r3, #1
 8000e76:	2300      	movle	r3, #0
 8000e78:	ee04 3a90 	vmov	s9, r3
 8000e7c:	ed9f 4a45 	vldr	s8, [pc, #276]	@ 8000f94 <__mulsc3+0x2bc>
 8000e80:	ee10 3a10 	vmov	r3, s0
 8000e84:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	eef0 4ae4 	vabs.f32	s9, s9
 8000e8e:	eef4 3a44 	vcmp.f32	s7, s8
 8000e92:	bfb8      	it	lt
 8000e94:	eef1 4a64 	vneglt.f32	s9, s9
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	bfcc      	ite	gt
 8000e9e:	2301      	movgt	r3, #1
 8000ea0:	2300      	movle	r3, #0
 8000ea2:	eeb0 0a64 	vmov.f32	s0, s9
 8000ea6:	ee04 3a90 	vmov	s9, r3
 8000eaa:	ee10 3a90 	vmov	r3, s1
 8000eae:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	eef0 4ae4 	vabs.f32	s9, s9
 8000eb8:	eeb4 1a41 	vcmp.f32	s2, s2
 8000ebc:	bfb8      	it	lt
 8000ebe:	eef1 4a64 	vneglt.f32	s9, s9
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	eef0 0a64 	vmov.f32	s1, s9
 8000eca:	d622      	bvs.n	8000f12 <__mulsc3+0x23a>
 8000ecc:	eef4 1a61 	vcmp.f32	s3, s3
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	bf78      	it	vc
 8000ed6:	2301      	movvc	r3, #1
 8000ed8:	f5ff af2c 	bvc.w	8000d34 <__mulsc3+0x5c>
 8000edc:	ee11 3a90 	vmov	r3, s3
 8000ee0:	ed9f 4a2e 	vldr	s8, [pc, #184]	@ 8000f9c <__mulsc3+0x2c4>
 8000ee4:	eddf 4a2e 	vldr	s9, [pc, #184]	@ 8000fa0 <__mulsc3+0x2c8>
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bfb4      	ite	lt
 8000eec:	eef0 1a64 	vmovlt.f32	s3, s9
 8000ef0:	eef0 1a44 	vmovge.f32	s3, s8
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e71d      	b.n	8000d34 <__mulsc3+0x5c>
 8000ef8:	ee10 3a10 	vmov	r3, s0
 8000efc:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000f9c <__mulsc3+0x2c4>
 8000f00:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8000fa0 <__mulsc3+0x2c8>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bfb4      	ite	lt
 8000f08:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000f0c:	eeb0 0a47 	vmovge.f32	s0, s14
 8000f10:	e797      	b.n	8000e42 <__mulsc3+0x16a>
 8000f12:	ee11 3a10 	vmov	r3, s2
 8000f16:	ed9f 4a21 	vldr	s8, [pc, #132]	@ 8000f9c <__mulsc3+0x2c4>
 8000f1a:	eddf 4a21 	vldr	s9, [pc, #132]	@ 8000fa0 <__mulsc3+0x2c8>
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bfb4      	ite	lt
 8000f22:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000f26:	eeb0 1a44 	vmovge.f32	s2, s8
 8000f2a:	e7cf      	b.n	8000ecc <__mulsc3+0x1f4>
 8000f2c:	ee11 3a90 	vmov	r3, s3
 8000f30:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000f9c <__mulsc3+0x2c4>
 8000f34:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8000fa0 <__mulsc3+0x2c8>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bfb4      	ite	lt
 8000f3c:	eef0 1a67 	vmovlt.f32	s3, s15
 8000f40:	eef0 1a47 	vmovge.f32	s3, s14
 8000f44:	e73b      	b.n	8000dbe <__mulsc3+0xe6>
 8000f46:	ee11 3a10 	vmov	r3, s2
 8000f4a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8000f9c <__mulsc3+0x2c4>
 8000f4e:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8000fa0 <__mulsc3+0x2c8>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bfb4      	ite	lt
 8000f56:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000f5a:	eeb0 1a47 	vmovge.f32	s2, s14
 8000f5e:	e728      	b.n	8000db2 <__mulsc3+0xda>
 8000f60:	ee10 3a90 	vmov	r3, s1
 8000f64:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000f9c <__mulsc3+0x2c4>
 8000f68:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8000fa0 <__mulsc3+0x2c8>
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bfb4      	ite	lt
 8000f70:	eef0 0a67 	vmovlt.f32	s1, s15
 8000f74:	eef0 0a47 	vmovge.f32	s1, s14
 8000f78:	e715      	b.n	8000da6 <__mulsc3+0xce>
 8000f7a:	ee10 3a10 	vmov	r3, s0
 8000f7e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f9c <__mulsc3+0x2c4>
 8000f82:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8000fa0 <__mulsc3+0x2c8>
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bfb4      	ite	lt
 8000f8a:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000f8e:	eeb0 0a47 	vmovge.f32	s0, s14
 8000f92:	e702      	b.n	8000d9a <__mulsc3+0xc2>
 8000f94:	7f7fffff 	.word	0x7f7fffff
 8000f98:	7f800000 	.word	0x7f800000
 8000f9c:	00000000 	.word	0x00000000
 8000fa0:	80000000 	.word	0x80000000

08000fa4 <__aeabi_d2lz>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2300      	movs	r3, #0
 8000faa:	4604      	mov	r4, r0
 8000fac:	460d      	mov	r5, r1
 8000fae:	f7ff fda5 	bl	8000afc <__aeabi_dcmplt>
 8000fb2:	b928      	cbnz	r0, 8000fc0 <__aeabi_d2lz+0x1c>
 8000fb4:	4620      	mov	r0, r4
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fbc:	f000 b80a 	b.w	8000fd4 <__aeabi_d2ulz>
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fc6:	f000 f805 	bl	8000fd4 <__aeabi_d2ulz>
 8000fca:	4240      	negs	r0, r0
 8000fcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fd0:	bd38      	pop	{r3, r4, r5, pc}
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_d2ulz>:
 8000fd4:	b5d0      	push	{r4, r6, r7, lr}
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <__aeabi_d2ulz+0x34>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4606      	mov	r6, r0
 8000fdc:	460f      	mov	r7, r1
 8000fde:	f7ff fb1b 	bl	8000618 <__aeabi_dmul>
 8000fe2:	f7ff fdf1 	bl	8000bc8 <__aeabi_d2uiz>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	f7ff fa9c 	bl	8000524 <__aeabi_ui2d>
 8000fec:	4b07      	ldr	r3, [pc, #28]	@ (800100c <__aeabi_d2ulz+0x38>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f7ff fb12 	bl	8000618 <__aeabi_dmul>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4630      	mov	r0, r6
 8000ffa:	4639      	mov	r1, r7
 8000ffc:	f7ff f954 	bl	80002a8 <__aeabi_dsub>
 8001000:	f7ff fde2 	bl	8000bc8 <__aeabi_d2uiz>
 8001004:	4621      	mov	r1, r4
 8001006:	bdd0      	pop	{r4, r6, r7, pc}
 8001008:	3df00000 	.word	0x3df00000
 800100c:	41f00000 	.word	0x41f00000

08001010 <__udivmoddi4>:
 8001010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001014:	9d08      	ldr	r5, [sp, #32]
 8001016:	460c      	mov	r4, r1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d14e      	bne.n	80010ba <__udivmoddi4+0xaa>
 800101c:	4694      	mov	ip, r2
 800101e:	458c      	cmp	ip, r1
 8001020:	4686      	mov	lr, r0
 8001022:	fab2 f282 	clz	r2, r2
 8001026:	d962      	bls.n	80010ee <__udivmoddi4+0xde>
 8001028:	b14a      	cbz	r2, 800103e <__udivmoddi4+0x2e>
 800102a:	f1c2 0320 	rsb	r3, r2, #32
 800102e:	4091      	lsls	r1, r2
 8001030:	fa20 f303 	lsr.w	r3, r0, r3
 8001034:	fa0c fc02 	lsl.w	ip, ip, r2
 8001038:	4319      	orrs	r1, r3
 800103a:	fa00 fe02 	lsl.w	lr, r0, r2
 800103e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001042:	fa1f f68c 	uxth.w	r6, ip
 8001046:	fbb1 f4f7 	udiv	r4, r1, r7
 800104a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800104e:	fb07 1114 	mls	r1, r7, r4, r1
 8001052:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001056:	fb04 f106 	mul.w	r1, r4, r6
 800105a:	4299      	cmp	r1, r3
 800105c:	d90a      	bls.n	8001074 <__udivmoddi4+0x64>
 800105e:	eb1c 0303 	adds.w	r3, ip, r3
 8001062:	f104 30ff 	add.w	r0, r4, #4294967295
 8001066:	f080 8112 	bcs.w	800128e <__udivmoddi4+0x27e>
 800106a:	4299      	cmp	r1, r3
 800106c:	f240 810f 	bls.w	800128e <__udivmoddi4+0x27e>
 8001070:	3c02      	subs	r4, #2
 8001072:	4463      	add	r3, ip
 8001074:	1a59      	subs	r1, r3, r1
 8001076:	fa1f f38e 	uxth.w	r3, lr
 800107a:	fbb1 f0f7 	udiv	r0, r1, r7
 800107e:	fb07 1110 	mls	r1, r7, r0, r1
 8001082:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001086:	fb00 f606 	mul.w	r6, r0, r6
 800108a:	429e      	cmp	r6, r3
 800108c:	d90a      	bls.n	80010a4 <__udivmoddi4+0x94>
 800108e:	eb1c 0303 	adds.w	r3, ip, r3
 8001092:	f100 31ff 	add.w	r1, r0, #4294967295
 8001096:	f080 80fc 	bcs.w	8001292 <__udivmoddi4+0x282>
 800109a:	429e      	cmp	r6, r3
 800109c:	f240 80f9 	bls.w	8001292 <__udivmoddi4+0x282>
 80010a0:	4463      	add	r3, ip
 80010a2:	3802      	subs	r0, #2
 80010a4:	1b9b      	subs	r3, r3, r6
 80010a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010aa:	2100      	movs	r1, #0
 80010ac:	b11d      	cbz	r5, 80010b6 <__udivmoddi4+0xa6>
 80010ae:	40d3      	lsrs	r3, r2
 80010b0:	2200      	movs	r2, #0
 80010b2:	e9c5 3200 	strd	r3, r2, [r5]
 80010b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ba:	428b      	cmp	r3, r1
 80010bc:	d905      	bls.n	80010ca <__udivmoddi4+0xba>
 80010be:	b10d      	cbz	r5, 80010c4 <__udivmoddi4+0xb4>
 80010c0:	e9c5 0100 	strd	r0, r1, [r5]
 80010c4:	2100      	movs	r1, #0
 80010c6:	4608      	mov	r0, r1
 80010c8:	e7f5      	b.n	80010b6 <__udivmoddi4+0xa6>
 80010ca:	fab3 f183 	clz	r1, r3
 80010ce:	2900      	cmp	r1, #0
 80010d0:	d146      	bne.n	8001160 <__udivmoddi4+0x150>
 80010d2:	42a3      	cmp	r3, r4
 80010d4:	d302      	bcc.n	80010dc <__udivmoddi4+0xcc>
 80010d6:	4290      	cmp	r0, r2
 80010d8:	f0c0 80f0 	bcc.w	80012bc <__udivmoddi4+0x2ac>
 80010dc:	1a86      	subs	r6, r0, r2
 80010de:	eb64 0303 	sbc.w	r3, r4, r3
 80010e2:	2001      	movs	r0, #1
 80010e4:	2d00      	cmp	r5, #0
 80010e6:	d0e6      	beq.n	80010b6 <__udivmoddi4+0xa6>
 80010e8:	e9c5 6300 	strd	r6, r3, [r5]
 80010ec:	e7e3      	b.n	80010b6 <__udivmoddi4+0xa6>
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	f040 8090 	bne.w	8001214 <__udivmoddi4+0x204>
 80010f4:	eba1 040c 	sub.w	r4, r1, ip
 80010f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010fc:	fa1f f78c 	uxth.w	r7, ip
 8001100:	2101      	movs	r1, #1
 8001102:	fbb4 f6f8 	udiv	r6, r4, r8
 8001106:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800110a:	fb08 4416 	mls	r4, r8, r6, r4
 800110e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001112:	fb07 f006 	mul.w	r0, r7, r6
 8001116:	4298      	cmp	r0, r3
 8001118:	d908      	bls.n	800112c <__udivmoddi4+0x11c>
 800111a:	eb1c 0303 	adds.w	r3, ip, r3
 800111e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001122:	d202      	bcs.n	800112a <__udivmoddi4+0x11a>
 8001124:	4298      	cmp	r0, r3
 8001126:	f200 80cd 	bhi.w	80012c4 <__udivmoddi4+0x2b4>
 800112a:	4626      	mov	r6, r4
 800112c:	1a1c      	subs	r4, r3, r0
 800112e:	fa1f f38e 	uxth.w	r3, lr
 8001132:	fbb4 f0f8 	udiv	r0, r4, r8
 8001136:	fb08 4410 	mls	r4, r8, r0, r4
 800113a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800113e:	fb00 f707 	mul.w	r7, r0, r7
 8001142:	429f      	cmp	r7, r3
 8001144:	d908      	bls.n	8001158 <__udivmoddi4+0x148>
 8001146:	eb1c 0303 	adds.w	r3, ip, r3
 800114a:	f100 34ff 	add.w	r4, r0, #4294967295
 800114e:	d202      	bcs.n	8001156 <__udivmoddi4+0x146>
 8001150:	429f      	cmp	r7, r3
 8001152:	f200 80b0 	bhi.w	80012b6 <__udivmoddi4+0x2a6>
 8001156:	4620      	mov	r0, r4
 8001158:	1bdb      	subs	r3, r3, r7
 800115a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800115e:	e7a5      	b.n	80010ac <__udivmoddi4+0x9c>
 8001160:	f1c1 0620 	rsb	r6, r1, #32
 8001164:	408b      	lsls	r3, r1
 8001166:	fa22 f706 	lsr.w	r7, r2, r6
 800116a:	431f      	orrs	r7, r3
 800116c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001170:	fa04 f301 	lsl.w	r3, r4, r1
 8001174:	ea43 030c 	orr.w	r3, r3, ip
 8001178:	40f4      	lsrs	r4, r6
 800117a:	fa00 f801 	lsl.w	r8, r0, r1
 800117e:	0c38      	lsrs	r0, r7, #16
 8001180:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001184:	fbb4 fef0 	udiv	lr, r4, r0
 8001188:	fa1f fc87 	uxth.w	ip, r7
 800118c:	fb00 441e 	mls	r4, r0, lr, r4
 8001190:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001194:	fb0e f90c 	mul.w	r9, lr, ip
 8001198:	45a1      	cmp	r9, r4
 800119a:	fa02 f201 	lsl.w	r2, r2, r1
 800119e:	d90a      	bls.n	80011b6 <__udivmoddi4+0x1a6>
 80011a0:	193c      	adds	r4, r7, r4
 80011a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011a6:	f080 8084 	bcs.w	80012b2 <__udivmoddi4+0x2a2>
 80011aa:	45a1      	cmp	r9, r4
 80011ac:	f240 8081 	bls.w	80012b2 <__udivmoddi4+0x2a2>
 80011b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011b4:	443c      	add	r4, r7
 80011b6:	eba4 0409 	sub.w	r4, r4, r9
 80011ba:	fa1f f983 	uxth.w	r9, r3
 80011be:	fbb4 f3f0 	udiv	r3, r4, r0
 80011c2:	fb00 4413 	mls	r4, r0, r3, r4
 80011c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80011ce:	45a4      	cmp	ip, r4
 80011d0:	d907      	bls.n	80011e2 <__udivmoddi4+0x1d2>
 80011d2:	193c      	adds	r4, r7, r4
 80011d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011d8:	d267      	bcs.n	80012aa <__udivmoddi4+0x29a>
 80011da:	45a4      	cmp	ip, r4
 80011dc:	d965      	bls.n	80012aa <__udivmoddi4+0x29a>
 80011de:	3b02      	subs	r3, #2
 80011e0:	443c      	add	r4, r7
 80011e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011e6:	fba0 9302 	umull	r9, r3, r0, r2
 80011ea:	eba4 040c 	sub.w	r4, r4, ip
 80011ee:	429c      	cmp	r4, r3
 80011f0:	46ce      	mov	lr, r9
 80011f2:	469c      	mov	ip, r3
 80011f4:	d351      	bcc.n	800129a <__udivmoddi4+0x28a>
 80011f6:	d04e      	beq.n	8001296 <__udivmoddi4+0x286>
 80011f8:	b155      	cbz	r5, 8001210 <__udivmoddi4+0x200>
 80011fa:	ebb8 030e 	subs.w	r3, r8, lr
 80011fe:	eb64 040c 	sbc.w	r4, r4, ip
 8001202:	fa04 f606 	lsl.w	r6, r4, r6
 8001206:	40cb      	lsrs	r3, r1
 8001208:	431e      	orrs	r6, r3
 800120a:	40cc      	lsrs	r4, r1
 800120c:	e9c5 6400 	strd	r6, r4, [r5]
 8001210:	2100      	movs	r1, #0
 8001212:	e750      	b.n	80010b6 <__udivmoddi4+0xa6>
 8001214:	f1c2 0320 	rsb	r3, r2, #32
 8001218:	fa20 f103 	lsr.w	r1, r0, r3
 800121c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001220:	fa24 f303 	lsr.w	r3, r4, r3
 8001224:	4094      	lsls	r4, r2
 8001226:	430c      	orrs	r4, r1
 8001228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800122c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001230:	fa1f f78c 	uxth.w	r7, ip
 8001234:	fbb3 f0f8 	udiv	r0, r3, r8
 8001238:	fb08 3110 	mls	r1, r8, r0, r3
 800123c:	0c23      	lsrs	r3, r4, #16
 800123e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001242:	fb00 f107 	mul.w	r1, r0, r7
 8001246:	4299      	cmp	r1, r3
 8001248:	d908      	bls.n	800125c <__udivmoddi4+0x24c>
 800124a:	eb1c 0303 	adds.w	r3, ip, r3
 800124e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001252:	d22c      	bcs.n	80012ae <__udivmoddi4+0x29e>
 8001254:	4299      	cmp	r1, r3
 8001256:	d92a      	bls.n	80012ae <__udivmoddi4+0x29e>
 8001258:	3802      	subs	r0, #2
 800125a:	4463      	add	r3, ip
 800125c:	1a5b      	subs	r3, r3, r1
 800125e:	b2a4      	uxth	r4, r4
 8001260:	fbb3 f1f8 	udiv	r1, r3, r8
 8001264:	fb08 3311 	mls	r3, r8, r1, r3
 8001268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800126c:	fb01 f307 	mul.w	r3, r1, r7
 8001270:	42a3      	cmp	r3, r4
 8001272:	d908      	bls.n	8001286 <__udivmoddi4+0x276>
 8001274:	eb1c 0404 	adds.w	r4, ip, r4
 8001278:	f101 36ff 	add.w	r6, r1, #4294967295
 800127c:	d213      	bcs.n	80012a6 <__udivmoddi4+0x296>
 800127e:	42a3      	cmp	r3, r4
 8001280:	d911      	bls.n	80012a6 <__udivmoddi4+0x296>
 8001282:	3902      	subs	r1, #2
 8001284:	4464      	add	r4, ip
 8001286:	1ae4      	subs	r4, r4, r3
 8001288:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800128c:	e739      	b.n	8001102 <__udivmoddi4+0xf2>
 800128e:	4604      	mov	r4, r0
 8001290:	e6f0      	b.n	8001074 <__udivmoddi4+0x64>
 8001292:	4608      	mov	r0, r1
 8001294:	e706      	b.n	80010a4 <__udivmoddi4+0x94>
 8001296:	45c8      	cmp	r8, r9
 8001298:	d2ae      	bcs.n	80011f8 <__udivmoddi4+0x1e8>
 800129a:	ebb9 0e02 	subs.w	lr, r9, r2
 800129e:	eb63 0c07 	sbc.w	ip, r3, r7
 80012a2:	3801      	subs	r0, #1
 80012a4:	e7a8      	b.n	80011f8 <__udivmoddi4+0x1e8>
 80012a6:	4631      	mov	r1, r6
 80012a8:	e7ed      	b.n	8001286 <__udivmoddi4+0x276>
 80012aa:	4603      	mov	r3, r0
 80012ac:	e799      	b.n	80011e2 <__udivmoddi4+0x1d2>
 80012ae:	4630      	mov	r0, r6
 80012b0:	e7d4      	b.n	800125c <__udivmoddi4+0x24c>
 80012b2:	46d6      	mov	lr, sl
 80012b4:	e77f      	b.n	80011b6 <__udivmoddi4+0x1a6>
 80012b6:	4463      	add	r3, ip
 80012b8:	3802      	subs	r0, #2
 80012ba:	e74d      	b.n	8001158 <__udivmoddi4+0x148>
 80012bc:	4606      	mov	r6, r0
 80012be:	4623      	mov	r3, r4
 80012c0:	4608      	mov	r0, r1
 80012c2:	e70f      	b.n	80010e4 <__udivmoddi4+0xd4>
 80012c4:	3e02      	subs	r6, #2
 80012c6:	4463      	add	r3, ip
 80012c8:	e730      	b.n	800112c <__udivmoddi4+0x11c>
 80012ca:	bf00      	nop

080012cc <__aeabi_idiv0>:
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop

080012d0 <bit_reverse>:
#include "../Inc/utilities.h"
#include "main.h"


// Function to perform the bit reversal of the given input data
void bit_reverse(float complex data[], int n) {
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	@ 0x24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
    int j = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < n; ++i) {
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	e03c      	b.n	800135e <bit_reverse+0x8e>
        if (i < j) {
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	da1b      	bge.n	8001324 <bit_reverse+0x54>
            float complex temp = data[i];
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	4413      	add	r3, r2
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	60fa      	str	r2, [r7, #12]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	613b      	str	r3, [r7, #16]
            data[i] = data[j];
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	441a      	add	r2, r3
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	440b      	add	r3, r1
 800130c:	6811      	ldr	r1, [r2, #0]
 800130e:	6852      	ldr	r2, [r2, #4]
 8001310:	6019      	str	r1, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
            data[j] = temp;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	605a      	str	r2, [r3, #4]
        }
        int m = n / 2;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	0fda      	lsrs	r2, r3, #31
 8001328:	4413      	add	r3, r2
 800132a:	105b      	asrs	r3, r3, #1
 800132c:	617b      	str	r3, [r7, #20]
        while (m >= 1 && j >= m) {
 800132e:	e008      	b.n	8001342 <bit_reverse+0x72>
            j -= m;
 8001330:	69fa      	ldr	r2, [r7, #28]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	61fb      	str	r3, [r7, #28]
            m /= 2;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	0fda      	lsrs	r2, r3, #31
 800133c:	4413      	add	r3, r2
 800133e:	105b      	asrs	r3, r3, #1
 8001340:	617b      	str	r3, [r7, #20]
        while (m >= 1 && j >= m) {
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2b00      	cmp	r3, #0
 8001346:	dd03      	ble.n	8001350 <bit_reverse+0x80>
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	429a      	cmp	r2, r3
 800134e:	daef      	bge.n	8001330 <bit_reverse+0x60>
        }
        j += m;
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	4413      	add	r3, r2
 8001356:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < n; ++i) {
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	3301      	adds	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbbe      	blt.n	80012e4 <bit_reverse+0x14>
    }
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3724      	adds	r7, #36	@ 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	0000      	movs	r0, r0
	...

08001378 <fft>:

// Optimized FFT function /// 21/07 CORRECT - CHECK WITH PYTHON SCRIPT
void fft(float complex data[], int n) {
 8001378:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800137c:	b096      	sub	sp, #88	@ 0x58
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
    // Bit-reversal reordering
    bit_reverse(data, n);
 8001384:	6839      	ldr	r1, [r7, #0]
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa2 	bl	80012d0 <bit_reverse>

    // FFT computation using the Cooley-Tukey algorithm
    for (int len = 2; len <= n; len *= 2) {
 800138c:	2302      	movs	r3, #2
 800138e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001390:	e0db      	b.n	800154a <fft+0x1d2>
        int half_len = len / 2;
 8001392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001394:	0fda      	lsrs	r2, r3, #31
 8001396:	4413      	add	r3, r2
 8001398:	105b      	asrs	r3, r3, #1
 800139a:	643b      	str	r3, [r7, #64]	@ 0x40
        float complex exp_base = cexp(-2.0 * I * M_PI / len);
 800139c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800139e:	f7ff f8d1 	bl	8000544 <__aeabi_i2d>
 80013a2:	4604      	mov	r4, r0
 80013a4:	460d      	mov	r5, r1
 80013a6:	4622      	mov	r2, r4
 80013a8:	462b      	mov	r3, r5
 80013aa:	f04f 0000 	mov.w	r0, #0
 80013ae:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80013b2:	f7ff fa5b 	bl	800086c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4690      	mov	r8, r2
 80013bc:	4699      	mov	r9, r3
 80013be:	4622      	mov	r2, r4
 80013c0:	462b      	mov	r3, r5
 80013c2:	a167      	add	r1, pc, #412	@ (adr r1, 8001560 <fft+0x1e8>)
 80013c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013c8:	f7ff fa50 	bl	800086c <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	ec41 0b16 	vmov	d6, r0, r1
 80013d8:	ec43 2b17 	vmov	d7, r2, r3
 80013dc:	eeb0 0a46 	vmov.f32	s0, s12
 80013e0:	eef0 0a66 	vmov.f32	s1, s13
 80013e4:	eeb0 1a47 	vmov.f32	s2, s14
 80013e8:	eef0 1a67 	vmov.f32	s3, s15
 80013ec:	f009 fb1f 	bl	800aa2e <cexp>
 80013f0:	eeb0 6a40 	vmov.f32	s12, s0
 80013f4:	eef0 6a60 	vmov.f32	s13, s1
 80013f8:	eeb0 7a41 	vmov.f32	s14, s2
 80013fc:	eef0 7a61 	vmov.f32	s15, s3
 8001400:	ec53 2b16 	vmov	r2, r3, d6
 8001404:	ec55 4b17 	vmov	r4, r5, d7
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fbfc 	bl	8000c08 <__aeabi_d2f>
 8001410:	4603      	mov	r3, r0
 8001412:	657b      	str	r3, [r7, #84]	@ 0x54
 8001414:	4620      	mov	r0, r4
 8001416:	4629      	mov	r1, r5
 8001418:	f7ff fbf6 	bl	8000c08 <__aeabi_d2f>
 800141c:	4603      	mov	r3, r0
 800141e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001422:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001424:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int i = 0; i < n; i += len) {
 8001428:	2300      	movs	r3, #0
 800142a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800142c:	e085      	b.n	800153a <fft+0x1c2>
            float complex w = 1.0 + 0.0 * I;
 800142e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001432:	633b      	str	r3, [r7, #48]	@ 0x30
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	637b      	str	r3, [r7, #52]	@ 0x34
            for (int j = 0; j < half_len; ++j) {
 800143a:	2300      	movs	r3, #0
 800143c:	647b      	str	r3, [r7, #68]	@ 0x44
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e06e      	b.n	800152a <fft+0x1b2>
                float complex t = w * data[i + j + half_len];
 800144c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800144e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001450:	441a      	add	r2, r3
 8001452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	ed93 7a01 	vldr	s14, [r3, #4]
 8001464:	eef0 1a47 	vmov.f32	s3, s14
 8001468:	eeb0 1a67 	vmov.f32	s2, s15
 800146c:	edd7 0a06 	vldr	s1, [r7, #24]
 8001470:	ed97 0a07 	vldr	s0, [r7, #28]
 8001474:	f7ff fc30 	bl	8000cd8 <__mulsc3>
 8001478:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
 800147c:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8001480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001486:	613b      	str	r3, [r7, #16]
                float complex u = data[i + j];
 8001488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800148a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	60fa      	str	r2, [r7, #12]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	623a      	str	r2, [r7, #32]
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
                data[i + j] = u + t;
 80014a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80014b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014bc:	edd7 6a02 	vldr	s13, [r7, #8]
 80014c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014c8:	ed83 7a00 	vstr	s14, [r3]
 80014cc:	edc3 7a01 	vstr	s15, [r3, #4]
                data[i + j + half_len] = u - t;
 80014d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014d4:	441a      	add	r2, r3
 80014d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014d8:	4413      	add	r3, r2
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4413      	add	r3, r2
 80014e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ec:	edd7 6a02 	vldr	s13, [r7, #8]
 80014f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014f8:	ed83 7a00 	vstr	s14, [r3]
 80014fc:	edc3 7a01 	vstr	s15, [r3, #4]
                w *= exp_base;
 8001500:	edd7 1a14 	vldr	s3, [r7, #80]	@ 0x50
 8001504:	ed97 1a15 	vldr	s2, [r7, #84]	@ 0x54
 8001508:	edd7 0a06 	vldr	s1, [r7, #24]
 800150c:	ed97 0a07 	vldr	s0, [r7, #28]
 8001510:	f7ff fbe2 	bl	8000cd8 <__mulsc3>
 8001514:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8001518:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 800151c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001522:	61bb      	str	r3, [r7, #24]
            for (int j = 0; j < half_len; ++j) {
 8001524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001526:	3301      	adds	r3, #1
 8001528:	647b      	str	r3, [r7, #68]	@ 0x44
 800152a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800152c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800152e:	429a      	cmp	r2, r3
 8001530:	db8c      	blt.n	800144c <fft+0xd4>
        for (int i = 0; i < n; i += len) {
 8001532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001536:	4413      	add	r3, r2
 8001538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800153a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	f6ff af75 	blt.w	800142e <fft+0xb6>
    for (int len = 2; len <= n; len *= 2) {
 8001544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800154a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	f77f af1f 	ble.w	8001392 <fft+0x1a>
            }
        }
    }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	3758      	adds	r7, #88	@ 0x58
 800155a:	46bd      	mov	sp, r7
 800155c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001560:	54442d18 	.word	0x54442d18
 8001564:	c01921fb 	.word	0xc01921fb

08001568 <rfft>:
//		data[i] = data[i] + t;
//	}
//}

void rfft(uint16_t data[], float complex outI[], float complex outQ[],
		int size) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	@ 0x30
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
	const float scale = 3.3 / 4095;
 8001576:	4bc8      	ldr	r3, [pc, #800]	@ (8001898 <rfft+0x330>)
 8001578:	61bb      	str	r3, [r7, #24]
	int halfSize = size / 2;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	0fda      	lsrs	r2, r3, #31
 800157e:	4413      	add	r3, r2
 8001580:	105b      	asrs	r3, r3, #1
 8001582:	617b      	str	r3, [r7, #20]
	float complex *outI_ptr = outI;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float complex *outQ_ptr = outQ;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t *data_ptr = data;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24

	// Loop unrolling for better performance
	for (int i = 0; i < halfSize - 3; i += 4) {
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
 8001594:	e12a      	b.n	80017ec <rfft+0x284>
		*outI_ptr++ = *data_ptr++ * scale + 0.0 * I;
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	1c9a      	adds	r2, r3, #2
 800159a:	627a      	str	r2, [r7, #36]	@ 0x24
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ae:	ee17 0a90 	vmov	r0, s15
 80015b2:	f7fe ffd9 	bl	8000568 <__aeabi_f2d>
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	f7fe fe75 	bl	80002ac <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fb1d 	bl	8000c08 <__aeabi_d2f>
 80015ce:	4601      	mov	r1, r0
 80015d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d2:	f103 0208 	add.w	r2, r3, #8
 80015d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	6019      	str	r1, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
		*outQ_ptr++ = *data_ptr++ * scale + 0.0 * I;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	1c9a      	adds	r2, r3, #2
 80015e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f8:	ee17 0a90 	vmov	r0, s15
 80015fc:	f7fe ffb4 	bl	8000568 <__aeabi_f2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	f7fe fe50 	bl	80002ac <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff faf8 	bl	8000c08 <__aeabi_d2f>
 8001618:	4601      	mov	r1, r0
 800161a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161c:	f103 0208 	add.w	r2, r3, #8
 8001620:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	6019      	str	r1, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]

		*outI_ptr++ = *data_ptr++ * scale + 0.0 * I;
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	1c9a      	adds	r2, r3, #2
 800162e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163a:	edd7 7a06 	vldr	s15, [r7, #24]
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001642:	ee17 0a90 	vmov	r0, s15
 8001646:	f7fe ff8f 	bl	8000568 <__aeabi_f2d>
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	f7fe fe2b 	bl	80002ac <__adddf3>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fad3 	bl	8000c08 <__aeabi_d2f>
 8001662:	4601      	mov	r1, r0
 8001664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001666:	f103 0208 	add.w	r2, r3, #8
 800166a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	6019      	str	r1, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
		*outQ_ptr++ = *data_ptr++ * scale + 0.0 * I;
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	1c9a      	adds	r2, r3, #2
 8001678:	627a      	str	r2, [r7, #36]	@ 0x24
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001684:	edd7 7a06 	vldr	s15, [r7, #24]
 8001688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168c:	ee17 0a90 	vmov	r0, s15
 8001690:	f7fe ff6a 	bl	8000568 <__aeabi_f2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	f04f 0300 	mov.w	r3, #0
 800169c:	f7fe fe06 	bl	80002ac <__adddf3>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff faae 	bl	8000c08 <__aeabi_d2f>
 80016ac:	4601      	mov	r1, r0
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	f103 0208 	add.w	r2, r3, #8
 80016b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	6019      	str	r1, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]

		*outI_ptr++ = *data_ptr++ * scale + 0.0 * I;
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	1c9a      	adds	r2, r3, #2
 80016c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d6:	ee17 0a90 	vmov	r0, s15
 80016da:	f7fe ff45 	bl	8000568 <__aeabi_f2d>
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	f7fe fde1 	bl	80002ac <__adddf3>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f7ff fa89 	bl	8000c08 <__aeabi_d2f>
 80016f6:	4601      	mov	r1, r0
 80016f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fa:	f103 0208 	add.w	r2, r3, #8
 80016fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	6019      	str	r1, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
		*outQ_ptr++ = *data_ptr++ * scale + 0.0 * I;
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	1c9a      	adds	r2, r3, #2
 800170c:	627a      	str	r2, [r7, #36]	@ 0x24
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001718:	edd7 7a06 	vldr	s15, [r7, #24]
 800171c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001720:	ee17 0a90 	vmov	r0, s15
 8001724:	f7fe ff20 	bl	8000568 <__aeabi_f2d>
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	f7fe fdbc 	bl	80002ac <__adddf3>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa64 	bl	8000c08 <__aeabi_d2f>
 8001740:	4601      	mov	r1, r0
 8001742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001744:	f103 0208 	add.w	r2, r3, #8
 8001748:	62ba      	str	r2, [r7, #40]	@ 0x28
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	6019      	str	r1, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]

		*outI_ptr++ = *data_ptr++ * scale + 0.0 * I;
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	1c9a      	adds	r2, r3, #2
 8001756:	627a      	str	r2, [r7, #36]	@ 0x24
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001762:	edd7 7a06 	vldr	s15, [r7, #24]
 8001766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176a:	ee17 0a90 	vmov	r0, s15
 800176e:	f7fe fefb 	bl	8000568 <__aeabi_f2d>
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	f7fe fd97 	bl	80002ac <__adddf3>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fa3f 	bl	8000c08 <__aeabi_d2f>
 800178a:	4601      	mov	r1, r0
 800178c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178e:	f103 0208 	add.w	r2, r3, #8
 8001792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	6019      	str	r1, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
		*outQ_ptr++ = *data_ptr++ * scale + 0.0 * I;
 800179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179e:	1c9a      	adds	r2, r3, #2
 80017a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	ee17 0a90 	vmov	r0, s15
 80017b8:	f7fe fed6 	bl	8000568 <__aeabi_f2d>
 80017bc:	f04f 0200 	mov.w	r2, #0
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	f7fe fd72 	bl	80002ac <__adddf3>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff fa1a 	bl	8000c08 <__aeabi_d2f>
 80017d4:	4601      	mov	r1, r0
 80017d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017d8:	f103 0208 	add.w	r2, r3, #8
 80017dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80017de:	f04f 0200 	mov.w	r2, #0
 80017e2:	6019      	str	r1, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < halfSize - 3; i += 4) {
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	3304      	adds	r3, #4
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3b03      	subs	r3, #3
 80017f0:	6a3a      	ldr	r2, [r7, #32]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	f6ff aecf 	blt.w	8001596 <rfft+0x2e>
	}

	// Handle remaining elements
	for (int i = (halfSize & ~3); i < halfSize; ++i) {
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	e039      	b.n	8001876 <rfft+0x30e>
		outI[i] = data[2 * i] * scale + 0.0 * I;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	4413      	add	r3, r2
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001814:	edd7 7a06 	vldr	s15, [r7, #24]
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800189c <rfft+0x334>
 8001820:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	4413      	add	r3, r2
 800182c:	ee17 1a90 	vmov	r1, s15
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	6019      	str	r1, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
		outQ[i] = data[2 * i + 1] * scale + 0.0 * I;
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4413      	add	r3, r2
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001854:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800189c <rfft+0x334>
 8001858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4413      	add	r3, r2
 8001864:	ee17 1a90 	vmov	r1, s15
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	6019      	str	r1, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
	for (int i = (halfSize & ~3); i < halfSize; ++i) {
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3301      	adds	r3, #1
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	429a      	cmp	r2, r3
 800187c:	dbc1      	blt.n	8001802 <rfft+0x29a>
	}

	fft(outI, halfSize);
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	68b8      	ldr	r0, [r7, #8]
 8001882:	f7ff fd79 	bl	8001378 <fft>
	fft(outQ, halfSize);
 8001886:	6979      	ldr	r1, [r7, #20]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff fd75 	bl	8001378 <fft>
}
 800188e:	bf00      	nop
 8001890:	3730      	adds	r7, #48	@ 0x30
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	3a534067 	.word	0x3a534067
 800189c:	00000000 	.word	0x00000000

080018a0 <maxAbs>:
//		out[i] = round(absolute * 100000.0) / 100000.0;
	}
}

void maxAbs(float complex buf1[], float complex buf2[], float out1[],
		float out2[], int *x, float *sum, int n) {
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
	float max = 0;
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
	*sum = 0;
 80018b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e08b      	b.n	80019da <maxAbs+0x13a>
		out1[i] = cabs(buf1[i]);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	685e      	ldr	r6, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe49 	bl	8000568 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	4633      	mov	r3, r6
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe43 	bl	8000568 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	ec41 0b16 	vmov	d6, r0, r1
 80018ee:	ec43 2b17 	vmov	d7, r2, r3
 80018f2:	eeb0 0a46 	vmov.f32	s0, s12
 80018f6:	eef0 0a66 	vmov.f32	s1, s13
 80018fa:	eeb0 1a47 	vmov.f32	s2, s14
 80018fe:	eef0 1a67 	vmov.f32	s3, s15
 8001902:	f009 f86b 	bl	800a9dc <cabs>
 8001906:	ec51 0b10 	vmov	r0, r1, d0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	18d4      	adds	r4, r2, r3
 8001912:	f7ff f979 	bl	8000c08 <__aeabi_d2f>
 8001916:	4603      	mov	r3, r0
 8001918:	6023      	str	r3, [r4, #0]
		out2[i] = cabs(buf2[i]);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	685e      	ldr	r6, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe1d 	bl	8000568 <__aeabi_f2d>
 800192e:	4604      	mov	r4, r0
 8001930:	460d      	mov	r5, r1
 8001932:	4633      	mov	r3, r6
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fe17 	bl	8000568 <__aeabi_f2d>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4620      	mov	r0, r4
 8001940:	4629      	mov	r1, r5
 8001942:	ec41 0b16 	vmov	d6, r0, r1
 8001946:	ec43 2b17 	vmov	d7, r2, r3
 800194a:	eeb0 0a46 	vmov.f32	s0, s12
 800194e:	eef0 0a66 	vmov.f32	s1, s13
 8001952:	eeb0 1a47 	vmov.f32	s2, s14
 8001956:	eef0 1a67 	vmov.f32	s3, s15
 800195a:	f009 f83f 	bl	800a9dc <cabs>
 800195e:	ec51 0b10 	vmov	r0, r1, d0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	18d4      	adds	r4, r2, r3
 800196a:	f7ff f94d 	bl	8000c08 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	6023      	str	r3, [r4, #0]
		//clear abs_I[0] - DC VOLTAGE
		if (i == 0) {
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <maxAbs+0xe6>
			out1[i] = 0;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
		}
		*sum = *sum + out1[i];
 8001986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001988:	ed93 7a00 	vldr	s14, [r3]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199e:	edc3 7a00 	vstr	s15, [r3]
		if ((out1[i] > max) && (i != 0)) {
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80019b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	d50b      	bpl.n	80019d4 <maxAbs+0x134>
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d008      	beq.n	80019d4 <maxAbs+0x134>
			max = out1[i];
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	617b      	str	r3, [r7, #20]
			*x = i;
 80019ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < n; i++) {
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3301      	adds	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019de:	429a      	cmp	r2, r3
 80019e0:	f6ff af6f 	blt.w	80018c2 <maxAbs+0x22>
//			printf("max bin is: %d", x);
		}
	}
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080019f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019f6:	f000 ff3f 	bl	8002878 <HAL_Init>
	SystemClock_Config();
 80019fa:	f000 fce5 	bl	80023c8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	GPIO_Init();
 80019fe:	f000 fe41 	bl	8002684 <GPIO_Init>
	DMA_Init();
 8001a02:	f000 fed3 	bl	80027ac <DMA_Init>
	USART3_UART_Init();
 8001a06:	f000 fd4f 	bl	80024a8 <USART3_UART_Init>
	TIM3_Init();
 8001a0a:	f000 fdef 	bl	80025ec <TIM3_Init>
	ADC1_Init();
 8001a0e:	f000 fd8b 	bl	8002528 <ADC1_Init>

	/* Initialize buffers */

	/* Start TIMER3 TO TRIGGER ADC1 */
	if (HAL_OK != HAL_TIM_Base_Start(&htim3))
 8001a12:	4831      	ldr	r0, [pc, #196]	@ (8001ad8 <main+0xe8>)
 8001a14:	f002 fff0 	bl	80049f8 <HAL_TIM_Base_Start>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <main+0x32>
		Error_Handler();
 8001a1e:	f000 fefb 	bl	8002818 <Error_Handler>
	/* Start ADC DMA in circular mode */
//	HAL_NVIC_DisableIRQ(ADC_IRQn); // Disable ADC interrupt (if not used)
	if (HAL_ADC_Start_DMA(&hadc1, (uint16_t*) currentBuffer, BUFFER_SIZE)
 8001a22:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <main+0xec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	482c      	ldr	r0, [pc, #176]	@ (8001ae0 <main+0xf0>)
 8001a2e:	f000 fffd 	bl	8002a2c <HAL_ADC_Start_DMA>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <main+0x4c>
			!= HAL_OK) {
		Error_Handler();
 8001a38:	f000 feee 	bl	8002818 <Error_Handler>
	}

	/* Infinite loop */
	while (1) {
		if (adcReady && uartReady) {
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <main+0xf4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0fb      	beq.n	8001a3c <main+0x4c>
 8001a44:	4b28      	ldr	r3, [pc, #160]	@ (8001ae8 <main+0xf8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f7      	beq.n	8001a3c <main+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
			// Swap buffers atomically
			__disable_irq();
//			HAL_NVIC_DisableIRQ(ADC_IRQn); // Disable ADC interrupt (if not used)
			adcReady = 0;  // Clear ADC ready flag
 8001a50:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <main+0xf4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
			uint16_t *temp = processingBuffer;
 8001a56:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <main+0xfc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	607b      	str	r3, [r7, #4]
			processingBuffer = currentBuffer;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001adc <main+0xec>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a22      	ldr	r2, [pc, #136]	@ (8001aec <main+0xfc>)
 8001a62:	6013      	str	r3, [r2, #0]
			currentBuffer = temp;
 8001a64:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <main+0xec>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
			activeBuffer = !activeBuffer; // Toggle active buffer
 8001a6a:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <main+0x100>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <main+0x100>)
 8001a7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a7e:	b662      	cpsie	i
}
 8001a80:	bf00      	nop
			__enable_irq();

			// Process and send the buffer
			processBuffer(processingBuffer);
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <main+0xfc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f83a 	bl	8001b00 <processBuffer>
			//FOR DEBUG to send starting bytes for the python script
            HAL_UART_Transmit(&huart3, (uint16_t*) bufStart, 4, 20);
 8001a8c:	2314      	movs	r3, #20
 8001a8e:	2204      	movs	r2, #4
 8001a90:	4918      	ldr	r1, [pc, #96]	@ (8001af4 <main+0x104>)
 8001a92:	4819      	ldr	r0, [pc, #100]	@ (8001af8 <main+0x108>)
 8001a94:	f003 fae3 	bl	800505e <HAL_UART_Transmit>
			//If we want to send magnitude of FFT_I  / we want to print +1 item so do delete dc zero and have even number
            HAL_UART_Transmit(&huart3, (uint16_t *)abs_I, SAMPLE_NUM * sizeof(float), HAL_MAX_DELAY);
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001aa0:	4916      	ldr	r1, [pc, #88]	@ (8001afc <main+0x10c>)
 8001aa2:	4815      	ldr	r0, [pc, #84]	@ (8001af8 <main+0x108>)
 8001aa4:	f003 fadb 	bl	800505e <HAL_UART_Transmit>
			sendBuffer(processingBuffer, BUFFER_SIZE);
 8001aa8:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <main+0xfc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f8e1 	bl	8001c78 <sendBuffer>
			HAL_Delay(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f000 ff50 	bl	800295c <HAL_Delay>
			if (HAL_ADC_Start_DMA(&hadc1, (uint16_t*) currentBuffer, BUFFER_SIZE)
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <main+0xec>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <main+0xf0>)
 8001ac8:	f000 ffb0 	bl	8002a2c <HAL_ADC_Start_DMA>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0b4      	beq.n	8001a3c <main+0x4c>
					!= HAL_OK) {
				Error_Handler();
 8001ad2:	f000 fea1 	bl	8002818 <Error_Handler>
		if (adcReady && uartReady) {
 8001ad6:	e7b1      	b.n	8001a3c <main+0x4c>
 8001ad8:	2000827c 	.word	0x2000827c
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20008234 	.word	0x20008234
 8001ae4:	20008228 	.word	0x20008228
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	20000004 	.word	0x20000004
 8001af0:	2000822c 	.word	0x2000822c
 8001af4:	20000008 	.word	0x20000008
 8001af8:	200082c4 	.word	0x200082c4
 8001afc:	20006228 	.word	0x20006228

08001b00 <processBuffer>:

/**
 * @brief Process the buffer: Apply FFT and calculate magnitude.
 * @param buffer Pointer to the buffer with raw ADC data
 */
void processBuffer(uint16_t *buffer) {
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af04      	add	r7, sp, #16
 8001b06:	6078      	str	r0, [r7, #4]
	// Apply FFT or other processing logic on the buffer
	rfft(buffer, dft_I, dft_Q, SAMPLE_NUM * 2);
 8001b08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c40 <processBuffer+0x140>)
 8001b0e:	494d      	ldr	r1, [pc, #308]	@ (8001c44 <processBuffer+0x144>)
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fd29 	bl	8001568 <rfft>
	maxAbs(dft_I, dft_Q, abs_I, abs_Q, &bin, &sum, SAMPLE_NUM);
 8001b16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001c48 <processBuffer+0x148>)
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	4b4a      	ldr	r3, [pc, #296]	@ (8001c4c <processBuffer+0x14c>)
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4b4a      	ldr	r3, [pc, #296]	@ (8001c50 <processBuffer+0x150>)
 8001b26:	4a4b      	ldr	r2, [pc, #300]	@ (8001c54 <processBuffer+0x154>)
 8001b28:	4945      	ldr	r1, [pc, #276]	@ (8001c40 <processBuffer+0x140>)
 8001b2a:	4846      	ldr	r0, [pc, #280]	@ (8001c44 <processBuffer+0x144>)
 8001b2c:	f7ff feb8 	bl	80018a0 <maxAbs>
	NF = sum / SAMPLE_NUM;
 8001b30:	4b45      	ldr	r3, [pc, #276]	@ (8001c48 <processBuffer+0x148>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001c58 <processBuffer+0x158>
 8001b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3e:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <processBuffer+0x15c>)
 8001b40:	edc3 7a00 	vstr	s15, [r3]
	//Detect strongest radar return standing 15 dB above noise floor
	if ((20 * log10(abs_I[bin])) > (20 * log10(NF) + 30)) {
 8001b44:	4b41      	ldr	r3, [pc, #260]	@ (8001c4c <processBuffer+0x14c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a42      	ldr	r2, [pc, #264]	@ (8001c54 <processBuffer+0x154>)
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fd09 	bl	8000568 <__aeabi_f2d>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	ec43 2b10 	vmov	d0, r2, r3
 8001b5e:	f008 feff 	bl	800a960 <log10>
 8001b62:	ec51 0b10 	vmov	r0, r1, d0
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <processBuffer+0x160>)
 8001b6c:	f7fe fd54 	bl	8000618 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4614      	mov	r4, r2
 8001b76:	461d      	mov	r5, r3
 8001b78:	4b38      	ldr	r3, [pc, #224]	@ (8001c5c <processBuffer+0x15c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcf3 	bl	8000568 <__aeabi_f2d>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	ec43 2b10 	vmov	d0, r2, r3
 8001b8a:	f008 fee9 	bl	800a960 <log10>
 8001b8e:	ec51 0b10 	vmov	r0, r1, d0
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <processBuffer+0x160>)
 8001b98:	f7fe fd3e 	bl	8000618 <__aeabi_dmul>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <processBuffer+0x164>)
 8001baa:	f7fe fb7f 	bl	80002ac <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	f7fe ffbf 	bl	8000b38 <__aeabi_dcmpgt>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d100      	bne.n	8001bc2 <processBuffer+0xc2>
	speed = 3.6 * (bin + 1)* (FREQUENCY_SAMPLE * 1000 / SAMPLE_NUM) / 160.0;
		if (speed > 10) {
		countVehicles++;
		}
	}
}
 8001bc0:	e035      	b.n	8001c2e <processBuffer+0x12e>
	speed = 3.6 * (bin + 1)* (FREQUENCY_SAMPLE * 1000 / SAMPLE_NUM) / 160.0;
 8001bc2:	4b22      	ldr	r3, [pc, #136]	@ (8001c4c <processBuffer+0x14c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcbb 	bl	8000544 <__aeabi_i2d>
 8001bce:	a31a      	add	r3, pc, #104	@ (adr r3, 8001c38 <processBuffer+0x138>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fd20 	bl	8000618 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <processBuffer+0x168>)
 8001be6:	f7fe fd17 	bl	8000618 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <processBuffer+0x16c>)
 8001bf8:	f7fe fe38 	bl	800086c <__aeabi_ddiv>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7ff f800 	bl	8000c08 <__aeabi_d2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a19      	ldr	r2, [pc, #100]	@ (8001c70 <processBuffer+0x170>)
 8001c0c:	6013      	str	r3, [r2, #0]
		if (speed > 10) {
 8001c0e:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <processBuffer+0x170>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	dc00      	bgt.n	8001c24 <processBuffer+0x124>
}
 8001c22:	e004      	b.n	8001c2e <processBuffer+0x12e>
		countVehicles++;
 8001c24:	4b13      	ldr	r3, [pc, #76]	@ (8001c74 <processBuffer+0x174>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <processBuffer+0x174>)
 8001c2c:	6013      	str	r3, [r2, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bdb0      	pop	{r4, r5, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	cccccccd 	.word	0xcccccccd
 8001c3c:	400ccccc 	.word	0x400ccccc
 8001c40:	20004228 	.word	0x20004228
 8001c44:	20002228 	.word	0x20002228
 8001c48:	20002218 	.word	0x20002218
 8001c4c:	20002214 	.word	0x20002214
 8001c50:	20007228 	.word	0x20007228
 8001c54:	20006228 	.word	0x20006228
 8001c58:	44800000 	.word	0x44800000
 8001c5c:	2000221c 	.word	0x2000221c
 8001c60:	40340000 	.word	0x40340000
 8001c64:	403e0000 	.word	0x403e0000
 8001c68:	403f0000 	.word	0x403f0000
 8001c6c:	40640000 	.word	0x40640000
 8001c70:	20002220 	.word	0x20002220
 8001c74:	20002224 	.word	0x20002224

08001c78 <sendBuffer>:
/**
 * @brief Transmit the buffer using UART DMA.
 * @param buffer Pointer to the buffer to be transmitted
 * @param size Size of the buffer in bytes
 */
void sendBuffer(uint16_t *buffer, size_t size) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
	uartReady = 0; // Clear UART ready flag
 8001c82:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <sendBuffer+0x3c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c88:	2027      	movs	r0, #39	@ 0x27
 8001c8a:	f001 fb9a 	bl	80033c2 <HAL_NVIC_EnableIRQ>
	if (HAL_UART_Transmit_DMA(&huart3, (uint16_t*) buffer, size * 2) != HAL_OK) {
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	461a      	mov	r2, r3
 8001c98:	6879      	ldr	r1, [r7, #4]
 8001c9a:	4807      	ldr	r0, [pc, #28]	@ (8001cb8 <sendBuffer+0x40>)
 8001c9c:	f003 fa72 	bl	8005184 <HAL_UART_Transmit_DMA>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <sendBuffer+0x32>
		Error_Handler();
 8001ca6:	f000 fdb7 	bl	8002818 <Error_Handler>
	}
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000000c 	.word	0x2000000c
 8001cb8:	200082c4 	.word	0x200082c4

08001cbc <HAL_ADC_ConvCpltCallback>:

/**
 * @brief ADC DMA Conversion Complete Callback
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a05      	ldr	r2, [pc, #20]	@ (8001ce0 <HAL_ADC_ConvCpltCallback+0x24>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d102      	bne.n	8001cd4 <HAL_ADC_ConvCpltCallback+0x18>
		adcReady = 1; // Mark buffer as ready for processing
 8001cce:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <HAL_ADC_ConvCpltCallback+0x28>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
	}
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40012000 	.word	0x40012000
 8001ce4:	20008228 	.word	0x20008228

08001ce8 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART DMA Transmission Complete Callback
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <HAL_UART_TxCpltCallback+0x24>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d102      	bne.n	8001d00 <HAL_UART_TxCpltCallback+0x18>
		uartReady = 1; // Mark UART as ready for the next transmission
 8001cfa:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_UART_TxCpltCallback+0x28>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
	}
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40004800 	.word	0x40004800
 8001d10:	2000000c 	.word	0x2000000c

08001d14 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_MspInit+0x6c>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_MspInit+0x6c>)
 8001d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d2a:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <HAL_MspInit+0x6c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <HAL_MspInit+0x6c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <HAL_MspInit+0x6c>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d46:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_MspInit+0x6c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]

	/* System interrupt init*/
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2101      	movs	r1, #1
 8001d56:	f06f 0004 	mvn.w	r0, #4
 8001d5a:	f001 fb16 	bl	800338a <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2101      	movs	r1, #1
 8001d62:	f06f 0003 	mvn.w	r0, #3
 8001d66:	f001 fb10 	bl	800338a <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	f06f 0001 	mvn.w	r0, #1
 8001d72:	f001 fb0a 	bl	800338a <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	@ 0x30
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
	if (hadc->Instance == ADC1) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a67      	ldr	r2, [pc, #412]	@ (8001f40 <HAL_ADC_MspInit+0x1bc>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d16a      	bne.n	8001e7c <HAL_ADC_MspInit+0xf8>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	4b66      	ldr	r3, [pc, #408]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	4a65      	ldr	r2, [pc, #404]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db6:	4b63      	ldr	r3, [pc, #396]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a5e      	ldr	r2, [pc, #376]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
		/**ADC1 GPIO Configuration
		 PA3     ------> ADC1_IN3
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001dde:	2308      	movs	r3, #8
 8001de0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de2:	2303      	movs	r3, #3
 8001de4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	4855      	ldr	r0, [pc, #340]	@ (8001f48 <HAL_ADC_MspInit+0x1c4>)
 8001df2:	f001 ff03 	bl	8003bfc <HAL_GPIO_Init>

		/**ADC1 GPIO Configuration
		 PA6     ------> ADC1_IN6
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001df6:	2340      	movs	r3, #64	@ 0x40
 8001df8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	484f      	ldr	r0, [pc, #316]	@ (8001f48 <HAL_ADC_MspInit+0x1c4>)
 8001e0a:	f001 fef7 	bl	8003bfc <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA2_Stream0;
 8001e0e:	4b4f      	ldr	r3, [pc, #316]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e10:	4a4f      	ldr	r2, [pc, #316]	@ (8001f50 <HAL_ADC_MspInit+0x1cc>)
 8001e12:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e14:	4b4d      	ldr	r3, [pc, #308]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	4b4a      	ldr	r3, [pc, #296]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e26:	4b49      	ldr	r3, [pc, #292]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e2c:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e34:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e36:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e3c:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_NORMAL;
 8001e3e:	4b43      	ldr	r3, [pc, #268]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e44:	4b41      	ldr	r3, [pc, #260]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e4a:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_adc1.Init.Mode |= DMA_IT_TC;  // Enable Transfer Complete Interrupt
 8001e52:	4b3e      	ldr	r3, [pc, #248]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	4a3c      	ldr	r2, [pc, #240]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e5c:	61d3      	str	r3, [r2, #28]

		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8001e5e:	483b      	ldr	r0, [pc, #236]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e60:	f001 faca 	bl	80033f8 <HAL_DMA_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_ADC_MspInit+0xea>
			Error_Handler();
 8001e6a:	f000 fcd5 	bl	8002818 <Error_Handler>
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a36      	ldr	r2, [pc, #216]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e72:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e74:	4a35      	ldr	r2, [pc, #212]	@ (8001f4c <HAL_ADC_MspInit+0x1c8>)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6393      	str	r3, [r2, #56]	@ 0x38
		/* USER CODE BEGIN ADC2_MspInit 1 */

		/* USER CODE END ADC2_MspInit 1 */
	}

}
 8001e7a:	e05c      	b.n	8001f36 <HAL_ADC_MspInit+0x1b2>
	} else if (hadc->Instance == ADC2) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a34      	ldr	r2, [pc, #208]	@ (8001f54 <HAL_ADC_MspInit+0x1d0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d157      	bne.n	8001f36 <HAL_ADC_MspInit+0x1b2>
		__HAL_RCC_ADC2_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001e90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e96:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b27      	ldr	r3, [pc, #156]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a26      	ldr	r2, [pc, #152]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <HAL_ADC_MspInit+0x1c0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ebe:	2320      	movs	r3, #32
 8001ec0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	481d      	ldr	r0, [pc, #116]	@ (8001f48 <HAL_ADC_MspInit+0x1c4>)
 8001ed2:	f001 fe93 	bl	8003bfc <HAL_GPIO_Init>
		hdma_adc2.Instance = DMA2_Stream2;
 8001ed6:	4b20      	ldr	r3, [pc, #128]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001ed8:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <HAL_ADC_MspInit+0x1d8>)
 8001eda:	601a      	str	r2, [r3, #0]
		hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001ede:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ee2:	605a      	str	r2, [r3, #4]
		hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
		hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
		hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001ef2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ef6:	611a      	str	r2, [r3, #16]
		hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001efa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001efe:	615a      	str	r2, [r3, #20]
		hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f00:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001f02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f06:	619a      	str	r2, [r3, #24]
		hdma_adc2.Init.Mode = DMA_NORMAL;
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
		hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001f0e:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
		hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f14:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_DMA_Init(&hdma_adc2) != HAL_OK) {
 8001f1a:	480f      	ldr	r0, [pc, #60]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001f1c:	f001 fa6c 	bl	80033f8 <HAL_DMA_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_ADC_MspInit+0x1a6>
			Error_Handler();
 8001f26:	f000 fc77 	bl	8002818 <Error_Handler>
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc2);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001f2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f30:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <HAL_ADC_MspInit+0x1d4>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f36:	bf00      	nop
 8001f38:	3730      	adds	r7, #48	@ 0x30
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40012000 	.word	0x40012000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	20008308 	.word	0x20008308
 8001f50:	40026410 	.word	0x40026410
 8001f54:	40012100 	.word	0x40012100
 8001f58:	20008368 	.word	0x20008368
 8001f5c:	40026440 	.word	0x40026440

08001f60 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	@ 0x30
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
	if (huart->Instance == USART2) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a51      	ldr	r2, [pc, #324]	@ (80020c4 <HAL_UART_MspInit+0x164>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d13a      	bne.n	8001ff8 <HAL_UART_MspInit+0x98>

		/* Peripheral clock enable */
		__HAL_RCC_USART2_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	4b50      	ldr	r3, [pc, #320]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a4f      	ldr	r2, [pc, #316]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b4d      	ldr	r3, [pc, #308]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	61bb      	str	r3, [r7, #24]
 8001f9c:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	4b49      	ldr	r3, [pc, #292]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a48      	ldr	r2, [pc, #288]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b42      	ldr	r3, [pc, #264]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a41      	ldr	r2, [pc, #260]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
		/**USART2 GPIO Configuration
		 PD5     ------> USART2_TX
		 PD6     ------> USART2_RX
		 */

		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001fd6:	2360      	movs	r3, #96	@ 0x60
 8001fd8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fe6:	2307      	movs	r3, #7
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4836      	ldr	r0, [pc, #216]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8001ff2:	f001 fe03 	bl	8003bfc <HAL_GPIO_Init>

		/* USER CODE END USART3_MspInit 1 */
		/* USER CODE END USART3_MspInit 1 */
	}

}
 8001ff6:	e061      	b.n	80020bc <HAL_UART_MspInit+0x15c>
	} else if (huart->Instance == USART3) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a34      	ldr	r2, [pc, #208]	@ (80020d0 <HAL_UART_MspInit+0x170>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d15c      	bne.n	80020bc <HAL_UART_MspInit+0x15c>
		__HAL_RCC_USART3_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b30      	ldr	r3, [pc, #192]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	4a2f      	ldr	r2, [pc, #188]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002010:	6413      	str	r3, [r2, #64]	@ 0x40
 8002012:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002016:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	4b29      	ldr	r3, [pc, #164]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	4a28      	ldr	r2, [pc, #160]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	6313      	str	r3, [r2, #48]	@ 0x30
 800202e:	4b26      	ldr	r3, [pc, #152]	@ (80020c8 <HAL_UART_MspInit+0x168>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800203a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800203e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800204c:	2307      	movs	r3, #7
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	481d      	ldr	r0, [pc, #116]	@ (80020cc <HAL_UART_MspInit+0x16c>)
 8002058:	f001 fdd0 	bl	8003bfc <HAL_GPIO_Init>
		hdma_usart3_tx.Instance = DMA1_Stream3;
 800205c:	4b1d      	ldr	r3, [pc, #116]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 800205e:	4a1e      	ldr	r2, [pc, #120]	@ (80020d8 <HAL_UART_MspInit+0x178>)
 8002060:	601a      	str	r2, [r3, #0]
		hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002064:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002068:	605a      	str	r2, [r3, #4]
		hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 800206c:	2240      	movs	r2, #64	@ 0x40
 800206e:	609a      	str	r2, [r3, #8]
		hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002070:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
		hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002076:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002078:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800207c:	611a      	str	r2, [r3, #16]
		hdma_usart3_tx.Init.PeriphDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002080:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002084:	615a      	str	r2, [r3, #20]
		hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002086:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800208c:	619a      	str	r2, [r3, #24]
		hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002090:	2200      	movs	r2, #0
 8002092:	61da      	str	r2, [r3, #28]
		hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002094:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 8002096:	2200      	movs	r2, #0
 8002098:	621a      	str	r2, [r3, #32]
		hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 800209c:	2200      	movs	r2, #0
 800209e:	625a      	str	r2, [r3, #36]	@ 0x24
		if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK) {
 80020a0:	480c      	ldr	r0, [pc, #48]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 80020a2:	f001 f9a9 	bl	80033f8 <HAL_DMA_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_UART_MspInit+0x150>
			Error_Handler();
 80020ac:	f000 fbb4 	bl	8002818 <Error_Handler>
		__HAL_LINKDMA(huart, hdmatx, hdma_usart3_tx);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a08      	ldr	r2, [pc, #32]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 80020b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020b6:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_UART_MspInit+0x174>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020bc:	bf00      	nop
 80020be:	3730      	adds	r7, #48	@ 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40004400 	.word	0x40004400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020c00 	.word	0x40020c00
 80020d0:	40004800 	.word	0x40004800
 80020d4:	200083c8 	.word	0x200083c8
 80020d8:	40026058 	.word	0x40026058

080020dc <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM1) {
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a29      	ldr	r2, [pc, #164]	@ (8002190 <HAL_TIM_Base_MspInit+0xb4>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_Base_MspInit+0x30>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4a27      	ldr	r2, [pc, #156]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_TIM8_CLK_ENABLE();
		/* USER CODE BEGIN TIM8_MspInit 1 */

		/* USER CODE END TIM8_MspInit 1 */
	}
}
 800210a:	e03a      	b.n	8002182 <HAL_TIM_Base_MspInit+0xa6>
	} else if (htim_base->Instance == TIM2) {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_Base_MspInit+0x58>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	4a1d      	ldr	r2, [pc, #116]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6413      	str	r3, [r2, #64]	@ 0x40
 8002126:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
}
 8002132:	e026      	b.n	8002182 <HAL_TIM_Base_MspInit+0xa6>
	} else if (htim_base->Instance == TIM3) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a17      	ldr	r2, [pc, #92]	@ (8002198 <HAL_TIM_Base_MspInit+0xbc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d10e      	bne.n	800215c <HAL_TIM_Base_MspInit+0x80>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	4a13      	ldr	r2, [pc, #76]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002148:	f043 0302 	orr.w	r3, r3, #2
 800214c:	6413      	str	r3, [r2, #64]	@ 0x40
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
}
 800215a:	e012      	b.n	8002182 <HAL_TIM_Base_MspInit+0xa6>
	} else if (htim_base->Instance == TIM8) {
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <HAL_TIM_Base_MspInit+0xc0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10d      	bne.n	8002182 <HAL_TIM_Base_MspInit+0xa6>
		__HAL_RCC_TIM8_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	4a09      	ldr	r2, [pc, #36]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	6453      	str	r3, [r2, #68]	@ 0x44
 8002176:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <HAL_TIM_Base_MspInit+0xb8>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40023800 	.word	0x40023800
 8002198:	40000400 	.word	0x40000400
 800219c:	40010400 	.word	0x40010400

080021a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <NMI_Handler+0x4>

080021a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <HardFault_Handler+0x4>

080021b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <MemManage_Handler+0x4>

080021b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021bc:	bf00      	nop
 80021be:	e7fd      	b.n	80021bc <BusFault_Handler+0x4>

080021c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <UsageFault_Handler+0x4>

080021c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f6:	f000 fb91 	bl	800291c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002204:	4802      	ldr	r0, [pc, #8]	@ (8002210 <DMA1_Stream3_IRQHandler+0x10>)
 8002206:	f001 fa8f 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200083c8 	.word	0x200083c8

08002214 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <DMA2_Stream0_IRQHandler+0x10>)
 800221a:	f001 fa85 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20008308 	.word	0x20008308

08002228 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800222c:	4802      	ldr	r0, [pc, #8]	@ (8002238 <DMA2_Stream2_IRQHandler+0x10>)
 800222e:	f001 fa7b 	bl	8003728 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20008368 	.word	0x20008368

0800223c <USART3_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART3_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart3);
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <USART3_IRQHandler+0x10>)
 8002242:	f003 f81d 	bl	8005280 <HAL_UART_IRQHandler>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200082c4 	.word	0x200082c4

08002250 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
	return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <_kill>:

int _kill(int pid, int sig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800226a:	f004 ffef 	bl	800724c <__errno>
 800226e:	4603      	mov	r3, r0
 8002270:	2216      	movs	r2, #22
 8002272:	601a      	str	r2, [r3, #0]
	return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <_exit>:

void _exit (int status)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe7 	bl	8002260 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002292:	bf00      	nop
 8002294:	e7fd      	b.n	8002292 <_exit+0x12>

08002296 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b086      	sub	sp, #24
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	e00a      	b.n	80022be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022a8:	f3af 8000 	nop.w
 80022ac:	4601      	mov	r1, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	60ba      	str	r2, [r7, #8]
 80022b4:	b2ca      	uxtb	r2, r1
 80022b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	3301      	adds	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	dbf0      	blt.n	80022a8 <_read+0x12>
	}

return len;
 80022c6:	687b      	ldr	r3, [r7, #4]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <_close>:
	}
	return len;
}

int _close(int file)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	return -1;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022f8:	605a      	str	r2, [r3, #4]
	return 0;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <_isatty>:

int _isatty(int file)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	return 1;
 8002310:	2301      	movs	r3, #1
}
 8002312:	4618      	mov	r0, r3
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
	return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002340:	4a14      	ldr	r2, [pc, #80]	@ (8002394 <_sbrk+0x5c>)
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <_sbrk+0x60>)
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800234c:	4b13      	ldr	r3, [pc, #76]	@ (800239c <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002354:	4b11      	ldr	r3, [pc, #68]	@ (800239c <_sbrk+0x64>)
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <_sbrk+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	429a      	cmp	r2, r3
 8002366:	d207      	bcs.n	8002378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002368:	f004 ff70 	bl	800724c <__errno>
 800236c:	4603      	mov	r3, r0
 800236e:	220c      	movs	r2, #12
 8002370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e009      	b.n	800238c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002378:	4b08      	ldr	r3, [pc, #32]	@ (800239c <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800237e:	4b07      	ldr	r3, [pc, #28]	@ (800239c <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	4a05      	ldr	r2, [pc, #20]	@ (800239c <_sbrk+0x64>)
 8002388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800238a:	68fb      	ldr	r3, [r7, #12]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20030000 	.word	0x20030000
 8002398:	00000400 	.word	0x00000400
 800239c:	20008230 	.word	0x20008230
 80023a0:	20008578 	.word	0x20008578

080023a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a8:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <SystemInit+0x20>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ae:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <SystemInit+0x20>)
 80023b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <SystemClock_Config>:
DMA_HandleTypeDef hdma_usart3_tx;
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b094      	sub	sp, #80	@ 0x50
 80023cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	2230      	movs	r2, #48	@ 0x30
 80023d4:	2100      	movs	r1, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f004 fee5 	bl	80071a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	4b2b      	ldr	r3, [pc, #172]	@ (80024a0 <SystemClock_Config+0xd8>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	4a2a      	ldr	r2, [pc, #168]	@ (80024a0 <SystemClock_Config+0xd8>)
 80023f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fc:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <SystemClock_Config+0xd8>)
 80023fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	4b25      	ldr	r3, [pc, #148]	@ (80024a4 <SystemClock_Config+0xdc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a24      	ldr	r2, [pc, #144]	@ (80024a4 <SystemClock_Config+0xdc>)
 8002412:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b22      	ldr	r3, [pc, #136]	@ (80024a4 <SystemClock_Config+0xdc>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002424:	2301      	movs	r3, #1
 8002426:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002428:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800242e:	2302      	movs	r3, #2
 8002430:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002432:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002436:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002438:	2304      	movs	r3, #4
 800243a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 160;
 800243c:	23a0      	movs	r3, #160	@ 0xa0
 800243e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002440:	2302      	movs	r3, #2
 8002442:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002444:	2307      	movs	r3, #7
 8002446:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002448:	f107 0320 	add.w	r3, r7, #32
 800244c:	4618      	mov	r0, r3
 800244e:	f001 fdeb 	bl	8004028 <HAL_RCC_OscConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <SystemClock_Config+0x94>
		Error_Handler();
 8002458:	f000 f9de 	bl	8002818 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800245c:	f001 fd94 	bl	8003f88 <HAL_PWREx_EnableOverDrive>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <SystemClock_Config+0xa2>
		Error_Handler();
 8002466:	f000 f9d7 	bl	8002818 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800246a:	230f      	movs	r3, #15
 800246c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800246e:	2302      	movs	r3, #2
 8002470:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002476:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800247a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800247c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002480:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	2105      	movs	r1, #5
 8002488:	4618      	mov	r0, r3
 800248a:	f002 f845 	bl	8004518 <HAL_RCC_ClockConfig>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <SystemClock_Config+0xd0>
		Error_Handler();
 8002494:	f000 f9c0 	bl	8002818 <Error_Handler>
	}
}
 8002498:	bf00      	nop
 800249a:	3750      	adds	r7, #80	@ 0x50
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40007000 	.word	0x40007000

080024a8 <USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
void USART3_UART_Init(void) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <USART3_UART_Init+0x50>)
 80024b0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 460800;  // Set baud rate to 1,500,000 bps;
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024b4:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80024b8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024ce:	220c      	movs	r2, #12
 80024d0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80024de:	4805      	ldr	r0, [pc, #20]	@ (80024f4 <USART3_UART_Init+0x4c>)
 80024e0:	f002 fd70 	bl	8004fc4 <HAL_UART_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <USART3_UART_Init+0x46>
		Error_Handler();
 80024ea:	f000 f995 	bl	8002818 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	200082c4 	.word	0x200082c4
 80024f8:	40004800 	.word	0x40004800

080024fc <_write>:

/**
 *@brief Configure printf
 */
int _write(int fd, char *ptr, int len) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	b29a      	uxth	r2, r3
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	4804      	ldr	r0, [pc, #16]	@ (8002524 <_write+0x28>)
 8002514:	f002 fda3 	bl	800505e <HAL_UART_Transmit>
	return len;
 8002518:	687b      	ldr	r3, [r7, #4]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200082c4 	.word	0x200082c4

08002528 <ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void ADC1_Init(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800252e:	463b      	mov	r3, r7
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800253a:	4b2a      	ldr	r3, [pc, #168]	@ (80025e4 <ADC1_Init+0xbc>)
 800253c:	4a2a      	ldr	r2, [pc, #168]	@ (80025e8 <ADC1_Init+0xc0>)
 800253e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002540:	4b28      	ldr	r3, [pc, #160]	@ (80025e4 <ADC1_Init+0xbc>)
 8002542:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002546:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002548:	4b26      	ldr	r3, [pc, #152]	@ (80025e4 <ADC1_Init+0xbc>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800254e:	4b25      	ldr	r3, [pc, #148]	@ (80025e4 <ADC1_Init+0xbc>)
 8002550:	2201      	movs	r2, #1
 8002552:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002554:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <ADC1_Init+0xbc>)
 8002556:	2200      	movs	r2, #0
 8002558:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800255a:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <ADC1_Init+0xbc>)
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <ADC1_Init+0xbc>)
 8002564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002568:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800256a:	4b1e      	ldr	r3, [pc, #120]	@ (80025e4 <ADC1_Init+0xbc>)
 800256c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002570:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002572:	4b1c      	ldr	r3, [pc, #112]	@ (80025e4 <ADC1_Init+0xbc>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8002578:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <ADC1_Init+0xbc>)
 800257a:	2202      	movs	r2, #2
 800257c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800257e:	4b19      	ldr	r3, [pc, #100]	@ (80025e4 <ADC1_Init+0xbc>)
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
//	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV; // Interrupt at end of sequence
 8002586:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <ADC1_Init+0xbc>)
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]

	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800258c:	4815      	ldr	r0, [pc, #84]	@ (80025e4 <ADC1_Init+0xbc>)
 800258e:	f000 fa09 	bl	80029a4 <HAL_ADC_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <ADC1_Init+0x74>
		Error_Handler();
 8002598:	f000 f93e 	bl	8002818 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800259c:	2303      	movs	r3, #3
 800259e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80025a0:	2301      	movs	r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80025a8:	463b      	mov	r3, r7
 80025aa:	4619      	mov	r1, r3
 80025ac:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <ADC1_Init+0xbc>)
 80025ae:	f000 fb61 	bl	8002c74 <HAL_ADC_ConfigChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <ADC1_Init+0x94>
		Error_Handler();
 80025b8:	f000 f92e 	bl	8002818 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_6;
 80025bc:	2306      	movs	r3, #6
 80025be:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80025c0:	2302      	movs	r3, #2
 80025c2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80025c8:	463b      	mov	r3, r7
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <ADC1_Init+0xbc>)
 80025ce:	f000 fb51 	bl	8002c74 <HAL_ADC_ConfigChannel>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <ADC1_Init+0xb4>
		Error_Handler();
 80025d8:	f000 f91e 	bl	8002818 <Error_Handler>
	}
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20008234 	.word	0x20008234
 80025e8:	40012000 	.word	0x40012000

080025ec <TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
void TIM3_Init(void) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002600:	463b      	mov	r3, r7
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <TIM3_Init+0x90>)
 800260a:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <TIM3_Init+0x94>)
 800260c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80 - 1; //0;  //80 mhz/0 = 80mhz counting rate     80mhz for apb1
 800260e:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <TIM3_Init+0x90>)
 8002610:	224f      	movs	r2, #79	@ 0x4f
 8002612:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b19      	ldr	r3, [pc, #100]	@ (800267c <TIM3_Init+0x90>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = FREQUENCY_SAMPLE - 1; //999; //65535 - 1; //80000000/FREQUENCY_SAMPLE; // 80/80 mhz/period = FREQUENCY_SAMPLE
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <TIM3_Init+0x90>)
 800261c:	221f      	movs	r2, #31
 800261e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002620:	4b16      	ldr	r3, [pc, #88]	@ (800267c <TIM3_Init+0x90>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <TIM3_Init+0x90>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800262c:	4813      	ldr	r0, [pc, #76]	@ (800267c <TIM3_Init+0x90>)
 800262e:	f002 f993 	bl	8004958 <HAL_TIM_Base_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <TIM3_Init+0x50>
		Error_Handler();
 8002638:	f000 f8ee 	bl	8002818 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002640:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	4619      	mov	r1, r3
 8002648:	480c      	ldr	r0, [pc, #48]	@ (800267c <TIM3_Init+0x90>)
 800264a:	f002 fa3d 	bl	8004ac8 <HAL_TIM_ConfigClockSource>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <TIM3_Init+0x6c>
		Error_Handler();
 8002654:	f000 f8e0 	bl	8002818 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002658:	2320      	movs	r3, #32
 800265a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002660:	463b      	mov	r3, r7
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	@ (800267c <TIM3_Init+0x90>)
 8002666:	f002 fc31 	bl	8004ecc <HAL_TIMEx_MasterConfigSynchronization>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <TIM3_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 8002670:	f000 f8d2 	bl	8002818 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000827c 	.word	0x2000827c
 8002680:	40000400 	.word	0x40000400

08002684 <GPIO_Init>:
	if (HAL_UART_Init(&huart2) != HAL_OK) {
		Error_Handler();
	}
}

void GPIO_Init(void) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b08c      	sub	sp, #48	@ 0x30
 8002688:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	4b3f      	ldr	r3, [pc, #252]	@ (800279c <GPIO_Init+0x118>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	4a3e      	ldr	r2, [pc, #248]	@ (800279c <GPIO_Init+0x118>)
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026aa:	4b3c      	ldr	r3, [pc, #240]	@ (800279c <GPIO_Init+0x118>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	4b38      	ldr	r3, [pc, #224]	@ (800279c <GPIO_Init+0x118>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	4a37      	ldr	r2, [pc, #220]	@ (800279c <GPIO_Init+0x118>)
 80026c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c6:	4b35      	ldr	r3, [pc, #212]	@ (800279c <GPIO_Init+0x118>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	4b31      	ldr	r3, [pc, #196]	@ (800279c <GPIO_Init+0x118>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	4a30      	ldr	r2, [pc, #192]	@ (800279c <GPIO_Init+0x118>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e2:	4b2e      	ldr	r3, [pc, #184]	@ (800279c <GPIO_Init+0x118>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	613b      	str	r3, [r7, #16]
 80026ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <GPIO_Init+0x118>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	4a29      	ldr	r2, [pc, #164]	@ (800279c <GPIO_Init+0x118>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fe:	4b27      	ldr	r3, [pc, #156]	@ (800279c <GPIO_Init+0x118>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b23      	ldr	r3, [pc, #140]	@ (800279c <GPIO_Init+0x118>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	4a22      	ldr	r2, [pc, #136]	@ (800279c <GPIO_Init+0x118>)
 8002714:	f043 0308 	orr.w	r3, r3, #8
 8002718:	6313      	str	r3, [r2, #48]	@ 0x30
 800271a:	4b20      	ldr	r3, [pc, #128]	@ (800279c <GPIO_Init+0x118>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <GPIO_Init+0x118>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a1b      	ldr	r2, [pc, #108]	@ (800279c <GPIO_Init+0x118>)
 8002730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b19      	ldr	r3, [pc, #100]	@ (800279c <GPIO_Init+0x118>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002748:	4815      	ldr	r0, [pc, #84]	@ (80027a0 <GPIO_Init+0x11c>)
 800274a:	f001 fc03 	bl	8003f54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	2140      	movs	r1, #64	@ 0x40
 8002752:	4814      	ldr	r0, [pc, #80]	@ (80027a4 <GPIO_Init+0x120>)
 8002754:	f001 fbfe 	bl	8003f54 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800275c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800275e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002762:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002768:	f107 031c 	add.w	r3, r7, #28
 800276c:	4619      	mov	r1, r3
 800276e:	480e      	ldr	r0, [pc, #56]	@ (80027a8 <GPIO_Init+0x124>)
 8002770:	f001 fa44 	bl	8003bfc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8002774:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002778:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277a:	2301      	movs	r3, #1
 800277c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002786:	f107 031c 	add.w	r3, r7, #28
 800278a:	4619      	mov	r1, r3
 800278c:	4804      	ldr	r0, [pc, #16]	@ (80027a0 <GPIO_Init+0x11c>)
 800278e:	f001 fa35 	bl	8003bfc <HAL_GPIO_Init>

}
 8002792:	bf00      	nop
 8002794:	3730      	adds	r7, #48	@ 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020400 	.word	0x40020400
 80027a4:	40021800 	.word	0x40021800
 80027a8:	40020800 	.word	0x40020800

080027ac <DMA_Init>:

/**
 * Enable DMA controller clock
 */
void DMA_Init(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b17      	ldr	r3, [pc, #92]	@ (8002814 <DMA_Init+0x68>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a16      	ldr	r2, [pc, #88]	@ (8002814 <DMA_Init+0x68>)
 80027bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <DMA_Init+0x68>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <DMA_Init+0x68>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <DMA_Init+0x68>)
 80027d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <DMA_Init+0x68>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2101      	movs	r1, #1
 80027ee:	2038      	movs	r0, #56	@ 0x38
 80027f0:	f000 fdcb 	bl	800338a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80027f4:	2038      	movs	r0, #56	@ 0x38
 80027f6:	f000 fde4 	bl	80033c2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 3, 1);
 80027fa:	2201      	movs	r2, #1
 80027fc:	2103      	movs	r1, #3
 80027fe:	200e      	movs	r0, #14
 8002800:	f000 fdc3 	bl	800338a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002804:	200e      	movs	r0, #14
 8002806:	f000 fddc 	bl	80033c2 <HAL_NVIC_EnableIRQ>
//	/* DMA2_Stream2_IRQn interrupt configuration */
//	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
//	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800281c:	b672      	cpsid	i
}
 800281e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <Error_Handler+0x8>

08002824 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002824:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800285c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002828:	480d      	ldr	r0, [pc, #52]	@ (8002860 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800282a:	490e      	ldr	r1, [pc, #56]	@ (8002864 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800282c:	4a0e      	ldr	r2, [pc, #56]	@ (8002868 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002840:	4c0b      	ldr	r4, [pc, #44]	@ (8002870 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800284e:	f7ff fda9 	bl	80023a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002852:	f004 fd01 	bl	8007258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002856:	f7ff f8cb 	bl	80019f0 <main>
  bx  lr    
 800285a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800285c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002864:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002868:	0800cf60 	.word	0x0800cf60
  ldr r2, =_sbss
 800286c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002870:	20008578 	.word	0x20008578

08002874 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <ADC_IRQHandler>
	...

08002878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800287c:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0d      	ldr	r2, [pc, #52]	@ (80028b8 <HAL_Init+0x40>)
 8002882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002886:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <HAL_Init+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0a      	ldr	r2, [pc, #40]	@ (80028b8 <HAL_Init+0x40>)
 800288e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002892:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <HAL_Init+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a07      	ldr	r2, [pc, #28]	@ (80028b8 <HAL_Init+0x40>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800289e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a0:	2003      	movs	r0, #3
 80028a2:	f000 fd67 	bl	8003374 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f000 f808 	bl	80028bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ac:	f7ff fa32 	bl	8001d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40023c00 	.word	0x40023c00

080028bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028c4:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <HAL_InitTick+0x54>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_InitTick+0x58>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fd7f 	bl	80033de <HAL_SYSTICK_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00e      	b.n	8002908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b0f      	cmp	r3, #15
 80028ee:	d80a      	bhi.n	8002906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f0:	2200      	movs	r2, #0
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f000 fd47 	bl	800338a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028fc:	4a06      	ldr	r2, [pc, #24]	@ (8002918 <HAL_InitTick+0x5c>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	e000      	b.n	8002908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000010 	.word	0x20000010
 8002914:	20000018 	.word	0x20000018
 8002918:	20000014 	.word	0x20000014

0800291c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_IncTick+0x20>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_IncTick+0x24>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <HAL_IncTick+0x24>)
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000018 	.word	0x20000018
 8002940:	20008428 	.word	0x20008428

08002944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  return uwTick;
 8002948:	4b03      	ldr	r3, [pc, #12]	@ (8002958 <HAL_GetTick+0x14>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20008428 	.word	0x20008428

0800295c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff ffee 	bl	8002944 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002974:	d005      	beq.n	8002982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002976:	4b0a      	ldr	r3, [pc, #40]	@ (80029a0 <HAL_Delay+0x44>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002982:	bf00      	nop
 8002984:	f7ff ffde 	bl	8002944 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d8f7      	bhi.n	8002984 <HAL_Delay+0x28>
  {
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000018 	.word	0x20000018

080029a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e033      	b.n	8002a22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff f9de 	bl	8001d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d118      	bne.n	8002a14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029ea:	f023 0302 	bic.w	r3, r3, #2
 80029ee:	f043 0202 	orr.w	r2, r3, #2
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa6e 	bl	8002ed8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a12:	e001      	b.n	8002a18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_Start_DMA+0x1e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e0e9      	b.n	8002c1e <HAL_ADC_Start_DMA+0x1f2>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d018      	beq.n	8002a92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a70:	4b6d      	ldr	r3, [pc, #436]	@ (8002c28 <HAL_ADC_Start_DMA+0x1fc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a6d      	ldr	r2, [pc, #436]	@ (8002c2c <HAL_ADC_Start_DMA+0x200>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	0c9a      	lsrs	r2, r3, #18
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	4413      	add	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a84:	e002      	b.n	8002a8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f9      	bne.n	8002a86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aa0:	d107      	bne.n	8002ab2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	f040 80a1 	bne.w	8002c04 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b00:	d106      	bne.n	8002b10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f023 0206 	bic.w	r2, r3, #6
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b0e:	e002      	b.n	8002b16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b1e:	4b44      	ldr	r3, [pc, #272]	@ (8002c30 <HAL_ADC_Start_DMA+0x204>)
 8002b20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b26:	4a43      	ldr	r2, [pc, #268]	@ (8002c34 <HAL_ADC_Start_DMA+0x208>)
 8002b28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2e:	4a42      	ldr	r2, [pc, #264]	@ (8002c38 <HAL_ADC_Start_DMA+0x20c>)
 8002b30:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	4a41      	ldr	r2, [pc, #260]	@ (8002c3c <HAL_ADC_Start_DMA+0x210>)
 8002b38:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	334c      	adds	r3, #76	@ 0x4c
 8002b6e:	4619      	mov	r1, r3
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f000 fcee 	bl	8003554 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 031f 	and.w	r3, r3, #31
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d12a      	bne.n	8002bda <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2d      	ldr	r2, [pc, #180]	@ (8002c40 <HAL_ADC_Start_DMA+0x214>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d015      	beq.n	8002bba <HAL_ADC_Start_DMA+0x18e>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2c      	ldr	r2, [pc, #176]	@ (8002c44 <HAL_ADC_Start_DMA+0x218>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d105      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x178>
 8002b98:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <HAL_ADC_Start_DMA+0x204>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a27      	ldr	r2, [pc, #156]	@ (8002c48 <HAL_ADC_Start_DMA+0x21c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d136      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f0>
 8002bae:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <HAL_ADC_Start_DMA+0x204>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d130      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d129      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e020      	b.n	8002c1c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <HAL_ADC_Start_DMA+0x214>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d11b      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f0>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d114      	bne.n	8002c1c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c00:	609a      	str	r2, [r3, #8]
 8002c02:	e00b      	b.n	8002c1c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	f043 0210 	orr.w	r2, r3, #16
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000010 	.word	0x20000010
 8002c2c:	431bde83 	.word	0x431bde83
 8002c30:	40012300 	.word	0x40012300
 8002c34:	080030d1 	.word	0x080030d1
 8002c38:	0800318b 	.word	0x0800318b
 8002c3c:	080031a7 	.word	0x080031a7
 8002c40:	40012000 	.word	0x40012000
 8002c44:	40012100 	.word	0x40012100
 8002c48:	40012200 	.word	0x40012200

08002c4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x1c>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e113      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x244>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b09      	cmp	r3, #9
 8002c9e:	d925      	bls.n	8002cec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68d9      	ldr	r1, [r3, #12]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3b1e      	subs	r3, #30
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68d9      	ldr	r1, [r3, #12]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	4603      	mov	r3, r0
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4403      	add	r3, r0
 8002cde:	3b1e      	subs	r3, #30
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	e022      	b.n	8002d32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6919      	ldr	r1, [r3, #16]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	2207      	movs	r2, #7
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6919      	ldr	r1, [r3, #16]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4618      	mov	r0, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4403      	add	r3, r0
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d824      	bhi.n	8002d84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b05      	subs	r3, #5
 8002d4c:	221f      	movs	r2, #31
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	400a      	ands	r2, r1
 8002d5a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	3b05      	subs	r3, #5
 8002d76:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d82:	e04c      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b0c      	cmp	r3, #12
 8002d8a:	d824      	bhi.n	8002dd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b23      	subs	r3, #35	@ 0x23
 8002d9e:	221f      	movs	r2, #31
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43da      	mvns	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	400a      	ands	r2, r1
 8002dac:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b23      	subs	r3, #35	@ 0x23
 8002dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dd4:	e023      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	3b41      	subs	r3, #65	@ 0x41
 8002de8:	221f      	movs	r2, #31
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	400a      	ands	r2, r1
 8002df6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	4618      	mov	r0, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	3b41      	subs	r3, #65	@ 0x41
 8002e12:	fa00 f203 	lsl.w	r2, r0, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x250>)
 8002e20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a28      	ldr	r2, [pc, #160]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d10f      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1d8>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b12      	cmp	r3, #18
 8002e32:	d10b      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x254>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d12b      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x23a>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d003      	beq.n	8002e68 <HAL_ADC_ConfigChannel+0x1f4>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b11      	cmp	r3, #17
 8002e66:	d122      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a11      	ldr	r2, [pc, #68]	@ (8002ecc <HAL_ADC_ConfigChannel+0x258>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d111      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a11      	ldr	r2, [pc, #68]	@ (8002ed4 <HAL_ADC_ConfigChannel+0x260>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	0c9a      	lsrs	r2, r3, #18
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ea0:	e002      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f9      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40012300 	.word	0x40012300
 8002ec8:	40012000 	.word	0x40012000
 8002ecc:	10000012 	.word	0x10000012
 8002ed0:	20000010 	.word	0x20000010
 8002ed4:	431bde83 	.word	0x431bde83

08002ed8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ee0:	4b79      	ldr	r3, [pc, #484]	@ (80030c8 <ADC_Init+0x1f0>)
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6859      	ldr	r1, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	021a      	lsls	r2, r3, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6899      	ldr	r1, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68da      	ldr	r2, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	4a58      	ldr	r2, [pc, #352]	@ (80030cc <ADC_Init+0x1f4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6899      	ldr	r1, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6899      	ldr	r1, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	e00f      	b.n	8002fd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0202 	bic.w	r2, r2, #2
 8002fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7e1b      	ldrb	r3, [r3, #24]
 8002ff0:	005a      	lsls	r2, r3, #1
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003012:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003022:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	3b01      	subs	r3, #1
 8003030:	035a      	lsls	r2, r3, #13
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	e007      	b.n	800304c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800305a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	3b01      	subs	r3, #1
 8003068:	051a      	lsls	r2, r3, #20
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800308e:	025a      	lsls	r2, r3, #9
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6899      	ldr	r1, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	029a      	lsls	r2, r3, #10
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40012300 	.word	0x40012300
 80030cc:	0f000001 	.word	0x0f000001

080030d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d13c      	bne.n	8003164 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d12b      	bne.n	800315c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003108:	2b00      	cmp	r3, #0
 800310a:	d127      	bne.n	800315c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003116:	2b00      	cmp	r3, #0
 8003118:	d006      	beq.n	8003128 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003124:	2b00      	cmp	r3, #0
 8003126:	d119      	bne.n	800315c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0220 	bic.w	r2, r2, #32
 8003136:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d105      	bne.n	800315c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7fe fdad 	bl	8001cbc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003162:	e00e      	b.n	8003182 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7ff fd75 	bl	8002c60 <HAL_ADC_ErrorCallback>
}
 8003176:	e004      	b.n	8003182 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fd57 	bl	8002c4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b084      	sub	sp, #16
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	@ 0x40
 80031b8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f7ff fd4a 	bl	8002c60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f0:	4013      	ands	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__NVIC_GetPriorityGrouping+0x18>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0307 	and.w	r3, r3, #7
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	db0b      	blt.n	8003262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4907      	ldr	r1, [pc, #28]	@ (8003270 <__NVIC_EnableIRQ+0x38>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2001      	movs	r0, #1
 800325a:	fa00 f202 	lsl.w	r2, r0, r2
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	e000e100 	.word	0xe000e100

08003274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	6039      	str	r1, [r7, #0]
 800327e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	2b00      	cmp	r3, #0
 8003286:	db0a      	blt.n	800329e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	490c      	ldr	r1, [pc, #48]	@ (80032c0 <__NVIC_SetPriority+0x4c>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	0112      	lsls	r2, r2, #4
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	440b      	add	r3, r1
 8003298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800329c:	e00a      	b.n	80032b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4908      	ldr	r1, [pc, #32]	@ (80032c4 <__NVIC_SetPriority+0x50>)
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	3b04      	subs	r3, #4
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	440b      	add	r3, r1
 80032b2:	761a      	strb	r2, [r3, #24]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000e100 	.word	0xe000e100
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f1c3 0307 	rsb	r3, r3, #7
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	bf28      	it	cs
 80032e6:	2304      	movcs	r3, #4
 80032e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d902      	bls.n	80032f8 <NVIC_EncodePriority+0x30>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3b03      	subs	r3, #3
 80032f6:	e000      	b.n	80032fa <NVIC_EncodePriority+0x32>
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	401a      	ands	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003310:	f04f 31ff 	mov.w	r1, #4294967295
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	43d9      	mvns	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	4313      	orrs	r3, r2
         );
}
 8003322:	4618      	mov	r0, r3
 8003324:	3724      	adds	r7, #36	@ 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3b01      	subs	r3, #1
 800333c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003340:	d301      	bcc.n	8003346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003342:	2301      	movs	r3, #1
 8003344:	e00f      	b.n	8003366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003346:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <SysTick_Config+0x40>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3b01      	subs	r3, #1
 800334c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334e:	210f      	movs	r1, #15
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	f7ff ff8e 	bl	8003274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <SysTick_Config+0x40>)
 800335a:	2200      	movs	r2, #0
 800335c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335e:	4b04      	ldr	r3, [pc, #16]	@ (8003370 <SysTick_Config+0x40>)
 8003360:	2207      	movs	r2, #7
 8003362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	e000e010 	.word	0xe000e010

08003374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff29 	bl	80031d4 <__NVIC_SetPriorityGrouping>
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800339c:	f7ff ff3e 	bl	800321c <__NVIC_GetPriorityGrouping>
 80033a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	6978      	ldr	r0, [r7, #20]
 80033a8:	f7ff ff8e 	bl	80032c8 <NVIC_EncodePriority>
 80033ac:	4602      	mov	r2, r0
 80033ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff5d 	bl	8003274 <__NVIC_SetPriority>
}
 80033ba:	bf00      	nop
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ff31 	bl	8003238 <__NVIC_EnableIRQ>
}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7ff ffa2 	bl	8003330 <SysTick_Config>
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003404:	f7ff fa9e 	bl	8002944 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e099      	b.n	8003548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003434:	e00f      	b.n	8003456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003436:	f7ff fa85 	bl	8002944 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b05      	cmp	r3, #5
 8003442:	d908      	bls.n	8003456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2203      	movs	r2, #3
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e078      	b.n	8003548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e8      	bne.n	8003436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4b38      	ldr	r3, [pc, #224]	@ (8003550 <HAL_DMA_Init+0x158>)
 8003470:	4013      	ands	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d107      	bne.n	80034c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b8:	4313      	orrs	r3, r2
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0307 	bic.w	r3, r3, #7
 80034d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d117      	bne.n	800351a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00e      	beq.n	800351a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb01 	bl	8003b04 <DMA_CheckFifoParam>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2240      	movs	r2, #64	@ 0x40
 800350c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003516:	2301      	movs	r3, #1
 8003518:	e016      	b.n	8003548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fab8 	bl	8003a98 <DMA_CalcBaseAndBitshift>
 8003528:	4603      	mov	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	223f      	movs	r2, #63	@ 0x3f
 8003532:	409a      	lsls	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	f010803f 	.word	0xf010803f

08003554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_DMA_Start_IT+0x26>
 8003576:	2302      	movs	r3, #2
 8003578:	e040      	b.n	80035fc <HAL_DMA_Start_IT+0xa8>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d12f      	bne.n	80035ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fa4a 	bl	8003a3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ac:	223f      	movs	r2, #63	@ 0x3f
 80035ae:	409a      	lsls	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0216 	orr.w	r2, r2, #22
 80035c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0208 	orr.w	r2, r2, #8
 80035da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e005      	b.n	80035fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
 80035f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003610:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003612:	f7ff f997 	bl	8002944 <HAL_GetTick>
 8003616:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d008      	beq.n	8003636 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2280      	movs	r2, #128	@ 0x80
 8003628:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e052      	b.n	80036dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0216 	bic.w	r2, r2, #22
 8003644:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003654:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d103      	bne.n	8003666 <HAL_DMA_Abort+0x62>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0208 	bic.w	r2, r2, #8
 8003674:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003686:	e013      	b.n	80036b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003688:	f7ff f95c 	bl	8002944 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b05      	cmp	r3, #5
 8003694:	d90c      	bls.n	80036b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2203      	movs	r2, #3
 80036a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e015      	b.n	80036dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1e4      	bne.n	8003688 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c2:	223f      	movs	r2, #63	@ 0x3f
 80036c4:	409a      	lsls	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d004      	beq.n	8003702 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e00c      	b.n	800371c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2205      	movs	r2, #5
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003734:	4b8e      	ldr	r3, [pc, #568]	@ (8003970 <HAL_DMA_IRQHandler+0x248>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a8e      	ldr	r2, [pc, #568]	@ (8003974 <HAL_DMA_IRQHandler+0x24c>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	0a9b      	lsrs	r3, r3, #10
 8003740:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	2208      	movs	r2, #8
 8003754:	409a      	lsls	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01a      	beq.n	8003794 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0204 	bic.w	r2, r2, #4
 800377a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003780:	2208      	movs	r2, #8
 8003782:	409a      	lsls	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003798:	2201      	movs	r2, #1
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d012      	beq.n	80037ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	2201      	movs	r2, #1
 80037b8:	409a      	lsls	r2, r3
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c2:	f043 0202 	orr.w	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	2204      	movs	r2, #4
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d012      	beq.n	8003800 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00b      	beq.n	8003800 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ec:	2204      	movs	r2, #4
 80037ee:	409a      	lsls	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f8:	f043 0204 	orr.w	r2, r3, #4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003804:	2210      	movs	r2, #16
 8003806:	409a      	lsls	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4013      	ands	r3, r2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d043      	beq.n	8003898 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d03c      	beq.n	8003898 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003822:	2210      	movs	r2, #16
 8003824:	409a      	lsls	r2, r3
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d018      	beq.n	800386a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d024      	beq.n	8003898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	4798      	blx	r3
 8003856:	e01f      	b.n	8003898 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01b      	beq.n	8003898 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
 8003868:	e016      	b.n	8003898 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d107      	bne.n	8003888 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0208 	bic.w	r2, r2, #8
 8003886:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389c:	2220      	movs	r2, #32
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 808f 	beq.w	80039c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8087 	beq.w	80039c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038be:	2220      	movs	r2, #32
 80038c0:	409a      	lsls	r2, r3
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d136      	bne.n	8003940 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0216 	bic.w	r2, r2, #22
 80038e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <HAL_DMA_IRQHandler+0x1da>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0208 	bic.w	r2, r2, #8
 8003910:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003916:	223f      	movs	r2, #63	@ 0x3f
 8003918:	409a      	lsls	r2, r3
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003932:	2b00      	cmp	r3, #0
 8003934:	d07e      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	4798      	blx	r3
        }
        return;
 800393e:	e079      	b.n	8003a34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d01d      	beq.n	800398a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10d      	bne.n	8003978 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003960:	2b00      	cmp	r3, #0
 8003962:	d031      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
 800396c:	e02c      	b.n	80039c8 <HAL_DMA_IRQHandler+0x2a0>
 800396e:	bf00      	nop
 8003970:	20000010 	.word	0x20000010
 8003974:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d023      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
 8003988:	e01e      	b.n	80039c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10f      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0210 	bic.w	r2, r2, #16
 80039a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d032      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d022      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2205      	movs	r2, #5
 80039e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	3301      	adds	r3, #1
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d307      	bcc.n	8003a10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f2      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x2cc>
 8003a0e:	e000      	b.n	8003a12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
 8003a32:	e000      	b.n	8003a36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a34:	bf00      	nop
    }
  }
}
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b40      	cmp	r3, #64	@ 0x40
 8003a68:	d108      	bne.n	8003a7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a7a:	e007      	b.n	8003a8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	3b10      	subs	r3, #16
 8003aa8:	4a14      	ldr	r2, [pc, #80]	@ (8003afc <DMA_CalcBaseAndBitshift+0x64>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ab2:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <DMA_CalcBaseAndBitshift+0x68>)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d909      	bls.n	8003ada <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ace:	f023 0303 	bic.w	r3, r3, #3
 8003ad2:	1d1a      	adds	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ad8:	e007      	b.n	8003aea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	aaaaaaab 	.word	0xaaaaaaab
 8003b00:	0800c910 	.word	0x0800c910

08003b04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d11f      	bne.n	8003b5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d856      	bhi.n	8003bd2 <DMA_CheckFifoParam+0xce>
 8003b24:	a201      	add	r2, pc, #4	@ (adr r2, 8003b2c <DMA_CheckFifoParam+0x28>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b3d 	.word	0x08003b3d
 8003b30:	08003b4f 	.word	0x08003b4f
 8003b34:	08003b3d 	.word	0x08003b3d
 8003b38:	08003bd3 	.word	0x08003bd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d046      	beq.n	8003bd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4c:	e043      	b.n	8003bd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b56:	d140      	bne.n	8003bda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b5c:	e03d      	b.n	8003bda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b66:	d121      	bne.n	8003bac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d837      	bhi.n	8003bde <DMA_CheckFifoParam+0xda>
 8003b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b74 <DMA_CheckFifoParam+0x70>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b8b 	.word	0x08003b8b
 8003b7c:	08003b85 	.word	0x08003b85
 8003b80:	08003b9d 	.word	0x08003b9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]
      break;
 8003b88:	e030      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d025      	beq.n	8003be2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9a:	e022      	b.n	8003be2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ba4:	d11f      	bne.n	8003be6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003baa:	e01c      	b.n	8003be6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d903      	bls.n	8003bba <DMA_CheckFifoParam+0xb6>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d003      	beq.n	8003bc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bb8:	e018      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bbe:	e015      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd0:	e00b      	b.n	8003bea <DMA_CheckFifoParam+0xe6>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e00a      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e008      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e006      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
      break;
 8003bde:	bf00      	nop
 8003be0:	e004      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
      break;
 8003be2:	bf00      	nop
 8003be4:	e002      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
      break;   
 8003be6:	bf00      	nop
 8003be8:	e000      	b.n	8003bec <DMA_CheckFifoParam+0xe8>
      break;
 8003bea:	bf00      	nop
    }
  } 
  
  return status; 
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop

08003bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b089      	sub	sp, #36	@ 0x24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	e177      	b.n	8003f08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c18:	2201      	movs	r2, #1
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	f040 8166 	bne.w	8003f02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d005      	beq.n	8003c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d130      	bne.n	8003cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	2203      	movs	r2, #3
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c84:	2201      	movs	r2, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f003 0201 	and.w	r2, r3, #1
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d017      	beq.n	8003cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d123      	bne.n	8003d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	220f      	movs	r2, #15
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	69b9      	ldr	r1, [r7, #24]
 8003d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0203 	and.w	r2, r3, #3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80c0 	beq.w	8003f02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	4b66      	ldr	r3, [pc, #408]	@ (8003f20 <HAL_GPIO_Init+0x324>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	4a65      	ldr	r2, [pc, #404]	@ (8003f20 <HAL_GPIO_Init+0x324>)
 8003d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d92:	4b63      	ldr	r3, [pc, #396]	@ (8003f20 <HAL_GPIO_Init+0x324>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d9e:	4a61      	ldr	r2, [pc, #388]	@ (8003f24 <HAL_GPIO_Init+0x328>)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	3302      	adds	r3, #2
 8003da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	220f      	movs	r2, #15
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a58      	ldr	r2, [pc, #352]	@ (8003f28 <HAL_GPIO_Init+0x32c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d037      	beq.n	8003e3a <HAL_GPIO_Init+0x23e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a57      	ldr	r2, [pc, #348]	@ (8003f2c <HAL_GPIO_Init+0x330>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d031      	beq.n	8003e36 <HAL_GPIO_Init+0x23a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a56      	ldr	r2, [pc, #344]	@ (8003f30 <HAL_GPIO_Init+0x334>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02b      	beq.n	8003e32 <HAL_GPIO_Init+0x236>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a55      	ldr	r2, [pc, #340]	@ (8003f34 <HAL_GPIO_Init+0x338>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d025      	beq.n	8003e2e <HAL_GPIO_Init+0x232>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a54      	ldr	r2, [pc, #336]	@ (8003f38 <HAL_GPIO_Init+0x33c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01f      	beq.n	8003e2a <HAL_GPIO_Init+0x22e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a53      	ldr	r2, [pc, #332]	@ (8003f3c <HAL_GPIO_Init+0x340>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d019      	beq.n	8003e26 <HAL_GPIO_Init+0x22a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a52      	ldr	r2, [pc, #328]	@ (8003f40 <HAL_GPIO_Init+0x344>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0x226>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a51      	ldr	r2, [pc, #324]	@ (8003f44 <HAL_GPIO_Init+0x348>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00d      	beq.n	8003e1e <HAL_GPIO_Init+0x222>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a50      	ldr	r2, [pc, #320]	@ (8003f48 <HAL_GPIO_Init+0x34c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <HAL_GPIO_Init+0x21e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4f      	ldr	r2, [pc, #316]	@ (8003f4c <HAL_GPIO_Init+0x350>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_GPIO_Init+0x21a>
 8003e12:	2309      	movs	r3, #9
 8003e14:	e012      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e16:	230a      	movs	r3, #10
 8003e18:	e010      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	e00e      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e1e:	2307      	movs	r3, #7
 8003e20:	e00c      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e22:	2306      	movs	r3, #6
 8003e24:	e00a      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e26:	2305      	movs	r3, #5
 8003e28:	e008      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e004      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_GPIO_Init+0x240>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	f002 0203 	and.w	r2, r2, #3
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	4093      	lsls	r3, r2
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e4c:	4935      	ldr	r1, [pc, #212]	@ (8003f24 <HAL_GPIO_Init+0x328>)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f50 <HAL_GPIO_Init+0x354>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e7e:	4a34      	ldr	r2, [pc, #208]	@ (8003f50 <HAL_GPIO_Init+0x354>)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e84:	4b32      	ldr	r3, [pc, #200]	@ (8003f50 <HAL_GPIO_Init+0x354>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ea8:	4a29      	ldr	r2, [pc, #164]	@ (8003f50 <HAL_GPIO_Init+0x354>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eae:	4b28      	ldr	r3, [pc, #160]	@ (8003f50 <HAL_GPIO_Init+0x354>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f50 <HAL_GPIO_Init+0x354>)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f50 <HAL_GPIO_Init+0x354>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003efc:	4a14      	ldr	r2, [pc, #80]	@ (8003f50 <HAL_GPIO_Init+0x354>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b0f      	cmp	r3, #15
 8003f0c:	f67f ae84 	bls.w	8003c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3724      	adds	r7, #36	@ 0x24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020400 	.word	0x40020400
 8003f30:	40020800 	.word	0x40020800
 8003f34:	40020c00 	.word	0x40020c00
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40021400 	.word	0x40021400
 8003f40:	40021800 	.word	0x40021800
 8003f44:	40021c00 	.word	0x40021c00
 8003f48:	40022000 	.word	0x40022000
 8003f4c:	40022400 	.word	0x40022400
 8003f50:	40013c00 	.word	0x40013c00

08003f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	807b      	strh	r3, [r7, #2]
 8003f60:	4613      	mov	r3, r2
 8003f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f64:	787b      	ldrb	r3, [r7, #1]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f70:	e003      	b.n	8003f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f72:	887b      	ldrh	r3, [r7, #2]
 8003f74:	041a      	lsls	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	619a      	str	r2, [r3, #24]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	4b20      	ldr	r3, [pc, #128]	@ (8004018 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004018 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8004018 <HAL_PWREx_EnableOverDrive+0x90>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fae:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <HAL_PWREx_EnableOverDrive+0x94>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb4:	f7fe fcc6 	bl	8002944 <HAL_GetTick>
 8003fb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fba:	e009      	b.n	8003fd0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fbc:	f7fe fcc2 	bl	8002944 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003fca:	d901      	bls.n	8003fd0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e01f      	b.n	8004010 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fd0:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fdc:	d1ee      	bne.n	8003fbc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fde:	4b11      	ldr	r3, [pc, #68]	@ (8004024 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fe4:	f7fe fcae 	bl	8002944 <HAL_GetTick>
 8003fe8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fea:	e009      	b.n	8004000 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fec:	f7fe fcaa 	bl	8002944 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ffa:	d901      	bls.n	8004000 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e007      	b.n	8004010 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004000:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <HAL_PWREx_EnableOverDrive+0x98>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004008:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800400c:	d1ee      	bne.n	8003fec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	420e0040 	.word	0x420e0040
 8004020:	40007000 	.word	0x40007000
 8004024:	420e0044 	.word	0x420e0044

08004028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e267      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d075      	beq.n	8004132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004046:	4b88      	ldr	r3, [pc, #544]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b04      	cmp	r3, #4
 8004050:	d00c      	beq.n	800406c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004052:	4b85      	ldr	r3, [pc, #532]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800405a:	2b08      	cmp	r3, #8
 800405c:	d112      	bne.n	8004084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800405e:	4b82      	ldr	r3, [pc, #520]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800406a:	d10b      	bne.n	8004084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800406c:	4b7e      	ldr	r3, [pc, #504]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d05b      	beq.n	8004130 <HAL_RCC_OscConfig+0x108>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d157      	bne.n	8004130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e242      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408c:	d106      	bne.n	800409c <HAL_RCC_OscConfig+0x74>
 800408e:	4b76      	ldr	r3, [pc, #472]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a75      	ldr	r2, [pc, #468]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e01d      	b.n	80040d8 <HAL_RCC_OscConfig+0xb0>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x98>
 80040a6:	4b70      	ldr	r3, [pc, #448]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6f      	ldr	r2, [pc, #444]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a6c      	ldr	r2, [pc, #432]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0xb0>
 80040c0:	4b69      	ldr	r3, [pc, #420]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a68      	ldr	r2, [pc, #416]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	4b66      	ldr	r3, [pc, #408]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a65      	ldr	r2, [pc, #404]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d013      	beq.n	8004108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fe fc30 	bl	8002944 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e8:	f7fe fc2c 	bl	8002944 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	@ 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e207      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCC_OscConfig+0xc0>
 8004106:	e014      	b.n	8004132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004108:	f7fe fc1c 	bl	8002944 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004110:	f7fe fc18 	bl	8002944 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	@ 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e1f3      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004122:	4b51      	ldr	r3, [pc, #324]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f0      	bne.n	8004110 <HAL_RCC_OscConfig+0xe8>
 800412e:	e000      	b.n	8004132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d063      	beq.n	8004206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413e:	4b4a      	ldr	r3, [pc, #296]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414a:	4b47      	ldr	r3, [pc, #284]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004152:	2b08      	cmp	r3, #8
 8004154:	d11c      	bne.n	8004190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004156:	4b44      	ldr	r3, [pc, #272]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d116      	bne.n	8004190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004162:	4b41      	ldr	r3, [pc, #260]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_RCC_OscConfig+0x152>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e1c7      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417a:	4b3b      	ldr	r3, [pc, #236]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	4937      	ldr	r1, [pc, #220]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800418e:	e03a      	b.n	8004206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d020      	beq.n	80041da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004198:	4b34      	ldr	r3, [pc, #208]	@ (800426c <HAL_RCC_OscConfig+0x244>)
 800419a:	2201      	movs	r2, #1
 800419c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fe fbd1 	bl	8002944 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041a6:	f7fe fbcd 	bl	8002944 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e1a8      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c4:	4b28      	ldr	r3, [pc, #160]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4925      	ldr	r1, [pc, #148]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	600b      	str	r3, [r1, #0]
 80041d8:	e015      	b.n	8004206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041da:	4b24      	ldr	r3, [pc, #144]	@ (800426c <HAL_RCC_OscConfig+0x244>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fe fbb0 	bl	8002944 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e8:	f7fe fbac 	bl	8002944 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e187      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d036      	beq.n	8004280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d016      	beq.n	8004248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800421a:	4b15      	ldr	r3, [pc, #84]	@ (8004270 <HAL_RCC_OscConfig+0x248>)
 800421c:	2201      	movs	r2, #1
 800421e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004220:	f7fe fb90 	bl	8002944 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004228:	f7fe fb8c 	bl	8002944 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e167      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423a:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <HAL_RCC_OscConfig+0x240>)
 800423c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x200>
 8004246:	e01b      	b.n	8004280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004248:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <HAL_RCC_OscConfig+0x248>)
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800424e:	f7fe fb79 	bl	8002944 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	e00e      	b.n	8004274 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004256:	f7fe fb75 	bl	8002944 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d907      	bls.n	8004274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e150      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
 8004268:	40023800 	.word	0x40023800
 800426c:	42470000 	.word	0x42470000
 8004270:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004274:	4b88      	ldr	r3, [pc, #544]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ea      	bne.n	8004256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8097 	beq.w	80043bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004292:	4b81      	ldr	r3, [pc, #516]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10f      	bne.n	80042be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 80042a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ae:	4b7a      	ldr	r3, [pc, #488]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b6:	60bb      	str	r3, [r7, #8]
 80042b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	4b77      	ldr	r3, [pc, #476]	@ (800449c <HAL_RCC_OscConfig+0x474>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d118      	bne.n	80042fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ca:	4b74      	ldr	r3, [pc, #464]	@ (800449c <HAL_RCC_OscConfig+0x474>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a73      	ldr	r2, [pc, #460]	@ (800449c <HAL_RCC_OscConfig+0x474>)
 80042d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042d6:	f7fe fb35 	bl	8002944 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042de:	f7fe fb31 	bl	8002944 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e10c      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f0:	4b6a      	ldr	r3, [pc, #424]	@ (800449c <HAL_RCC_OscConfig+0x474>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0f0      	beq.n	80042de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d106      	bne.n	8004312 <HAL_RCC_OscConfig+0x2ea>
 8004304:	4b64      	ldr	r3, [pc, #400]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	4a63      	ldr	r2, [pc, #396]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004310:	e01c      	b.n	800434c <HAL_RCC_OscConfig+0x324>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	2b05      	cmp	r3, #5
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0x30c>
 800431a:	4b5f      	ldr	r3, [pc, #380]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431e:	4a5e      	ldr	r2, [pc, #376]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004320:	f043 0304 	orr.w	r3, r3, #4
 8004324:	6713      	str	r3, [r2, #112]	@ 0x70
 8004326:	4b5c      	ldr	r3, [pc, #368]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	4a5b      	ldr	r2, [pc, #364]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	6713      	str	r3, [r2, #112]	@ 0x70
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0x324>
 8004334:	4b58      	ldr	r3, [pc, #352]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004338:	4a57      	ldr	r2, [pc, #348]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004340:	4b55      	ldr	r3, [pc, #340]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	4a54      	ldr	r2, [pc, #336]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004346:	f023 0304 	bic.w	r3, r3, #4
 800434a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d015      	beq.n	8004380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fe faf6 	bl	8002944 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435a:	e00a      	b.n	8004372 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435c:	f7fe faf2 	bl	8002944 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0cb      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004372:	4b49      	ldr	r3, [pc, #292]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0ee      	beq.n	800435c <HAL_RCC_OscConfig+0x334>
 800437e:	e014      	b.n	80043aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004380:	f7fe fae0 	bl	8002944 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004386:	e00a      	b.n	800439e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fe fadc 	bl	8002944 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e0b5      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800439e:	4b3e      	ldr	r3, [pc, #248]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1ee      	bne.n	8004388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d105      	bne.n	80043bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b0:	4b39      	ldr	r3, [pc, #228]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	4a38      	ldr	r2, [pc, #224]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 80043b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80a1 	beq.w	8004508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043c6:	4b34      	ldr	r3, [pc, #208]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d05c      	beq.n	800448c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d141      	bne.n	800445e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043da:	4b31      	ldr	r3, [pc, #196]	@ (80044a0 <HAL_RCC_OscConfig+0x478>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe fab0 	bl	8002944 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fe faac 	bl	8002944 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e087      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	4b27      	ldr	r3, [pc, #156]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	491b      	ldr	r1, [pc, #108]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004430:	4b1b      	ldr	r3, [pc, #108]	@ (80044a0 <HAL_RCC_OscConfig+0x478>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004436:	f7fe fa85 	bl	8002944 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443e:	f7fe fa81 	bl	8002944 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e05c      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004450:	4b11      	ldr	r3, [pc, #68]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x416>
 800445c:	e054      	b.n	8004508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445e:	4b10      	ldr	r3, [pc, #64]	@ (80044a0 <HAL_RCC_OscConfig+0x478>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004464:	f7fe fa6e 	bl	8002944 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446c:	f7fe fa6a 	bl	8002944 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e045      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <HAL_RCC_OscConfig+0x470>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f0      	bne.n	800446c <HAL_RCC_OscConfig+0x444>
 800448a:	e03d      	b.n	8004508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e038      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
 8004498:	40023800 	.word	0x40023800
 800449c:	40007000 	.word	0x40007000
 80044a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004514 <HAL_RCC_OscConfig+0x4ec>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d028      	beq.n	8004504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d121      	bne.n	8004504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d11a      	bne.n	8004504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044dc:	4293      	cmp	r3, r2
 80044de:	d111      	bne.n	8004504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	3b01      	subs	r3, #1
 80044ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d107      	bne.n	8004504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800

08004518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0cc      	b.n	80046c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800452c:	4b68      	ldr	r3, [pc, #416]	@ (80046d0 <HAL_RCC_ClockConfig+0x1b8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d90c      	bls.n	8004554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453a:	4b65      	ldr	r3, [pc, #404]	@ (80046d0 <HAL_RCC_ClockConfig+0x1b8>)
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b63      	ldr	r3, [pc, #396]	@ (80046d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d001      	beq.n	8004554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0b8      	b.n	80046c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d020      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800456c:	4b59      	ldr	r3, [pc, #356]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	4a58      	ldr	r2, [pc, #352]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004584:	4b53      	ldr	r3, [pc, #332]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a52      	ldr	r2, [pc, #328]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800458e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004590:	4b50      	ldr	r3, [pc, #320]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	494d      	ldr	r1, [pc, #308]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d044      	beq.n	8004638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d107      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d119      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e07f      	b.n	80046c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d107      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d6:	4b3f      	ldr	r3, [pc, #252]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e06f      	b.n	80046c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e6:	4b3b      	ldr	r3, [pc, #236]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e067      	b.n	80046c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045f6:	4b37      	ldr	r3, [pc, #220]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f023 0203 	bic.w	r2, r3, #3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4934      	ldr	r1, [pc, #208]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004608:	f7fe f99c 	bl	8002944 <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460e:	e00a      	b.n	8004626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004610:	f7fe f998 	bl	8002944 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e04f      	b.n	80046c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	4b2b      	ldr	r3, [pc, #172]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 020c 	and.w	r2, r3, #12
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	429a      	cmp	r2, r3
 8004636:	d1eb      	bne.n	8004610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004638:	4b25      	ldr	r3, [pc, #148]	@ (80046d0 <HAL_RCC_ClockConfig+0x1b8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d20c      	bcs.n	8004660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004646:	4b22      	ldr	r3, [pc, #136]	@ (80046d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	b2d2      	uxtb	r2, r2
 800464c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800464e:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e032      	b.n	80046c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d008      	beq.n	800467e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800466c:	4b19      	ldr	r3, [pc, #100]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4916      	ldr	r1, [pc, #88]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d009      	beq.n	800469e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468a:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	490e      	ldr	r1, [pc, #56]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	4313      	orrs	r3, r2
 800469c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800469e:	f000 f821 	bl	80046e4 <HAL_RCC_GetSysClockFreq>
 80046a2:	4602      	mov	r2, r0
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	490a      	ldr	r1, [pc, #40]	@ (80046d8 <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	5ccb      	ldrb	r3, [r1, r3]
 80046b2:	fa22 f303 	lsr.w	r3, r2, r3
 80046b6:	4a09      	ldr	r2, [pc, #36]	@ (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 80046b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ba:	4b09      	ldr	r3, [pc, #36]	@ (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fe f8fc 	bl	80028bc <HAL_InitTick>

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	40023c00 	.word	0x40023c00
 80046d4:	40023800 	.word	0x40023800
 80046d8:	0800c8f8 	.word	0x0800c8f8
 80046dc:	20000010 	.word	0x20000010
 80046e0:	20000014 	.word	0x20000014

080046e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046e8:	b094      	sub	sp, #80	@ 0x50
 80046ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80046f0:	2300      	movs	r3, #0
 80046f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046f4:	2300      	movs	r3, #0
 80046f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046fc:	4b79      	ldr	r3, [pc, #484]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 030c 	and.w	r3, r3, #12
 8004704:	2b08      	cmp	r3, #8
 8004706:	d00d      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x40>
 8004708:	2b08      	cmp	r3, #8
 800470a:	f200 80e1 	bhi.w	80048d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0x34>
 8004712:	2b04      	cmp	r3, #4
 8004714:	d003      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x3a>
 8004716:	e0db      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004718:	4b73      	ldr	r3, [pc, #460]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800471a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800471c:	e0db      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800471e:	4b73      	ldr	r3, [pc, #460]	@ (80048ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004722:	e0d8      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004724:	4b6f      	ldr	r3, [pc, #444]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800472c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800472e:	4b6d      	ldr	r3, [pc, #436]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d063      	beq.n	8004802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473a:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	2200      	movs	r2, #0
 8004742:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004744:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474c:	633b      	str	r3, [r7, #48]	@ 0x30
 800474e:	2300      	movs	r3, #0
 8004750:	637b      	str	r3, [r7, #52]	@ 0x34
 8004752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004756:	4622      	mov	r2, r4
 8004758:	462b      	mov	r3, r5
 800475a:	f04f 0000 	mov.w	r0, #0
 800475e:	f04f 0100 	mov.w	r1, #0
 8004762:	0159      	lsls	r1, r3, #5
 8004764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004768:	0150      	lsls	r0, r2, #5
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4621      	mov	r1, r4
 8004770:	1a51      	subs	r1, r2, r1
 8004772:	6139      	str	r1, [r7, #16]
 8004774:	4629      	mov	r1, r5
 8004776:	eb63 0301 	sbc.w	r3, r3, r1
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004788:	4659      	mov	r1, fp
 800478a:	018b      	lsls	r3, r1, #6
 800478c:	4651      	mov	r1, sl
 800478e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004792:	4651      	mov	r1, sl
 8004794:	018a      	lsls	r2, r1, #6
 8004796:	4651      	mov	r1, sl
 8004798:	ebb2 0801 	subs.w	r8, r2, r1
 800479c:	4659      	mov	r1, fp
 800479e:	eb63 0901 	sbc.w	r9, r3, r1
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	f04f 0300 	mov.w	r3, #0
 80047aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047b6:	4690      	mov	r8, r2
 80047b8:	4699      	mov	r9, r3
 80047ba:	4623      	mov	r3, r4
 80047bc:	eb18 0303 	adds.w	r3, r8, r3
 80047c0:	60bb      	str	r3, [r7, #8]
 80047c2:	462b      	mov	r3, r5
 80047c4:	eb49 0303 	adc.w	r3, r9, r3
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047d6:	4629      	mov	r1, r5
 80047d8:	024b      	lsls	r3, r1, #9
 80047da:	4621      	mov	r1, r4
 80047dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047e0:	4621      	mov	r1, r4
 80047e2:	024a      	lsls	r2, r1, #9
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ea:	2200      	movs	r2, #0
 80047ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047f4:	f7fc fa58 	bl	8000ca8 <__aeabi_uldivmod>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4613      	mov	r3, r2
 80047fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004800:	e058      	b.n	80048b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004802:	4b38      	ldr	r3, [pc, #224]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	099b      	lsrs	r3, r3, #6
 8004808:	2200      	movs	r2, #0
 800480a:	4618      	mov	r0, r3
 800480c:	4611      	mov	r1, r2
 800480e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004812:	623b      	str	r3, [r7, #32]
 8004814:	2300      	movs	r3, #0
 8004816:	627b      	str	r3, [r7, #36]	@ 0x24
 8004818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	f04f 0000 	mov.w	r0, #0
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	0159      	lsls	r1, r3, #5
 800482a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800482e:	0150      	lsls	r0, r2, #5
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4641      	mov	r1, r8
 8004836:	ebb2 0a01 	subs.w	sl, r2, r1
 800483a:	4649      	mov	r1, r9
 800483c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004840:	f04f 0200 	mov.w	r2, #0
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800484c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004854:	ebb2 040a 	subs.w	r4, r2, sl
 8004858:	eb63 050b 	sbc.w	r5, r3, fp
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	00eb      	lsls	r3, r5, #3
 8004866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486a:	00e2      	lsls	r2, r4, #3
 800486c:	4614      	mov	r4, r2
 800486e:	461d      	mov	r5, r3
 8004870:	4643      	mov	r3, r8
 8004872:	18e3      	adds	r3, r4, r3
 8004874:	603b      	str	r3, [r7, #0]
 8004876:	464b      	mov	r3, r9
 8004878:	eb45 0303 	adc.w	r3, r5, r3
 800487c:	607b      	str	r3, [r7, #4]
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800488a:	4629      	mov	r1, r5
 800488c:	028b      	lsls	r3, r1, #10
 800488e:	4621      	mov	r1, r4
 8004890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004894:	4621      	mov	r1, r4
 8004896:	028a      	lsls	r2, r1, #10
 8004898:	4610      	mov	r0, r2
 800489a:	4619      	mov	r1, r3
 800489c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800489e:	2200      	movs	r2, #0
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	61fa      	str	r2, [r7, #28]
 80048a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048a8:	f7fc f9fe 	bl	8000ca8 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4613      	mov	r3, r2
 80048b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	0c1b      	lsrs	r3, r3, #16
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	3301      	adds	r3, #1
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80048c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048ce:	e002      	b.n	80048d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048d0:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80048d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3750      	adds	r7, #80	@ 0x50
 80048dc:	46bd      	mov	sp, r7
 80048de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	007a1200 	.word	0x007a1200

080048f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f4:	4b03      	ldr	r3, [pc, #12]	@ (8004904 <HAL_RCC_GetHCLKFreq+0x14>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000010 	.word	0x20000010

08004908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800490c:	f7ff fff0 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	0a9b      	lsrs	r3, r3, #10
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4903      	ldr	r1, [pc, #12]	@ (800492c <HAL_RCC_GetPCLK1Freq+0x24>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40023800 	.word	0x40023800
 800492c:	0800c908 	.word	0x0800c908

08004930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004934:	f7ff ffdc 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	0b5b      	lsrs	r3, r3, #13
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	@ (8004954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40023800 	.word	0x40023800
 8004954:	0800c908 	.word	0x0800c908

08004958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e041      	b.n	80049ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fd fbac 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4619      	mov	r1, r3
 8004996:	4610      	mov	r0, r2
 8004998:	f000 f95e 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d001      	beq.n	8004a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e046      	b.n	8004a9e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	@ (8004aac <HAL_TIM_Base_Start+0xb4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2a:	d01d      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab0 <HAL_TIM_Base_Start+0xb8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d018      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab4 <HAL_TIM_Base_Start+0xbc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1c      	ldr	r2, [pc, #112]	@ (8004ab8 <HAL_TIM_Base_Start+0xc0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00e      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004abc <HAL_TIM_Base_Start+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d009      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a19      	ldr	r2, [pc, #100]	@ (8004ac0 <HAL_TIM_Base_Start+0xc8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <HAL_TIM_Base_Start+0x70>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <HAL_TIM_Base_Start+0xcc>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d111      	bne.n	8004a8c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d010      	beq.n	8004a9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 0201 	orr.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a8a:	e007      	b.n	8004a9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	40010000 	.word	0x40010000
 8004ab0:	40000400 	.word	0x40000400
 8004ab4:	40000800 	.word	0x40000800
 8004ab8:	40000c00 	.word	0x40000c00
 8004abc:	40010400 	.word	0x40010400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40001800 	.word	0x40001800

08004ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e0b4      	b.n	8004c4e <HAL_TIM_ConfigClockSource+0x186>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b1c:	d03e      	beq.n	8004b9c <HAL_TIM_ConfigClockSource+0xd4>
 8004b1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b22:	f200 8087 	bhi.w	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b2a:	f000 8086 	beq.w	8004c3a <HAL_TIM_ConfigClockSource+0x172>
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b32:	d87f      	bhi.n	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b70      	cmp	r3, #112	@ 0x70
 8004b36:	d01a      	beq.n	8004b6e <HAL_TIM_ConfigClockSource+0xa6>
 8004b38:	2b70      	cmp	r3, #112	@ 0x70
 8004b3a:	d87b      	bhi.n	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b3c:	2b60      	cmp	r3, #96	@ 0x60
 8004b3e:	d050      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b40:	2b60      	cmp	r3, #96	@ 0x60
 8004b42:	d877      	bhi.n	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b44:	2b50      	cmp	r3, #80	@ 0x50
 8004b46:	d03c      	beq.n	8004bc2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b48:	2b50      	cmp	r3, #80	@ 0x50
 8004b4a:	d873      	bhi.n	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b4c:	2b40      	cmp	r3, #64	@ 0x40
 8004b4e:	d058      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x13a>
 8004b50:	2b40      	cmp	r3, #64	@ 0x40
 8004b52:	d86f      	bhi.n	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b30      	cmp	r3, #48	@ 0x30
 8004b56:	d064      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x15a>
 8004b58:	2b30      	cmp	r3, #48	@ 0x30
 8004b5a:	d86b      	bhi.n	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d060      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x15a>
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d867      	bhi.n	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d05c      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x15a>
 8004b68:	2b10      	cmp	r3, #16
 8004b6a:	d05a      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x15a>
 8004b6c:	e062      	b.n	8004c34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6899      	ldr	r1, [r3, #8]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f000 f985 	bl	8004e8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	609a      	str	r2, [r3, #8]
      break;
 8004b9a:	e04f      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6899      	ldr	r1, [r3, #8]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f000 f96e 	bl	8004e8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bbe:	609a      	str	r2, [r3, #8]
      break;
 8004bc0:	e03c      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6859      	ldr	r1, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f000 f8e2 	bl	8004d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2150      	movs	r1, #80	@ 0x50
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 f93b 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 8004be0:	e02c      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f000 f901 	bl	8004df6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2160      	movs	r1, #96	@ 0x60
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 f92b 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 8004c00:	e01c      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f000 f8c2 	bl	8004d98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2140      	movs	r1, #64	@ 0x40
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 f91b 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 8004c20:	e00c      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	f000 f912 	bl	8004e56 <TIM_ITRx_SetConfig>
      break;
 8004c32:	e003      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	73fb      	strb	r3, [r7, #15]
      break;
 8004c38:	e000      	b.n	8004c3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a40      	ldr	r2, [pc, #256]	@ (8004d6c <TIM_Base_SetConfig+0x114>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c76:	d00f      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a3d      	ldr	r2, [pc, #244]	@ (8004d70 <TIM_Base_SetConfig+0x118>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3c      	ldr	r2, [pc, #240]	@ (8004d74 <TIM_Base_SetConfig+0x11c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d007      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8004d78 <TIM_Base_SetConfig+0x120>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3a      	ldr	r2, [pc, #232]	@ (8004d7c <TIM_Base_SetConfig+0x124>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d108      	bne.n	8004caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a2f      	ldr	r2, [pc, #188]	@ (8004d6c <TIM_Base_SetConfig+0x114>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d02b      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb8:	d027      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8004d70 <TIM_Base_SetConfig+0x118>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d023      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004d74 <TIM_Base_SetConfig+0x11c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01f      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8004d78 <TIM_Base_SetConfig+0x120>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01b      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a29      	ldr	r2, [pc, #164]	@ (8004d7c <TIM_Base_SetConfig+0x124>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d017      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a28      	ldr	r2, [pc, #160]	@ (8004d80 <TIM_Base_SetConfig+0x128>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a27      	ldr	r2, [pc, #156]	@ (8004d84 <TIM_Base_SetConfig+0x12c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00f      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a26      	ldr	r2, [pc, #152]	@ (8004d88 <TIM_Base_SetConfig+0x130>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a25      	ldr	r2, [pc, #148]	@ (8004d8c <TIM_Base_SetConfig+0x134>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a24      	ldr	r2, [pc, #144]	@ (8004d90 <TIM_Base_SetConfig+0x138>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a23      	ldr	r2, [pc, #140]	@ (8004d94 <TIM_Base_SetConfig+0x13c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a0a      	ldr	r2, [pc, #40]	@ (8004d6c <TIM_Base_SetConfig+0x114>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d003      	beq.n	8004d50 <TIM_Base_SetConfig+0xf8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d7c <TIM_Base_SetConfig+0x124>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d103      	bne.n	8004d58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	615a      	str	r2, [r3, #20]
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40010000 	.word	0x40010000
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40010400 	.word	0x40010400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800
 8004d8c:	40001800 	.word	0x40001800
 8004d90:	40001c00 	.word	0x40001c00
 8004d94:	40002000 	.word	0x40002000

08004d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f023 0201 	bic.w	r2, r3, #1
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 030a 	bic.w	r3, r3, #10
 8004dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0210 	bic.w	r2, r3, #16
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	699b      	ldr	r3, [r3, #24]
 8004e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	031b      	lsls	r3, r3, #12
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f043 0307 	orr.w	r3, r3, #7
 8004e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	609a      	str	r2, [r3, #8]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e05a      	b.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a21      	ldr	r2, [pc, #132]	@ (8004fa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d022      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f30:	d01d      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d018      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a18      	ldr	r2, [pc, #96]	@ (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a17      	ldr	r2, [pc, #92]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a15      	ldr	r2, [pc, #84]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10c      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40010400 	.word	0x40010400
 8004fbc:	40014000 	.word	0x40014000
 8004fc0:	40001800 	.word	0x40001800

08004fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e03f      	b.n	8005056 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc ffb8 	bl	8001f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	@ 0x24
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fec7 	bl	8005d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800501c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800502c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800503c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b08a      	sub	sp, #40	@ 0x28
 8005062:	af02      	add	r7, sp, #8
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b20      	cmp	r3, #32
 800507c:	d17c      	bne.n	8005178 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_UART_Transmit+0x2c>
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e075      	b.n	800517a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_UART_Transmit+0x3e>
 8005098:	2302      	movs	r3, #2
 800509a:	e06e      	b.n	800517a <HAL_UART_Transmit+0x11c>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2221      	movs	r2, #33	@ 0x21
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b2:	f7fd fc47 	bl	8002944 <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	88fa      	ldrh	r2, [r7, #6]
 80050c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050cc:	d108      	bne.n	80050e0 <HAL_UART_Transmit+0x82>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	e003      	b.n	80050e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80050f0:	e02a      	b.n	8005148 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2180      	movs	r1, #128	@ 0x80
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 fc1c 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e036      	b.n	800517a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005120:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	3302      	adds	r3, #2
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	e007      	b.n	800513a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	781a      	ldrb	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	3301      	adds	r3, #1
 8005138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1cf      	bne.n	80050f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	2140      	movs	r1, #64	@ 0x40
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fbec 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e006      	b.n	800517a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	e000      	b.n	800517a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005178:	2302      	movs	r3, #2
  }
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
	...

08005184 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	@ 0x30
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b20      	cmp	r3, #32
 800519c:	d165      	bne.n	800526a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_UART_Transmit_DMA+0x26>
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e05e      	b.n	800526c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_UART_Transmit_DMA+0x38>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e057      	b.n	800526c <HAL_UART_Transmit_DMA+0xe8>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2221      	movs	r2, #33	@ 0x21
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e8:	4a22      	ldr	r2, [pc, #136]	@ (8005274 <HAL_UART_Transmit_DMA+0xf0>)
 80051ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f0:	4a21      	ldr	r2, [pc, #132]	@ (8005278 <HAL_UART_Transmit_DMA+0xf4>)
 80051f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f8:	4a20      	ldr	r2, [pc, #128]	@ (800527c <HAL_UART_Transmit_DMA+0xf8>)
 80051fa:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005200:	2200      	movs	r2, #0
 8005202:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005204:	f107 0308 	add.w	r3, r7, #8
 8005208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	6819      	ldr	r1, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3304      	adds	r3, #4
 8005218:	461a      	mov	r2, r3
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	f7fe f99a 	bl	8003554 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005228:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3314      	adds	r3, #20
 8005238:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	617b      	str	r3, [r7, #20]
   return(result);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005252:	627a      	str	r2, [r7, #36]	@ 0x24
 8005254:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6a39      	ldr	r1, [r7, #32]
 8005258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	e000      	b.n	800526c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800526a:	2302      	movs	r3, #2
  }
}
 800526c:	4618      	mov	r0, r3
 800526e:	3730      	adds	r7, #48	@ 0x30
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	080057f1 	.word	0x080057f1
 8005278:	0800588b 	.word	0x0800588b
 800527c:	080058a7 	.word	0x080058a7

08005280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b0ba      	sub	sp, #232	@ 0xe8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10f      	bne.n	80052e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d009      	beq.n	80052e6 <HAL_UART_IRQHandler+0x66>
 80052d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fca0 	bl	8005c24 <UART_Receive_IT>
      return;
 80052e4:	e256      	b.n	8005794 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80de 	beq.w	80054ac <HAL_UART_IRQHandler+0x22c>
 80052f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005300:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80d1 	beq.w	80054ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_UART_IRQHandler+0xae>
 8005316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_UART_IRQHandler+0xd2>
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	f043 0202 	orr.w	r2, r3, #2
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <HAL_UART_IRQHandler+0xf6>
 800535e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	f043 0204 	orr.w	r2, r3, #4
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d011      	beq.n	80053a6 <HAL_UART_IRQHandler+0x126>
 8005382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800538e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d005      	beq.n	80053a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	f043 0208 	orr.w	r2, r3, #8
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 81ed 	beq.w	800578a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <HAL_UART_IRQHandler+0x14e>
 80053bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c0:	f003 0320 	and.w	r3, r3, #32
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fc2b 	bl	8005c24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d8:	2b40      	cmp	r3, #64	@ 0x40
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d103      	bne.n	80053fa <HAL_UART_IRQHandler+0x17a>
 80053f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d04f      	beq.n	800549a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fb33 	bl	8005a66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540a:	2b40      	cmp	r3, #64	@ 0x40
 800540c:	d141      	bne.n	8005492 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005424:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800542c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3314      	adds	r3, #20
 8005436:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800543a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800543e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005446:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1d9      	bne.n	800540e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545e:	2b00      	cmp	r3, #0
 8005460:	d013      	beq.n	800548a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005466:	4a7d      	ldr	r2, [pc, #500]	@ (800565c <HAL_UART_IRQHandler+0x3dc>)
 8005468:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546e:	4618      	mov	r0, r3
 8005470:	f7fe f938 	bl	80036e4 <HAL_DMA_Abort_IT>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d016      	beq.n	80054a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005484:	4610      	mov	r0, r2
 8005486:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	e00e      	b.n	80054a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f99a 	bl	80057c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005490:	e00a      	b.n	80054a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f996 	bl	80057c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	e006      	b.n	80054a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f992 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80054a6:	e170      	b.n	800578a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a8:	bf00      	nop
    return;
 80054aa:	e16e      	b.n	800578a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	f040 814a 	bne.w	800574a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8143 	beq.w	800574a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 813c 	beq.w	800574a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60bb      	str	r3, [r7, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	60bb      	str	r3, [r7, #8]
 80054e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	f040 80b4 	bne.w	8005660 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005504:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8140 	beq.w	800578e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005516:	429a      	cmp	r2, r3
 8005518:	f080 8139 	bcs.w	800578e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005522:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800552e:	f000 8088 	beq.w	8005642 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005548:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800554c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800555e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005562:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800556a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1d9      	bne.n	8005532 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	3314      	adds	r3, #20
 8005584:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800558e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3314      	adds	r3, #20
 800559e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e1      	bne.n	800557e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e3      	bne.n	80055ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	330c      	adds	r3, #12
 8005606:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005612:	f023 0310 	bic.w	r3, r3, #16
 8005616:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005624:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005626:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800562a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e3      	bne.n	8005600 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	4618      	mov	r0, r3
 800563e:	f7fd ffe1 	bl	8003604 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800564a:	b29b      	uxth	r3, r3
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	b29b      	uxth	r3, r3
 8005650:	4619      	mov	r1, r3
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f8c0 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005658:	e099      	b.n	800578e <HAL_UART_IRQHandler+0x50e>
 800565a:	bf00      	nop
 800565c:	08005b2d 	.word	0x08005b2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005668:	b29b      	uxth	r3, r3
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 808b 	beq.w	8005792 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800567c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8086 	beq.w	8005792 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800569c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80056ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e3      	bne.n	8005686 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3314      	adds	r3, #20
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	623b      	str	r3, [r7, #32]
   return(result);
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3314      	adds	r3, #20
 80056de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80056e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e3      	bne.n	80056be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	60fb      	str	r3, [r7, #12]
   return(result);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0310 	bic.w	r3, r3, #16
 800571a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005728:	61fa      	str	r2, [r7, #28]
 800572a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	69b9      	ldr	r1, [r7, #24]
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	617b      	str	r3, [r7, #20]
   return(result);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e3      	bne.n	8005704 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800573c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005740:	4619      	mov	r1, r3
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f848 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005748:	e023      	b.n	8005792 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800574e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <HAL_UART_IRQHandler+0x4ea>
 8005756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800575a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f9f6 	bl	8005b54 <UART_Transmit_IT>
    return;
 8005768:	e014      	b.n	8005794 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800576a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00e      	beq.n	8005794 <HAL_UART_IRQHandler+0x514>
 8005776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800577a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa36 	bl	8005bf4 <UART_EndTransmit_IT>
    return;
 8005788:	e004      	b.n	8005794 <HAL_UART_IRQHandler+0x514>
    return;
 800578a:	bf00      	nop
 800578c:	e002      	b.n	8005794 <HAL_UART_IRQHandler+0x514>
      return;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <HAL_UART_IRQHandler+0x514>
      return;
 8005792:	bf00      	nop
  }
}
 8005794:	37e8      	adds	r7, #232	@ 0xe8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop

0800579c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b090      	sub	sp, #64	@ 0x40
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d137      	bne.n	800587c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800580c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580e:	2200      	movs	r2, #0
 8005810:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	623b      	str	r3, [r7, #32]
   return(result);
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005828:	63bb      	str	r3, [r7, #56]	@ 0x38
 800582a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005832:	633a      	str	r2, [r7, #48]	@ 0x30
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	330c      	adds	r3, #12
 800584c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	60fb      	str	r3, [r7, #12]
   return(result);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800585c:	637b      	str	r3, [r7, #52]	@ 0x34
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	330c      	adds	r3, #12
 8005864:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005866:	61fa      	str	r2, [r7, #28]
 8005868:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	69b9      	ldr	r1, [r7, #24]
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	617b      	str	r3, [r7, #20]
   return(result);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800587a:	e002      	b.n	8005882 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800587c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800587e:	f7fc fa33 	bl	8001ce8 <HAL_UART_TxCpltCallback>
}
 8005882:	bf00      	nop
 8005884:	3740      	adds	r7, #64	@ 0x40
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005896:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff ff7f 	bl	800579c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b084      	sub	sp, #16
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c2:	2b80      	cmp	r3, #128	@ 0x80
 80058c4:	bf0c      	ite	eq
 80058c6:	2301      	moveq	r3, #1
 80058c8:	2300      	movne	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b21      	cmp	r3, #33	@ 0x21
 80058d8:	d108      	bne.n	80058ec <UART_DMAError+0x46>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80058e6:	68b8      	ldr	r0, [r7, #8]
 80058e8:	f000 f895 	bl	8005a16 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f6:	2b40      	cmp	r3, #64	@ 0x40
 80058f8:	bf0c      	ite	eq
 80058fa:	2301      	moveq	r3, #1
 80058fc:	2300      	movne	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b22      	cmp	r3, #34	@ 0x22
 800590c:	d108      	bne.n	8005920 <UART_DMAError+0x7a>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800591a:	68b8      	ldr	r0, [r7, #8]
 800591c:	f000 f8a3 	bl	8005a66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005924:	f043 0210 	orr.w	r2, r3, #16
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800592c:	68b8      	ldr	r0, [r7, #8]
 800592e:	f7ff ff49 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b090      	sub	sp, #64	@ 0x40
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594a:	e050      	b.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d04c      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005954:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0x30>
 800595a:	f7fc fff3 	bl	8002944 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005966:	429a      	cmp	r2, r3
 8005968:	d241      	bcs.n	80059ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800598a:	637a      	str	r2, [r7, #52]	@ 0x34
 800598c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	613b      	str	r3, [r7, #16]
   return(result);
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059be:	623a      	str	r2, [r7, #32]
 80059c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	69f9      	ldr	r1, [r7, #28]
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e5      	bne.n	800599e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e00f      	b.n	8005a0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4013      	ands	r3, r2
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	bf0c      	ite	eq
 80059fe:	2301      	moveq	r3, #1
 8005a00:	2300      	movne	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	461a      	mov	r2, r3
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d09f      	beq.n	800594c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3740      	adds	r7, #64	@ 0x40
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b089      	sub	sp, #36	@ 0x24
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	61ba      	str	r2, [r7, #24]
 8005a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6979      	ldr	r1, [r7, #20]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e5      	bne.n	8005a1e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8005a5a:	bf00      	nop
 8005a5c:	3724      	adds	r7, #36	@ 0x24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b095      	sub	sp, #84	@ 0x54
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e5      	bne.n	8005a6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	f023 0301 	bic.w	r3, r3, #1
 8005ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e5      	bne.n	8005aa2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d119      	bne.n	8005b12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005afe:	61ba      	str	r2, [r7, #24]
 8005b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b20:	bf00      	nop
 8005b22:	3754      	adds	r7, #84	@ 0x54
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff fe3c 	bl	80057c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b21      	cmp	r3, #33	@ 0x21
 8005b66:	d13e      	bne.n	8005be6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b70:	d114      	bne.n	8005b9c <UART_Transmit_IT+0x48>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d110      	bne.n	8005b9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	621a      	str	r2, [r3, #32]
 8005b9a:	e008      	b.n	8005bae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	1c59      	adds	r1, r3, #1
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6211      	str	r1, [r2, #32]
 8005ba6:	781a      	ldrb	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10f      	bne.n	8005be2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e000      	b.n	8005be8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7fc f867 	bl	8001ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08c      	sub	sp, #48	@ 0x30
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b22      	cmp	r3, #34	@ 0x22
 8005c36:	f040 80ab 	bne.w	8005d90 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c42:	d117      	bne.n	8005c74 <UART_Receive_IT+0x50>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d113      	bne.n	8005c74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6c:	1c9a      	adds	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c72:	e026      	b.n	8005cc2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c86:	d007      	beq.n	8005c98 <UART_Receive_IT+0x74>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <UART_Receive_IT+0x82>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e008      	b.n	8005cb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	4619      	mov	r1, r3
 8005cd0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d15a      	bne.n	8005d8c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0220 	bic.w	r2, r2, #32
 8005ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d135      	bne.n	8005d82 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 0310 	bic.w	r3, r3, #16
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3c:	623a      	str	r2, [r7, #32]
 8005d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	69f9      	ldr	r1, [r7, #28]
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e5      	bne.n	8005d1c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	2b10      	cmp	r3, #16
 8005d5c:	d10a      	bne.n	8005d74 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fd2c 	bl	80057d8 <HAL_UARTEx_RxEventCallback>
 8005d80:	e002      	b.n	8005d88 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fd14 	bl	80057b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e002      	b.n	8005d92 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3730      	adds	r7, #48	@ 0x30
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da0:	b0c0      	sub	sp, #256	@ 0x100
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	68d9      	ldr	r1, [r3, #12]
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	ea40 0301 	orr.w	r3, r0, r1
 8005dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005df4:	f021 010c 	bic.w	r1, r1, #12
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e02:	430b      	orrs	r3, r1
 8005e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e16:	6999      	ldr	r1, [r3, #24]
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	ea40 0301 	orr.w	r3, r0, r1
 8005e22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006068 <UART_SetConfig+0x2cc>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d005      	beq.n	8005e3c <UART_SetConfig+0xa0>
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b8d      	ldr	r3, [pc, #564]	@ (800606c <UART_SetConfig+0x2d0>)
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d104      	bne.n	8005e46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7fe fd78 	bl	8004930 <HAL_RCC_GetPCLK2Freq>
 8005e40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e44:	e003      	b.n	8005e4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e46:	f7fe fd5f 	bl	8004908 <HAL_RCC_GetPCLK1Freq>
 8005e4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e58:	f040 810c 	bne.w	8006074 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	1891      	adds	r1, r2, r2
 8005e74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e76:	415b      	adcs	r3, r3
 8005e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e7e:	4621      	mov	r1, r4
 8005e80:	eb12 0801 	adds.w	r8, r2, r1
 8005e84:	4629      	mov	r1, r5
 8005e86:	eb43 0901 	adc.w	r9, r3, r1
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e9e:	4690      	mov	r8, r2
 8005ea0:	4699      	mov	r9, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	eb18 0303 	adds.w	r3, r8, r3
 8005ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eac:	462b      	mov	r3, r5
 8005eae:	eb49 0303 	adc.w	r3, r9, r3
 8005eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ec2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005eca:	460b      	mov	r3, r1
 8005ecc:	18db      	adds	r3, r3, r3
 8005ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	eb42 0303 	adc.w	r3, r2, r3
 8005ed6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005edc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ee0:	f7fa fee2 	bl	8000ca8 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4b61      	ldr	r3, [pc, #388]	@ (8006070 <UART_SetConfig+0x2d4>)
 8005eea:	fba3 2302 	umull	r2, r3, r3, r2
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	011c      	lsls	r4, r3, #4
 8005ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005efc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	1891      	adds	r1, r2, r2
 8005f0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f0c:	415b      	adcs	r3, r3
 8005f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f14:	4641      	mov	r1, r8
 8005f16:	eb12 0a01 	adds.w	sl, r2, r1
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f34:	4692      	mov	sl, r2
 8005f36:	469b      	mov	fp, r3
 8005f38:	4643      	mov	r3, r8
 8005f3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f42:	464b      	mov	r3, r9
 8005f44:	eb4b 0303 	adc.w	r3, fp, r3
 8005f48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f60:	460b      	mov	r3, r1
 8005f62:	18db      	adds	r3, r3, r3
 8005f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f66:	4613      	mov	r3, r2
 8005f68:	eb42 0303 	adc.w	r3, r2, r3
 8005f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f76:	f7fa fe97 	bl	8000ca8 <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4b3b      	ldr	r3, [pc, #236]	@ (8006070 <UART_SetConfig+0x2d4>)
 8005f82:	fba3 2301 	umull	r2, r3, r3, r1
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	2264      	movs	r2, #100	@ 0x64
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	1acb      	subs	r3, r1, r3
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f96:	4b36      	ldr	r3, [pc, #216]	@ (8006070 <UART_SetConfig+0x2d4>)
 8005f98:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fa4:	441c      	add	r4, r3
 8005fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fb8:	4642      	mov	r2, r8
 8005fba:	464b      	mov	r3, r9
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fc8:	4641      	mov	r1, r8
 8005fca:	1851      	adds	r1, r2, r1
 8005fcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fce:	4649      	mov	r1, r9
 8005fd0:	414b      	adcs	r3, r1
 8005fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	00cb      	lsls	r3, r1, #3
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fea:	4651      	mov	r1, sl
 8005fec:	00ca      	lsls	r2, r1, #3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	460a      	mov	r2, r1
 8006000:	eb42 0303 	adc.w	r3, r2, r3
 8006004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006014:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800601c:	460b      	mov	r3, r1
 800601e:	18db      	adds	r3, r3, r3
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006022:	4613      	mov	r3, r2
 8006024:	eb42 0303 	adc.w	r3, r2, r3
 8006028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800602a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800602e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006032:	f7fa fe39 	bl	8000ca8 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <UART_SetConfig+0x2d4>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	@ 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	3332      	adds	r3, #50	@ 0x32
 800604e:	4a08      	ldr	r2, [pc, #32]	@ (8006070 <UART_SetConfig+0x2d4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 0207 	and.w	r2, r3, #7
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4422      	add	r2, r4
 8006062:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006064:	e106      	b.n	8006274 <UART_SetConfig+0x4d8>
 8006066:	bf00      	nop
 8006068:	40011000 	.word	0x40011000
 800606c:	40011400 	.word	0x40011400
 8006070:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006078:	2200      	movs	r2, #0
 800607a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800607e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006082:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006086:	4642      	mov	r2, r8
 8006088:	464b      	mov	r3, r9
 800608a:	1891      	adds	r1, r2, r2
 800608c:	6239      	str	r1, [r7, #32]
 800608e:	415b      	adcs	r3, r3
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
 8006092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006096:	4641      	mov	r1, r8
 8006098:	1854      	adds	r4, r2, r1
 800609a:	4649      	mov	r1, r9
 800609c:	eb43 0501 	adc.w	r5, r3, r1
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	00eb      	lsls	r3, r5, #3
 80060aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ae:	00e2      	lsls	r2, r4, #3
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	4643      	mov	r3, r8
 80060b6:	18e3      	adds	r3, r4, r3
 80060b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060bc:	464b      	mov	r3, r9
 80060be:	eb45 0303 	adc.w	r3, r5, r3
 80060c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060e2:	4629      	mov	r1, r5
 80060e4:	008b      	lsls	r3, r1, #2
 80060e6:	4621      	mov	r1, r4
 80060e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ec:	4621      	mov	r1, r4
 80060ee:	008a      	lsls	r2, r1, #2
 80060f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060f4:	f7fa fdd8 	bl	8000ca8 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4b60      	ldr	r3, [pc, #384]	@ (8006280 <UART_SetConfig+0x4e4>)
 80060fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	011c      	lsls	r4, r3, #4
 8006106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800610a:	2200      	movs	r2, #0
 800610c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006110:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006114:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006118:	4642      	mov	r2, r8
 800611a:	464b      	mov	r3, r9
 800611c:	1891      	adds	r1, r2, r2
 800611e:	61b9      	str	r1, [r7, #24]
 8006120:	415b      	adcs	r3, r3
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006128:	4641      	mov	r1, r8
 800612a:	1851      	adds	r1, r2, r1
 800612c:	6139      	str	r1, [r7, #16]
 800612e:	4649      	mov	r1, r9
 8006130:	414b      	adcs	r3, r1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006140:	4659      	mov	r1, fp
 8006142:	00cb      	lsls	r3, r1, #3
 8006144:	4651      	mov	r1, sl
 8006146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800614a:	4651      	mov	r1, sl
 800614c:	00ca      	lsls	r2, r1, #3
 800614e:	4610      	mov	r0, r2
 8006150:	4619      	mov	r1, r3
 8006152:	4603      	mov	r3, r0
 8006154:	4642      	mov	r2, r8
 8006156:	189b      	adds	r3, r3, r2
 8006158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800615c:	464b      	mov	r3, r9
 800615e:	460a      	mov	r2, r1
 8006160:	eb42 0303 	adc.w	r3, r2, r3
 8006164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006172:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006180:	4649      	mov	r1, r9
 8006182:	008b      	lsls	r3, r1, #2
 8006184:	4641      	mov	r1, r8
 8006186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800618a:	4641      	mov	r1, r8
 800618c:	008a      	lsls	r2, r1, #2
 800618e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006192:	f7fa fd89 	bl	8000ca8 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4611      	mov	r1, r2
 800619c:	4b38      	ldr	r3, [pc, #224]	@ (8006280 <UART_SetConfig+0x4e4>)
 800619e:	fba3 2301 	umull	r2, r3, r3, r1
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2264      	movs	r2, #100	@ 0x64
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	1acb      	subs	r3, r1, r3
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	3332      	adds	r3, #50	@ 0x32
 80061b0:	4a33      	ldr	r2, [pc, #204]	@ (8006280 <UART_SetConfig+0x4e4>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061bc:	441c      	add	r4, r3
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80061c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80061c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061cc:	4642      	mov	r2, r8
 80061ce:	464b      	mov	r3, r9
 80061d0:	1891      	adds	r1, r2, r2
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	415b      	adcs	r3, r3
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061dc:	4641      	mov	r1, r8
 80061de:	1851      	adds	r1, r2, r1
 80061e0:	6039      	str	r1, [r7, #0]
 80061e2:	4649      	mov	r1, r9
 80061e4:	414b      	adcs	r3, r1
 80061e6:	607b      	str	r3, [r7, #4]
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061f4:	4659      	mov	r1, fp
 80061f6:	00cb      	lsls	r3, r1, #3
 80061f8:	4651      	mov	r1, sl
 80061fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061fe:	4651      	mov	r1, sl
 8006200:	00ca      	lsls	r2, r1, #3
 8006202:	4610      	mov	r0, r2
 8006204:	4619      	mov	r1, r3
 8006206:	4603      	mov	r3, r0
 8006208:	4642      	mov	r2, r8
 800620a:	189b      	adds	r3, r3, r2
 800620c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800620e:	464b      	mov	r3, r9
 8006210:	460a      	mov	r2, r1
 8006212:	eb42 0303 	adc.w	r3, r2, r3
 8006216:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	663b      	str	r3, [r7, #96]	@ 0x60
 8006222:	667a      	str	r2, [r7, #100]	@ 0x64
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006230:	4649      	mov	r1, r9
 8006232:	008b      	lsls	r3, r1, #2
 8006234:	4641      	mov	r1, r8
 8006236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800623a:	4641      	mov	r1, r8
 800623c:	008a      	lsls	r2, r1, #2
 800623e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006242:	f7fa fd31 	bl	8000ca8 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <UART_SetConfig+0x4e4>)
 800624c:	fba3 1302 	umull	r1, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	2164      	movs	r1, #100	@ 0x64
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	3332      	adds	r3, #50	@ 0x32
 800625e:	4a08      	ldr	r2, [pc, #32]	@ (8006280 <UART_SetConfig+0x4e4>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4422      	add	r2, r4
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800627a:	46bd      	mov	sp, r7
 800627c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006280:	51eb851f 	.word	0x51eb851f

08006284 <__cvt>:
 8006284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006288:	ec57 6b10 	vmov	r6, r7, d0
 800628c:	2f00      	cmp	r7, #0
 800628e:	460c      	mov	r4, r1
 8006290:	4619      	mov	r1, r3
 8006292:	463b      	mov	r3, r7
 8006294:	bfbb      	ittet	lt
 8006296:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800629a:	461f      	movlt	r7, r3
 800629c:	2300      	movge	r3, #0
 800629e:	232d      	movlt	r3, #45	@ 0x2d
 80062a0:	700b      	strb	r3, [r1, #0]
 80062a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80062a8:	4691      	mov	r9, r2
 80062aa:	f023 0820 	bic.w	r8, r3, #32
 80062ae:	bfbc      	itt	lt
 80062b0:	4632      	movlt	r2, r6
 80062b2:	4616      	movlt	r6, r2
 80062b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062b8:	d005      	beq.n	80062c6 <__cvt+0x42>
 80062ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062be:	d100      	bne.n	80062c2 <__cvt+0x3e>
 80062c0:	3401      	adds	r4, #1
 80062c2:	2102      	movs	r1, #2
 80062c4:	e000      	b.n	80062c8 <__cvt+0x44>
 80062c6:	2103      	movs	r1, #3
 80062c8:	ab03      	add	r3, sp, #12
 80062ca:	9301      	str	r3, [sp, #4]
 80062cc:	ab02      	add	r3, sp, #8
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	ec47 6b10 	vmov	d0, r6, r7
 80062d4:	4653      	mov	r3, sl
 80062d6:	4622      	mov	r2, r4
 80062d8:	f001 f876 	bl	80073c8 <_dtoa_r>
 80062dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062e0:	4605      	mov	r5, r0
 80062e2:	d119      	bne.n	8006318 <__cvt+0x94>
 80062e4:	f019 0f01 	tst.w	r9, #1
 80062e8:	d00e      	beq.n	8006308 <__cvt+0x84>
 80062ea:	eb00 0904 	add.w	r9, r0, r4
 80062ee:	2200      	movs	r2, #0
 80062f0:	2300      	movs	r3, #0
 80062f2:	4630      	mov	r0, r6
 80062f4:	4639      	mov	r1, r7
 80062f6:	f7fa fbf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80062fa:	b108      	cbz	r0, 8006300 <__cvt+0x7c>
 80062fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006300:	2230      	movs	r2, #48	@ 0x30
 8006302:	9b03      	ldr	r3, [sp, #12]
 8006304:	454b      	cmp	r3, r9
 8006306:	d31e      	bcc.n	8006346 <__cvt+0xc2>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800630c:	1b5b      	subs	r3, r3, r5
 800630e:	4628      	mov	r0, r5
 8006310:	6013      	str	r3, [r2, #0]
 8006312:	b004      	add	sp, #16
 8006314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006318:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800631c:	eb00 0904 	add.w	r9, r0, r4
 8006320:	d1e5      	bne.n	80062ee <__cvt+0x6a>
 8006322:	7803      	ldrb	r3, [r0, #0]
 8006324:	2b30      	cmp	r3, #48	@ 0x30
 8006326:	d10a      	bne.n	800633e <__cvt+0xba>
 8006328:	2200      	movs	r2, #0
 800632a:	2300      	movs	r3, #0
 800632c:	4630      	mov	r0, r6
 800632e:	4639      	mov	r1, r7
 8006330:	f7fa fbda 	bl	8000ae8 <__aeabi_dcmpeq>
 8006334:	b918      	cbnz	r0, 800633e <__cvt+0xba>
 8006336:	f1c4 0401 	rsb	r4, r4, #1
 800633a:	f8ca 4000 	str.w	r4, [sl]
 800633e:	f8da 3000 	ldr.w	r3, [sl]
 8006342:	4499      	add	r9, r3
 8006344:	e7d3      	b.n	80062ee <__cvt+0x6a>
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	9103      	str	r1, [sp, #12]
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	e7d9      	b.n	8006302 <__cvt+0x7e>

0800634e <__exponent>:
 800634e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006350:	2900      	cmp	r1, #0
 8006352:	bfba      	itte	lt
 8006354:	4249      	neglt	r1, r1
 8006356:	232d      	movlt	r3, #45	@ 0x2d
 8006358:	232b      	movge	r3, #43	@ 0x2b
 800635a:	2909      	cmp	r1, #9
 800635c:	7002      	strb	r2, [r0, #0]
 800635e:	7043      	strb	r3, [r0, #1]
 8006360:	dd29      	ble.n	80063b6 <__exponent+0x68>
 8006362:	f10d 0307 	add.w	r3, sp, #7
 8006366:	461d      	mov	r5, r3
 8006368:	270a      	movs	r7, #10
 800636a:	461a      	mov	r2, r3
 800636c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006370:	fb07 1416 	mls	r4, r7, r6, r1
 8006374:	3430      	adds	r4, #48	@ 0x30
 8006376:	f802 4c01 	strb.w	r4, [r2, #-1]
 800637a:	460c      	mov	r4, r1
 800637c:	2c63      	cmp	r4, #99	@ 0x63
 800637e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006382:	4631      	mov	r1, r6
 8006384:	dcf1      	bgt.n	800636a <__exponent+0x1c>
 8006386:	3130      	adds	r1, #48	@ 0x30
 8006388:	1e94      	subs	r4, r2, #2
 800638a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800638e:	1c41      	adds	r1, r0, #1
 8006390:	4623      	mov	r3, r4
 8006392:	42ab      	cmp	r3, r5
 8006394:	d30a      	bcc.n	80063ac <__exponent+0x5e>
 8006396:	f10d 0309 	add.w	r3, sp, #9
 800639a:	1a9b      	subs	r3, r3, r2
 800639c:	42ac      	cmp	r4, r5
 800639e:	bf88      	it	hi
 80063a0:	2300      	movhi	r3, #0
 80063a2:	3302      	adds	r3, #2
 80063a4:	4403      	add	r3, r0
 80063a6:	1a18      	subs	r0, r3, r0
 80063a8:	b003      	add	sp, #12
 80063aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80063b4:	e7ed      	b.n	8006392 <__exponent+0x44>
 80063b6:	2330      	movs	r3, #48	@ 0x30
 80063b8:	3130      	adds	r1, #48	@ 0x30
 80063ba:	7083      	strb	r3, [r0, #2]
 80063bc:	70c1      	strb	r1, [r0, #3]
 80063be:	1d03      	adds	r3, r0, #4
 80063c0:	e7f1      	b.n	80063a6 <__exponent+0x58>
	...

080063c4 <_printf_float>:
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	b08d      	sub	sp, #52	@ 0x34
 80063ca:	460c      	mov	r4, r1
 80063cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80063d0:	4616      	mov	r6, r2
 80063d2:	461f      	mov	r7, r3
 80063d4:	4605      	mov	r5, r0
 80063d6:	f000 feef 	bl	80071b8 <_localeconv_r>
 80063da:	6803      	ldr	r3, [r0, #0]
 80063dc:	9304      	str	r3, [sp, #16]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7f9 ff56 	bl	8000290 <strlen>
 80063e4:	2300      	movs	r3, #0
 80063e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80063e8:	f8d8 3000 	ldr.w	r3, [r8]
 80063ec:	9005      	str	r0, [sp, #20]
 80063ee:	3307      	adds	r3, #7
 80063f0:	f023 0307 	bic.w	r3, r3, #7
 80063f4:	f103 0208 	add.w	r2, r3, #8
 80063f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063fc:	f8d4 b000 	ldr.w	fp, [r4]
 8006400:	f8c8 2000 	str.w	r2, [r8]
 8006404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006408:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800640c:	9307      	str	r3, [sp, #28]
 800640e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006412:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800641a:	4b9c      	ldr	r3, [pc, #624]	@ (800668c <_printf_float+0x2c8>)
 800641c:	f04f 32ff 	mov.w	r2, #4294967295
 8006420:	f7fa fb94 	bl	8000b4c <__aeabi_dcmpun>
 8006424:	bb70      	cbnz	r0, 8006484 <_printf_float+0xc0>
 8006426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800642a:	4b98      	ldr	r3, [pc, #608]	@ (800668c <_printf_float+0x2c8>)
 800642c:	f04f 32ff 	mov.w	r2, #4294967295
 8006430:	f7fa fb6e 	bl	8000b10 <__aeabi_dcmple>
 8006434:	bb30      	cbnz	r0, 8006484 <_printf_float+0xc0>
 8006436:	2200      	movs	r2, #0
 8006438:	2300      	movs	r3, #0
 800643a:	4640      	mov	r0, r8
 800643c:	4649      	mov	r1, r9
 800643e:	f7fa fb5d 	bl	8000afc <__aeabi_dcmplt>
 8006442:	b110      	cbz	r0, 800644a <_printf_float+0x86>
 8006444:	232d      	movs	r3, #45	@ 0x2d
 8006446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800644a:	4a91      	ldr	r2, [pc, #580]	@ (8006690 <_printf_float+0x2cc>)
 800644c:	4b91      	ldr	r3, [pc, #580]	@ (8006694 <_printf_float+0x2d0>)
 800644e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006452:	bf94      	ite	ls
 8006454:	4690      	movls	r8, r2
 8006456:	4698      	movhi	r8, r3
 8006458:	2303      	movs	r3, #3
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	f02b 0304 	bic.w	r3, fp, #4
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	f04f 0900 	mov.w	r9, #0
 8006466:	9700      	str	r7, [sp, #0]
 8006468:	4633      	mov	r3, r6
 800646a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800646c:	4621      	mov	r1, r4
 800646e:	4628      	mov	r0, r5
 8006470:	f000 f9d2 	bl	8006818 <_printf_common>
 8006474:	3001      	adds	r0, #1
 8006476:	f040 808d 	bne.w	8006594 <_printf_float+0x1d0>
 800647a:	f04f 30ff 	mov.w	r0, #4294967295
 800647e:	b00d      	add	sp, #52	@ 0x34
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	4642      	mov	r2, r8
 8006486:	464b      	mov	r3, r9
 8006488:	4640      	mov	r0, r8
 800648a:	4649      	mov	r1, r9
 800648c:	f7fa fb5e 	bl	8000b4c <__aeabi_dcmpun>
 8006490:	b140      	cbz	r0, 80064a4 <_printf_float+0xe0>
 8006492:	464b      	mov	r3, r9
 8006494:	2b00      	cmp	r3, #0
 8006496:	bfbc      	itt	lt
 8006498:	232d      	movlt	r3, #45	@ 0x2d
 800649a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800649e:	4a7e      	ldr	r2, [pc, #504]	@ (8006698 <_printf_float+0x2d4>)
 80064a0:	4b7e      	ldr	r3, [pc, #504]	@ (800669c <_printf_float+0x2d8>)
 80064a2:	e7d4      	b.n	800644e <_printf_float+0x8a>
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80064aa:	9206      	str	r2, [sp, #24]
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	d13b      	bne.n	8006528 <_printf_float+0x164>
 80064b0:	2306      	movs	r3, #6
 80064b2:	6063      	str	r3, [r4, #4]
 80064b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80064b8:	2300      	movs	r3, #0
 80064ba:	6022      	str	r2, [r4, #0]
 80064bc:	9303      	str	r3, [sp, #12]
 80064be:	ab0a      	add	r3, sp, #40	@ 0x28
 80064c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80064c4:	ab09      	add	r3, sp, #36	@ 0x24
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	6861      	ldr	r1, [r4, #4]
 80064ca:	ec49 8b10 	vmov	d0, r8, r9
 80064ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80064d2:	4628      	mov	r0, r5
 80064d4:	f7ff fed6 	bl	8006284 <__cvt>
 80064d8:	9b06      	ldr	r3, [sp, #24]
 80064da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064dc:	2b47      	cmp	r3, #71	@ 0x47
 80064de:	4680      	mov	r8, r0
 80064e0:	d129      	bne.n	8006536 <_printf_float+0x172>
 80064e2:	1cc8      	adds	r0, r1, #3
 80064e4:	db02      	blt.n	80064ec <_printf_float+0x128>
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	4299      	cmp	r1, r3
 80064ea:	dd41      	ble.n	8006570 <_printf_float+0x1ac>
 80064ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80064f0:	fa5f fa8a 	uxtb.w	sl, sl
 80064f4:	3901      	subs	r1, #1
 80064f6:	4652      	mov	r2, sl
 80064f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80064fe:	f7ff ff26 	bl	800634e <__exponent>
 8006502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006504:	1813      	adds	r3, r2, r0
 8006506:	2a01      	cmp	r2, #1
 8006508:	4681      	mov	r9, r0
 800650a:	6123      	str	r3, [r4, #16]
 800650c:	dc02      	bgt.n	8006514 <_printf_float+0x150>
 800650e:	6822      	ldr	r2, [r4, #0]
 8006510:	07d2      	lsls	r2, r2, #31
 8006512:	d501      	bpl.n	8006518 <_printf_float+0x154>
 8006514:	3301      	adds	r3, #1
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0a2      	beq.n	8006466 <_printf_float+0xa2>
 8006520:	232d      	movs	r3, #45	@ 0x2d
 8006522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006526:	e79e      	b.n	8006466 <_printf_float+0xa2>
 8006528:	9a06      	ldr	r2, [sp, #24]
 800652a:	2a47      	cmp	r2, #71	@ 0x47
 800652c:	d1c2      	bne.n	80064b4 <_printf_float+0xf0>
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1c0      	bne.n	80064b4 <_printf_float+0xf0>
 8006532:	2301      	movs	r3, #1
 8006534:	e7bd      	b.n	80064b2 <_printf_float+0xee>
 8006536:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800653a:	d9db      	bls.n	80064f4 <_printf_float+0x130>
 800653c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006540:	d118      	bne.n	8006574 <_printf_float+0x1b0>
 8006542:	2900      	cmp	r1, #0
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	dd0b      	ble.n	8006560 <_printf_float+0x19c>
 8006548:	6121      	str	r1, [r4, #16]
 800654a:	b913      	cbnz	r3, 8006552 <_printf_float+0x18e>
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	07d0      	lsls	r0, r2, #31
 8006550:	d502      	bpl.n	8006558 <_printf_float+0x194>
 8006552:	3301      	adds	r3, #1
 8006554:	440b      	add	r3, r1
 8006556:	6123      	str	r3, [r4, #16]
 8006558:	65a1      	str	r1, [r4, #88]	@ 0x58
 800655a:	f04f 0900 	mov.w	r9, #0
 800655e:	e7db      	b.n	8006518 <_printf_float+0x154>
 8006560:	b913      	cbnz	r3, 8006568 <_printf_float+0x1a4>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	07d2      	lsls	r2, r2, #31
 8006566:	d501      	bpl.n	800656c <_printf_float+0x1a8>
 8006568:	3302      	adds	r3, #2
 800656a:	e7f4      	b.n	8006556 <_printf_float+0x192>
 800656c:	2301      	movs	r3, #1
 800656e:	e7f2      	b.n	8006556 <_printf_float+0x192>
 8006570:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006576:	4299      	cmp	r1, r3
 8006578:	db05      	blt.n	8006586 <_printf_float+0x1c2>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	6121      	str	r1, [r4, #16]
 800657e:	07d8      	lsls	r0, r3, #31
 8006580:	d5ea      	bpl.n	8006558 <_printf_float+0x194>
 8006582:	1c4b      	adds	r3, r1, #1
 8006584:	e7e7      	b.n	8006556 <_printf_float+0x192>
 8006586:	2900      	cmp	r1, #0
 8006588:	bfd4      	ite	le
 800658a:	f1c1 0202 	rsble	r2, r1, #2
 800658e:	2201      	movgt	r2, #1
 8006590:	4413      	add	r3, r2
 8006592:	e7e0      	b.n	8006556 <_printf_float+0x192>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	055a      	lsls	r2, r3, #21
 8006598:	d407      	bmi.n	80065aa <_printf_float+0x1e6>
 800659a:	6923      	ldr	r3, [r4, #16]
 800659c:	4642      	mov	r2, r8
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b8      	blx	r7
 80065a4:	3001      	adds	r0, #1
 80065a6:	d12b      	bne.n	8006600 <_printf_float+0x23c>
 80065a8:	e767      	b.n	800647a <_printf_float+0xb6>
 80065aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065ae:	f240 80dd 	bls.w	800676c <_printf_float+0x3a8>
 80065b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065b6:	2200      	movs	r2, #0
 80065b8:	2300      	movs	r3, #0
 80065ba:	f7fa fa95 	bl	8000ae8 <__aeabi_dcmpeq>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d033      	beq.n	800662a <_printf_float+0x266>
 80065c2:	4a37      	ldr	r2, [pc, #220]	@ (80066a0 <_printf_float+0x2dc>)
 80065c4:	2301      	movs	r3, #1
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b8      	blx	r7
 80065cc:	3001      	adds	r0, #1
 80065ce:	f43f af54 	beq.w	800647a <_printf_float+0xb6>
 80065d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80065d6:	4543      	cmp	r3, r8
 80065d8:	db02      	blt.n	80065e0 <_printf_float+0x21c>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	07d8      	lsls	r0, r3, #31
 80065de:	d50f      	bpl.n	8006600 <_printf_float+0x23c>
 80065e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f43f af45 	beq.w	800647a <_printf_float+0xb6>
 80065f0:	f04f 0900 	mov.w	r9, #0
 80065f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80065f8:	f104 0a1a 	add.w	sl, r4, #26
 80065fc:	45c8      	cmp	r8, r9
 80065fe:	dc09      	bgt.n	8006614 <_printf_float+0x250>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	079b      	lsls	r3, r3, #30
 8006604:	f100 8103 	bmi.w	800680e <_printf_float+0x44a>
 8006608:	68e0      	ldr	r0, [r4, #12]
 800660a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800660c:	4298      	cmp	r0, r3
 800660e:	bfb8      	it	lt
 8006610:	4618      	movlt	r0, r3
 8006612:	e734      	b.n	800647e <_printf_float+0xba>
 8006614:	2301      	movs	r3, #1
 8006616:	4652      	mov	r2, sl
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f af2b 	beq.w	800647a <_printf_float+0xb6>
 8006624:	f109 0901 	add.w	r9, r9, #1
 8006628:	e7e8      	b.n	80065fc <_printf_float+0x238>
 800662a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	dc39      	bgt.n	80066a4 <_printf_float+0x2e0>
 8006630:	4a1b      	ldr	r2, [pc, #108]	@ (80066a0 <_printf_float+0x2dc>)
 8006632:	2301      	movs	r3, #1
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	f43f af1d 	beq.w	800647a <_printf_float+0xb6>
 8006640:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006644:	ea59 0303 	orrs.w	r3, r9, r3
 8006648:	d102      	bne.n	8006650 <_printf_float+0x28c>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	07d9      	lsls	r1, r3, #31
 800664e:	d5d7      	bpl.n	8006600 <_printf_float+0x23c>
 8006650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006654:	4631      	mov	r1, r6
 8006656:	4628      	mov	r0, r5
 8006658:	47b8      	blx	r7
 800665a:	3001      	adds	r0, #1
 800665c:	f43f af0d 	beq.w	800647a <_printf_float+0xb6>
 8006660:	f04f 0a00 	mov.w	sl, #0
 8006664:	f104 0b1a 	add.w	fp, r4, #26
 8006668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800666a:	425b      	negs	r3, r3
 800666c:	4553      	cmp	r3, sl
 800666e:	dc01      	bgt.n	8006674 <_printf_float+0x2b0>
 8006670:	464b      	mov	r3, r9
 8006672:	e793      	b.n	800659c <_printf_float+0x1d8>
 8006674:	2301      	movs	r3, #1
 8006676:	465a      	mov	r2, fp
 8006678:	4631      	mov	r1, r6
 800667a:	4628      	mov	r0, r5
 800667c:	47b8      	blx	r7
 800667e:	3001      	adds	r0, #1
 8006680:	f43f aefb 	beq.w	800647a <_printf_float+0xb6>
 8006684:	f10a 0a01 	add.w	sl, sl, #1
 8006688:	e7ee      	b.n	8006668 <_printf_float+0x2a4>
 800668a:	bf00      	nop
 800668c:	7fefffff 	.word	0x7fefffff
 8006690:	0800c918 	.word	0x0800c918
 8006694:	0800c91c 	.word	0x0800c91c
 8006698:	0800c920 	.word	0x0800c920
 800669c:	0800c924 	.word	0x0800c924
 80066a0:	0800c928 	.word	0x0800c928
 80066a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066aa:	4553      	cmp	r3, sl
 80066ac:	bfa8      	it	ge
 80066ae:	4653      	movge	r3, sl
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	4699      	mov	r9, r3
 80066b4:	dc36      	bgt.n	8006724 <_printf_float+0x360>
 80066b6:	f04f 0b00 	mov.w	fp, #0
 80066ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066be:	f104 021a 	add.w	r2, r4, #26
 80066c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066c4:	9306      	str	r3, [sp, #24]
 80066c6:	eba3 0309 	sub.w	r3, r3, r9
 80066ca:	455b      	cmp	r3, fp
 80066cc:	dc31      	bgt.n	8006732 <_printf_float+0x36e>
 80066ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d0:	459a      	cmp	sl, r3
 80066d2:	dc3a      	bgt.n	800674a <_printf_float+0x386>
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	07da      	lsls	r2, r3, #31
 80066d8:	d437      	bmi.n	800674a <_printf_float+0x386>
 80066da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066dc:	ebaa 0903 	sub.w	r9, sl, r3
 80066e0:	9b06      	ldr	r3, [sp, #24]
 80066e2:	ebaa 0303 	sub.w	r3, sl, r3
 80066e6:	4599      	cmp	r9, r3
 80066e8:	bfa8      	it	ge
 80066ea:	4699      	movge	r9, r3
 80066ec:	f1b9 0f00 	cmp.w	r9, #0
 80066f0:	dc33      	bgt.n	800675a <_printf_float+0x396>
 80066f2:	f04f 0800 	mov.w	r8, #0
 80066f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066fa:	f104 0b1a 	add.w	fp, r4, #26
 80066fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006700:	ebaa 0303 	sub.w	r3, sl, r3
 8006704:	eba3 0309 	sub.w	r3, r3, r9
 8006708:	4543      	cmp	r3, r8
 800670a:	f77f af79 	ble.w	8006600 <_printf_float+0x23c>
 800670e:	2301      	movs	r3, #1
 8006710:	465a      	mov	r2, fp
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f aeae 	beq.w	800647a <_printf_float+0xb6>
 800671e:	f108 0801 	add.w	r8, r8, #1
 8006722:	e7ec      	b.n	80066fe <_printf_float+0x33a>
 8006724:	4642      	mov	r2, r8
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	d1c2      	bne.n	80066b6 <_printf_float+0x2f2>
 8006730:	e6a3      	b.n	800647a <_printf_float+0xb6>
 8006732:	2301      	movs	r3, #1
 8006734:	4631      	mov	r1, r6
 8006736:	4628      	mov	r0, r5
 8006738:	9206      	str	r2, [sp, #24]
 800673a:	47b8      	blx	r7
 800673c:	3001      	adds	r0, #1
 800673e:	f43f ae9c 	beq.w	800647a <_printf_float+0xb6>
 8006742:	9a06      	ldr	r2, [sp, #24]
 8006744:	f10b 0b01 	add.w	fp, fp, #1
 8006748:	e7bb      	b.n	80066c2 <_printf_float+0x2fe>
 800674a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800674e:	4631      	mov	r1, r6
 8006750:	4628      	mov	r0, r5
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	d1c0      	bne.n	80066da <_printf_float+0x316>
 8006758:	e68f      	b.n	800647a <_printf_float+0xb6>
 800675a:	9a06      	ldr	r2, [sp, #24]
 800675c:	464b      	mov	r3, r9
 800675e:	4442      	add	r2, r8
 8006760:	4631      	mov	r1, r6
 8006762:	4628      	mov	r0, r5
 8006764:	47b8      	blx	r7
 8006766:	3001      	adds	r0, #1
 8006768:	d1c3      	bne.n	80066f2 <_printf_float+0x32e>
 800676a:	e686      	b.n	800647a <_printf_float+0xb6>
 800676c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006770:	f1ba 0f01 	cmp.w	sl, #1
 8006774:	dc01      	bgt.n	800677a <_printf_float+0x3b6>
 8006776:	07db      	lsls	r3, r3, #31
 8006778:	d536      	bpl.n	80067e8 <_printf_float+0x424>
 800677a:	2301      	movs	r3, #1
 800677c:	4642      	mov	r2, r8
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	f43f ae78 	beq.w	800647a <_printf_float+0xb6>
 800678a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800678e:	4631      	mov	r1, r6
 8006790:	4628      	mov	r0, r5
 8006792:	47b8      	blx	r7
 8006794:	3001      	adds	r0, #1
 8006796:	f43f ae70 	beq.w	800647a <_printf_float+0xb6>
 800679a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800679e:	2200      	movs	r2, #0
 80067a0:	2300      	movs	r3, #0
 80067a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067a6:	f7fa f99f 	bl	8000ae8 <__aeabi_dcmpeq>
 80067aa:	b9c0      	cbnz	r0, 80067de <_printf_float+0x41a>
 80067ac:	4653      	mov	r3, sl
 80067ae:	f108 0201 	add.w	r2, r8, #1
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b8      	blx	r7
 80067b8:	3001      	adds	r0, #1
 80067ba:	d10c      	bne.n	80067d6 <_printf_float+0x412>
 80067bc:	e65d      	b.n	800647a <_printf_float+0xb6>
 80067be:	2301      	movs	r3, #1
 80067c0:	465a      	mov	r2, fp
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f ae56 	beq.w	800647a <_printf_float+0xb6>
 80067ce:	f108 0801 	add.w	r8, r8, #1
 80067d2:	45d0      	cmp	r8, sl
 80067d4:	dbf3      	blt.n	80067be <_printf_float+0x3fa>
 80067d6:	464b      	mov	r3, r9
 80067d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80067dc:	e6df      	b.n	800659e <_printf_float+0x1da>
 80067de:	f04f 0800 	mov.w	r8, #0
 80067e2:	f104 0b1a 	add.w	fp, r4, #26
 80067e6:	e7f4      	b.n	80067d2 <_printf_float+0x40e>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4642      	mov	r2, r8
 80067ec:	e7e1      	b.n	80067b2 <_printf_float+0x3ee>
 80067ee:	2301      	movs	r3, #1
 80067f0:	464a      	mov	r2, r9
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f ae3e 	beq.w	800647a <_printf_float+0xb6>
 80067fe:	f108 0801 	add.w	r8, r8, #1
 8006802:	68e3      	ldr	r3, [r4, #12]
 8006804:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006806:	1a5b      	subs	r3, r3, r1
 8006808:	4543      	cmp	r3, r8
 800680a:	dcf0      	bgt.n	80067ee <_printf_float+0x42a>
 800680c:	e6fc      	b.n	8006608 <_printf_float+0x244>
 800680e:	f04f 0800 	mov.w	r8, #0
 8006812:	f104 0919 	add.w	r9, r4, #25
 8006816:	e7f4      	b.n	8006802 <_printf_float+0x43e>

08006818 <_printf_common>:
 8006818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	4616      	mov	r6, r2
 800681e:	4698      	mov	r8, r3
 8006820:	688a      	ldr	r2, [r1, #8]
 8006822:	690b      	ldr	r3, [r1, #16]
 8006824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006828:	4293      	cmp	r3, r2
 800682a:	bfb8      	it	lt
 800682c:	4613      	movlt	r3, r2
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006834:	4607      	mov	r7, r0
 8006836:	460c      	mov	r4, r1
 8006838:	b10a      	cbz	r2, 800683e <_printf_common+0x26>
 800683a:	3301      	adds	r3, #1
 800683c:	6033      	str	r3, [r6, #0]
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	0699      	lsls	r1, r3, #26
 8006842:	bf42      	ittt	mi
 8006844:	6833      	ldrmi	r3, [r6, #0]
 8006846:	3302      	addmi	r3, #2
 8006848:	6033      	strmi	r3, [r6, #0]
 800684a:	6825      	ldr	r5, [r4, #0]
 800684c:	f015 0506 	ands.w	r5, r5, #6
 8006850:	d106      	bne.n	8006860 <_printf_common+0x48>
 8006852:	f104 0a19 	add.w	sl, r4, #25
 8006856:	68e3      	ldr	r3, [r4, #12]
 8006858:	6832      	ldr	r2, [r6, #0]
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	42ab      	cmp	r3, r5
 800685e:	dc26      	bgt.n	80068ae <_printf_common+0x96>
 8006860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006864:	6822      	ldr	r2, [r4, #0]
 8006866:	3b00      	subs	r3, #0
 8006868:	bf18      	it	ne
 800686a:	2301      	movne	r3, #1
 800686c:	0692      	lsls	r2, r2, #26
 800686e:	d42b      	bmi.n	80068c8 <_printf_common+0xb0>
 8006870:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006874:	4641      	mov	r1, r8
 8006876:	4638      	mov	r0, r7
 8006878:	47c8      	blx	r9
 800687a:	3001      	adds	r0, #1
 800687c:	d01e      	beq.n	80068bc <_printf_common+0xa4>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	6922      	ldr	r2, [r4, #16]
 8006882:	f003 0306 	and.w	r3, r3, #6
 8006886:	2b04      	cmp	r3, #4
 8006888:	bf02      	ittt	eq
 800688a:	68e5      	ldreq	r5, [r4, #12]
 800688c:	6833      	ldreq	r3, [r6, #0]
 800688e:	1aed      	subeq	r5, r5, r3
 8006890:	68a3      	ldr	r3, [r4, #8]
 8006892:	bf0c      	ite	eq
 8006894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006898:	2500      	movne	r5, #0
 800689a:	4293      	cmp	r3, r2
 800689c:	bfc4      	itt	gt
 800689e:	1a9b      	subgt	r3, r3, r2
 80068a0:	18ed      	addgt	r5, r5, r3
 80068a2:	2600      	movs	r6, #0
 80068a4:	341a      	adds	r4, #26
 80068a6:	42b5      	cmp	r5, r6
 80068a8:	d11a      	bne.n	80068e0 <_printf_common+0xc8>
 80068aa:	2000      	movs	r0, #0
 80068ac:	e008      	b.n	80068c0 <_printf_common+0xa8>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4652      	mov	r2, sl
 80068b2:	4641      	mov	r1, r8
 80068b4:	4638      	mov	r0, r7
 80068b6:	47c8      	blx	r9
 80068b8:	3001      	adds	r0, #1
 80068ba:	d103      	bne.n	80068c4 <_printf_common+0xac>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c4:	3501      	adds	r5, #1
 80068c6:	e7c6      	b.n	8006856 <_printf_common+0x3e>
 80068c8:	18e1      	adds	r1, r4, r3
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	2030      	movs	r0, #48	@ 0x30
 80068ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068d2:	4422      	add	r2, r4
 80068d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068dc:	3302      	adds	r3, #2
 80068de:	e7c7      	b.n	8006870 <_printf_common+0x58>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4622      	mov	r2, r4
 80068e4:	4641      	mov	r1, r8
 80068e6:	4638      	mov	r0, r7
 80068e8:	47c8      	blx	r9
 80068ea:	3001      	adds	r0, #1
 80068ec:	d0e6      	beq.n	80068bc <_printf_common+0xa4>
 80068ee:	3601      	adds	r6, #1
 80068f0:	e7d9      	b.n	80068a6 <_printf_common+0x8e>
	...

080068f4 <_printf_i>:
 80068f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	7e0f      	ldrb	r7, [r1, #24]
 80068fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068fc:	2f78      	cmp	r7, #120	@ 0x78
 80068fe:	4691      	mov	r9, r2
 8006900:	4680      	mov	r8, r0
 8006902:	460c      	mov	r4, r1
 8006904:	469a      	mov	sl, r3
 8006906:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800690a:	d807      	bhi.n	800691c <_printf_i+0x28>
 800690c:	2f62      	cmp	r7, #98	@ 0x62
 800690e:	d80a      	bhi.n	8006926 <_printf_i+0x32>
 8006910:	2f00      	cmp	r7, #0
 8006912:	f000 80d2 	beq.w	8006aba <_printf_i+0x1c6>
 8006916:	2f58      	cmp	r7, #88	@ 0x58
 8006918:	f000 80b9 	beq.w	8006a8e <_printf_i+0x19a>
 800691c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006920:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006924:	e03a      	b.n	800699c <_printf_i+0xa8>
 8006926:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800692a:	2b15      	cmp	r3, #21
 800692c:	d8f6      	bhi.n	800691c <_printf_i+0x28>
 800692e:	a101      	add	r1, pc, #4	@ (adr r1, 8006934 <_printf_i+0x40>)
 8006930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006934:	0800698d 	.word	0x0800698d
 8006938:	080069a1 	.word	0x080069a1
 800693c:	0800691d 	.word	0x0800691d
 8006940:	0800691d 	.word	0x0800691d
 8006944:	0800691d 	.word	0x0800691d
 8006948:	0800691d 	.word	0x0800691d
 800694c:	080069a1 	.word	0x080069a1
 8006950:	0800691d 	.word	0x0800691d
 8006954:	0800691d 	.word	0x0800691d
 8006958:	0800691d 	.word	0x0800691d
 800695c:	0800691d 	.word	0x0800691d
 8006960:	08006aa1 	.word	0x08006aa1
 8006964:	080069cb 	.word	0x080069cb
 8006968:	08006a5b 	.word	0x08006a5b
 800696c:	0800691d 	.word	0x0800691d
 8006970:	0800691d 	.word	0x0800691d
 8006974:	08006ac3 	.word	0x08006ac3
 8006978:	0800691d 	.word	0x0800691d
 800697c:	080069cb 	.word	0x080069cb
 8006980:	0800691d 	.word	0x0800691d
 8006984:	0800691d 	.word	0x0800691d
 8006988:	08006a63 	.word	0x08006a63
 800698c:	6833      	ldr	r3, [r6, #0]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6032      	str	r2, [r6, #0]
 8006994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006998:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800699c:	2301      	movs	r3, #1
 800699e:	e09d      	b.n	8006adc <_printf_i+0x1e8>
 80069a0:	6833      	ldr	r3, [r6, #0]
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	1d19      	adds	r1, r3, #4
 80069a6:	6031      	str	r1, [r6, #0]
 80069a8:	0606      	lsls	r6, r0, #24
 80069aa:	d501      	bpl.n	80069b0 <_printf_i+0xbc>
 80069ac:	681d      	ldr	r5, [r3, #0]
 80069ae:	e003      	b.n	80069b8 <_printf_i+0xc4>
 80069b0:	0645      	lsls	r5, r0, #25
 80069b2:	d5fb      	bpl.n	80069ac <_printf_i+0xb8>
 80069b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069b8:	2d00      	cmp	r5, #0
 80069ba:	da03      	bge.n	80069c4 <_printf_i+0xd0>
 80069bc:	232d      	movs	r3, #45	@ 0x2d
 80069be:	426d      	negs	r5, r5
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069c4:	4859      	ldr	r0, [pc, #356]	@ (8006b2c <_printf_i+0x238>)
 80069c6:	230a      	movs	r3, #10
 80069c8:	e011      	b.n	80069ee <_printf_i+0xfa>
 80069ca:	6821      	ldr	r1, [r4, #0]
 80069cc:	6833      	ldr	r3, [r6, #0]
 80069ce:	0608      	lsls	r0, r1, #24
 80069d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80069d4:	d402      	bmi.n	80069dc <_printf_i+0xe8>
 80069d6:	0649      	lsls	r1, r1, #25
 80069d8:	bf48      	it	mi
 80069da:	b2ad      	uxthmi	r5, r5
 80069dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80069de:	4853      	ldr	r0, [pc, #332]	@ (8006b2c <_printf_i+0x238>)
 80069e0:	6033      	str	r3, [r6, #0]
 80069e2:	bf14      	ite	ne
 80069e4:	230a      	movne	r3, #10
 80069e6:	2308      	moveq	r3, #8
 80069e8:	2100      	movs	r1, #0
 80069ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069ee:	6866      	ldr	r6, [r4, #4]
 80069f0:	60a6      	str	r6, [r4, #8]
 80069f2:	2e00      	cmp	r6, #0
 80069f4:	bfa2      	ittt	ge
 80069f6:	6821      	ldrge	r1, [r4, #0]
 80069f8:	f021 0104 	bicge.w	r1, r1, #4
 80069fc:	6021      	strge	r1, [r4, #0]
 80069fe:	b90d      	cbnz	r5, 8006a04 <_printf_i+0x110>
 8006a00:	2e00      	cmp	r6, #0
 8006a02:	d04b      	beq.n	8006a9c <_printf_i+0x1a8>
 8006a04:	4616      	mov	r6, r2
 8006a06:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a0a:	fb03 5711 	mls	r7, r3, r1, r5
 8006a0e:	5dc7      	ldrb	r7, [r0, r7]
 8006a10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a14:	462f      	mov	r7, r5
 8006a16:	42bb      	cmp	r3, r7
 8006a18:	460d      	mov	r5, r1
 8006a1a:	d9f4      	bls.n	8006a06 <_printf_i+0x112>
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d10b      	bne.n	8006a38 <_printf_i+0x144>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	07df      	lsls	r7, r3, #31
 8006a24:	d508      	bpl.n	8006a38 <_printf_i+0x144>
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	6861      	ldr	r1, [r4, #4]
 8006a2a:	4299      	cmp	r1, r3
 8006a2c:	bfde      	ittt	le
 8006a2e:	2330      	movle	r3, #48	@ 0x30
 8006a30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a38:	1b92      	subs	r2, r2, r6
 8006a3a:	6122      	str	r2, [r4, #16]
 8006a3c:	f8cd a000 	str.w	sl, [sp]
 8006a40:	464b      	mov	r3, r9
 8006a42:	aa03      	add	r2, sp, #12
 8006a44:	4621      	mov	r1, r4
 8006a46:	4640      	mov	r0, r8
 8006a48:	f7ff fee6 	bl	8006818 <_printf_common>
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d14a      	bne.n	8006ae6 <_printf_i+0x1f2>
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	b004      	add	sp, #16
 8006a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	f043 0320 	orr.w	r3, r3, #32
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	4833      	ldr	r0, [pc, #204]	@ (8006b30 <_printf_i+0x23c>)
 8006a64:	2778      	movs	r7, #120	@ 0x78
 8006a66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	6831      	ldr	r1, [r6, #0]
 8006a6e:	061f      	lsls	r7, r3, #24
 8006a70:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a74:	d402      	bmi.n	8006a7c <_printf_i+0x188>
 8006a76:	065f      	lsls	r7, r3, #25
 8006a78:	bf48      	it	mi
 8006a7a:	b2ad      	uxthmi	r5, r5
 8006a7c:	6031      	str	r1, [r6, #0]
 8006a7e:	07d9      	lsls	r1, r3, #31
 8006a80:	bf44      	itt	mi
 8006a82:	f043 0320 	orrmi.w	r3, r3, #32
 8006a86:	6023      	strmi	r3, [r4, #0]
 8006a88:	b11d      	cbz	r5, 8006a92 <_printf_i+0x19e>
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	e7ac      	b.n	80069e8 <_printf_i+0xf4>
 8006a8e:	4827      	ldr	r0, [pc, #156]	@ (8006b2c <_printf_i+0x238>)
 8006a90:	e7e9      	b.n	8006a66 <_printf_i+0x172>
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	f023 0320 	bic.w	r3, r3, #32
 8006a98:	6023      	str	r3, [r4, #0]
 8006a9a:	e7f6      	b.n	8006a8a <_printf_i+0x196>
 8006a9c:	4616      	mov	r6, r2
 8006a9e:	e7bd      	b.n	8006a1c <_printf_i+0x128>
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	6825      	ldr	r5, [r4, #0]
 8006aa4:	6961      	ldr	r1, [r4, #20]
 8006aa6:	1d18      	adds	r0, r3, #4
 8006aa8:	6030      	str	r0, [r6, #0]
 8006aaa:	062e      	lsls	r6, r5, #24
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	d501      	bpl.n	8006ab4 <_printf_i+0x1c0>
 8006ab0:	6019      	str	r1, [r3, #0]
 8006ab2:	e002      	b.n	8006aba <_printf_i+0x1c6>
 8006ab4:	0668      	lsls	r0, r5, #25
 8006ab6:	d5fb      	bpl.n	8006ab0 <_printf_i+0x1bc>
 8006ab8:	8019      	strh	r1, [r3, #0]
 8006aba:	2300      	movs	r3, #0
 8006abc:	6123      	str	r3, [r4, #16]
 8006abe:	4616      	mov	r6, r2
 8006ac0:	e7bc      	b.n	8006a3c <_printf_i+0x148>
 8006ac2:	6833      	ldr	r3, [r6, #0]
 8006ac4:	1d1a      	adds	r2, r3, #4
 8006ac6:	6032      	str	r2, [r6, #0]
 8006ac8:	681e      	ldr	r6, [r3, #0]
 8006aca:	6862      	ldr	r2, [r4, #4]
 8006acc:	2100      	movs	r1, #0
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f7f9 fb8e 	bl	80001f0 <memchr>
 8006ad4:	b108      	cbz	r0, 8006ada <_printf_i+0x1e6>
 8006ad6:	1b80      	subs	r0, r0, r6
 8006ad8:	6060      	str	r0, [r4, #4]
 8006ada:	6863      	ldr	r3, [r4, #4]
 8006adc:	6123      	str	r3, [r4, #16]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae4:	e7aa      	b.n	8006a3c <_printf_i+0x148>
 8006ae6:	6923      	ldr	r3, [r4, #16]
 8006ae8:	4632      	mov	r2, r6
 8006aea:	4649      	mov	r1, r9
 8006aec:	4640      	mov	r0, r8
 8006aee:	47d0      	blx	sl
 8006af0:	3001      	adds	r0, #1
 8006af2:	d0ad      	beq.n	8006a50 <_printf_i+0x15c>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	079b      	lsls	r3, r3, #30
 8006af8:	d413      	bmi.n	8006b22 <_printf_i+0x22e>
 8006afa:	68e0      	ldr	r0, [r4, #12]
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	4298      	cmp	r0, r3
 8006b00:	bfb8      	it	lt
 8006b02:	4618      	movlt	r0, r3
 8006b04:	e7a6      	b.n	8006a54 <_printf_i+0x160>
 8006b06:	2301      	movs	r3, #1
 8006b08:	4632      	mov	r2, r6
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	47d0      	blx	sl
 8006b10:	3001      	adds	r0, #1
 8006b12:	d09d      	beq.n	8006a50 <_printf_i+0x15c>
 8006b14:	3501      	adds	r5, #1
 8006b16:	68e3      	ldr	r3, [r4, #12]
 8006b18:	9903      	ldr	r1, [sp, #12]
 8006b1a:	1a5b      	subs	r3, r3, r1
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dcf2      	bgt.n	8006b06 <_printf_i+0x212>
 8006b20:	e7eb      	b.n	8006afa <_printf_i+0x206>
 8006b22:	2500      	movs	r5, #0
 8006b24:	f104 0619 	add.w	r6, r4, #25
 8006b28:	e7f5      	b.n	8006b16 <_printf_i+0x222>
 8006b2a:	bf00      	nop
 8006b2c:	0800c92a 	.word	0x0800c92a
 8006b30:	0800c93b 	.word	0x0800c93b

08006b34 <_scanf_float>:
 8006b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b38:	b087      	sub	sp, #28
 8006b3a:	4617      	mov	r7, r2
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	688b      	ldr	r3, [r1, #8]
 8006b40:	1e5a      	subs	r2, r3, #1
 8006b42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006b46:	bf81      	itttt	hi
 8006b48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006b4c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006b50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006b54:	608b      	strhi	r3, [r1, #8]
 8006b56:	680b      	ldr	r3, [r1, #0]
 8006b58:	460a      	mov	r2, r1
 8006b5a:	f04f 0500 	mov.w	r5, #0
 8006b5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006b62:	f842 3b1c 	str.w	r3, [r2], #28
 8006b66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	bf98      	it	ls
 8006b70:	f04f 0b00 	movls.w	fp, #0
 8006b74:	9201      	str	r2, [sp, #4]
 8006b76:	4616      	mov	r6, r2
 8006b78:	46aa      	mov	sl, r5
 8006b7a:	46a9      	mov	r9, r5
 8006b7c:	9502      	str	r5, [sp, #8]
 8006b7e:	68a2      	ldr	r2, [r4, #8]
 8006b80:	b152      	cbz	r2, 8006b98 <_scanf_float+0x64>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b4e      	cmp	r3, #78	@ 0x4e
 8006b88:	d864      	bhi.n	8006c54 <_scanf_float+0x120>
 8006b8a:	2b40      	cmp	r3, #64	@ 0x40
 8006b8c:	d83c      	bhi.n	8006c08 <_scanf_float+0xd4>
 8006b8e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006b92:	b2c8      	uxtb	r0, r1
 8006b94:	280e      	cmp	r0, #14
 8006b96:	d93a      	bls.n	8006c0e <_scanf_float+0xda>
 8006b98:	f1b9 0f00 	cmp.w	r9, #0
 8006b9c:	d003      	beq.n	8006ba6 <_scanf_float+0x72>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006baa:	f1ba 0f01 	cmp.w	sl, #1
 8006bae:	f200 8117 	bhi.w	8006de0 <_scanf_float+0x2ac>
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	429e      	cmp	r6, r3
 8006bb6:	f200 8108 	bhi.w	8006dca <_scanf_float+0x296>
 8006bba:	2001      	movs	r0, #1
 8006bbc:	b007      	add	sp, #28
 8006bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006bc6:	2a0d      	cmp	r2, #13
 8006bc8:	d8e6      	bhi.n	8006b98 <_scanf_float+0x64>
 8006bca:	a101      	add	r1, pc, #4	@ (adr r1, 8006bd0 <_scanf_float+0x9c>)
 8006bcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006bd0:	08006d17 	.word	0x08006d17
 8006bd4:	08006b99 	.word	0x08006b99
 8006bd8:	08006b99 	.word	0x08006b99
 8006bdc:	08006b99 	.word	0x08006b99
 8006be0:	08006d77 	.word	0x08006d77
 8006be4:	08006d4f 	.word	0x08006d4f
 8006be8:	08006b99 	.word	0x08006b99
 8006bec:	08006b99 	.word	0x08006b99
 8006bf0:	08006d25 	.word	0x08006d25
 8006bf4:	08006b99 	.word	0x08006b99
 8006bf8:	08006b99 	.word	0x08006b99
 8006bfc:	08006b99 	.word	0x08006b99
 8006c00:	08006b99 	.word	0x08006b99
 8006c04:	08006cdd 	.word	0x08006cdd
 8006c08:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006c0c:	e7db      	b.n	8006bc6 <_scanf_float+0x92>
 8006c0e:	290e      	cmp	r1, #14
 8006c10:	d8c2      	bhi.n	8006b98 <_scanf_float+0x64>
 8006c12:	a001      	add	r0, pc, #4	@ (adr r0, 8006c18 <_scanf_float+0xe4>)
 8006c14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c18:	08006ccd 	.word	0x08006ccd
 8006c1c:	08006b99 	.word	0x08006b99
 8006c20:	08006ccd 	.word	0x08006ccd
 8006c24:	08006d63 	.word	0x08006d63
 8006c28:	08006b99 	.word	0x08006b99
 8006c2c:	08006c75 	.word	0x08006c75
 8006c30:	08006cb3 	.word	0x08006cb3
 8006c34:	08006cb3 	.word	0x08006cb3
 8006c38:	08006cb3 	.word	0x08006cb3
 8006c3c:	08006cb3 	.word	0x08006cb3
 8006c40:	08006cb3 	.word	0x08006cb3
 8006c44:	08006cb3 	.word	0x08006cb3
 8006c48:	08006cb3 	.word	0x08006cb3
 8006c4c:	08006cb3 	.word	0x08006cb3
 8006c50:	08006cb3 	.word	0x08006cb3
 8006c54:	2b6e      	cmp	r3, #110	@ 0x6e
 8006c56:	d809      	bhi.n	8006c6c <_scanf_float+0x138>
 8006c58:	2b60      	cmp	r3, #96	@ 0x60
 8006c5a:	d8b2      	bhi.n	8006bc2 <_scanf_float+0x8e>
 8006c5c:	2b54      	cmp	r3, #84	@ 0x54
 8006c5e:	d07b      	beq.n	8006d58 <_scanf_float+0x224>
 8006c60:	2b59      	cmp	r3, #89	@ 0x59
 8006c62:	d199      	bne.n	8006b98 <_scanf_float+0x64>
 8006c64:	2d07      	cmp	r5, #7
 8006c66:	d197      	bne.n	8006b98 <_scanf_float+0x64>
 8006c68:	2508      	movs	r5, #8
 8006c6a:	e02c      	b.n	8006cc6 <_scanf_float+0x192>
 8006c6c:	2b74      	cmp	r3, #116	@ 0x74
 8006c6e:	d073      	beq.n	8006d58 <_scanf_float+0x224>
 8006c70:	2b79      	cmp	r3, #121	@ 0x79
 8006c72:	e7f6      	b.n	8006c62 <_scanf_float+0x12e>
 8006c74:	6821      	ldr	r1, [r4, #0]
 8006c76:	05c8      	lsls	r0, r1, #23
 8006c78:	d51b      	bpl.n	8006cb2 <_scanf_float+0x17e>
 8006c7a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006c7e:	6021      	str	r1, [r4, #0]
 8006c80:	f109 0901 	add.w	r9, r9, #1
 8006c84:	f1bb 0f00 	cmp.w	fp, #0
 8006c88:	d003      	beq.n	8006c92 <_scanf_float+0x15e>
 8006c8a:	3201      	adds	r2, #1
 8006c8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c90:	60a2      	str	r2, [r4, #8]
 8006c92:	68a3      	ldr	r3, [r4, #8]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	60a3      	str	r3, [r4, #8]
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	607b      	str	r3, [r7, #4]
 8006ca6:	f340 8087 	ble.w	8006db8 <_scanf_float+0x284>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	603b      	str	r3, [r7, #0]
 8006cb0:	e765      	b.n	8006b7e <_scanf_float+0x4a>
 8006cb2:	eb1a 0105 	adds.w	r1, sl, r5
 8006cb6:	f47f af6f 	bne.w	8006b98 <_scanf_float+0x64>
 8006cba:	6822      	ldr	r2, [r4, #0]
 8006cbc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006cc0:	6022      	str	r2, [r4, #0]
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	468a      	mov	sl, r1
 8006cc6:	f806 3b01 	strb.w	r3, [r6], #1
 8006cca:	e7e2      	b.n	8006c92 <_scanf_float+0x15e>
 8006ccc:	6822      	ldr	r2, [r4, #0]
 8006cce:	0610      	lsls	r0, r2, #24
 8006cd0:	f57f af62 	bpl.w	8006b98 <_scanf_float+0x64>
 8006cd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006cd8:	6022      	str	r2, [r4, #0]
 8006cda:	e7f4      	b.n	8006cc6 <_scanf_float+0x192>
 8006cdc:	f1ba 0f00 	cmp.w	sl, #0
 8006ce0:	d10e      	bne.n	8006d00 <_scanf_float+0x1cc>
 8006ce2:	f1b9 0f00 	cmp.w	r9, #0
 8006ce6:	d10e      	bne.n	8006d06 <_scanf_float+0x1d2>
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006cee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006cf2:	d108      	bne.n	8006d06 <_scanf_float+0x1d2>
 8006cf4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006cf8:	6022      	str	r2, [r4, #0]
 8006cfa:	f04f 0a01 	mov.w	sl, #1
 8006cfe:	e7e2      	b.n	8006cc6 <_scanf_float+0x192>
 8006d00:	f1ba 0f02 	cmp.w	sl, #2
 8006d04:	d055      	beq.n	8006db2 <_scanf_float+0x27e>
 8006d06:	2d01      	cmp	r5, #1
 8006d08:	d002      	beq.n	8006d10 <_scanf_float+0x1dc>
 8006d0a:	2d04      	cmp	r5, #4
 8006d0c:	f47f af44 	bne.w	8006b98 <_scanf_float+0x64>
 8006d10:	3501      	adds	r5, #1
 8006d12:	b2ed      	uxtb	r5, r5
 8006d14:	e7d7      	b.n	8006cc6 <_scanf_float+0x192>
 8006d16:	f1ba 0f01 	cmp.w	sl, #1
 8006d1a:	f47f af3d 	bne.w	8006b98 <_scanf_float+0x64>
 8006d1e:	f04f 0a02 	mov.w	sl, #2
 8006d22:	e7d0      	b.n	8006cc6 <_scanf_float+0x192>
 8006d24:	b97d      	cbnz	r5, 8006d46 <_scanf_float+0x212>
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	f47f af38 	bne.w	8006b9e <_scanf_float+0x6a>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d38:	f040 8108 	bne.w	8006f4c <_scanf_float+0x418>
 8006d3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d40:	6022      	str	r2, [r4, #0]
 8006d42:	2501      	movs	r5, #1
 8006d44:	e7bf      	b.n	8006cc6 <_scanf_float+0x192>
 8006d46:	2d03      	cmp	r5, #3
 8006d48:	d0e2      	beq.n	8006d10 <_scanf_float+0x1dc>
 8006d4a:	2d05      	cmp	r5, #5
 8006d4c:	e7de      	b.n	8006d0c <_scanf_float+0x1d8>
 8006d4e:	2d02      	cmp	r5, #2
 8006d50:	f47f af22 	bne.w	8006b98 <_scanf_float+0x64>
 8006d54:	2503      	movs	r5, #3
 8006d56:	e7b6      	b.n	8006cc6 <_scanf_float+0x192>
 8006d58:	2d06      	cmp	r5, #6
 8006d5a:	f47f af1d 	bne.w	8006b98 <_scanf_float+0x64>
 8006d5e:	2507      	movs	r5, #7
 8006d60:	e7b1      	b.n	8006cc6 <_scanf_float+0x192>
 8006d62:	6822      	ldr	r2, [r4, #0]
 8006d64:	0591      	lsls	r1, r2, #22
 8006d66:	f57f af17 	bpl.w	8006b98 <_scanf_float+0x64>
 8006d6a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006d6e:	6022      	str	r2, [r4, #0]
 8006d70:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d74:	e7a7      	b.n	8006cc6 <_scanf_float+0x192>
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006d7c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006d80:	d006      	beq.n	8006d90 <_scanf_float+0x25c>
 8006d82:	0550      	lsls	r0, r2, #21
 8006d84:	f57f af08 	bpl.w	8006b98 <_scanf_float+0x64>
 8006d88:	f1b9 0f00 	cmp.w	r9, #0
 8006d8c:	f000 80de 	beq.w	8006f4c <_scanf_float+0x418>
 8006d90:	0591      	lsls	r1, r2, #22
 8006d92:	bf58      	it	pl
 8006d94:	9902      	ldrpl	r1, [sp, #8]
 8006d96:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d9a:	bf58      	it	pl
 8006d9c:	eba9 0101 	subpl.w	r1, r9, r1
 8006da0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006da4:	bf58      	it	pl
 8006da6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	f04f 0900 	mov.w	r9, #0
 8006db0:	e789      	b.n	8006cc6 <_scanf_float+0x192>
 8006db2:	f04f 0a03 	mov.w	sl, #3
 8006db6:	e786      	b.n	8006cc6 <_scanf_float+0x192>
 8006db8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	4798      	blx	r3
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f43f aedb 	beq.w	8006b7e <_scanf_float+0x4a>
 8006dc8:	e6e6      	b.n	8006b98 <_scanf_float+0x64>
 8006dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dd2:	463a      	mov	r2, r7
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	4798      	blx	r3
 8006dd8:	6923      	ldr	r3, [r4, #16]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	e6e8      	b.n	8006bb2 <_scanf_float+0x7e>
 8006de0:	1e6b      	subs	r3, r5, #1
 8006de2:	2b06      	cmp	r3, #6
 8006de4:	d824      	bhi.n	8006e30 <_scanf_float+0x2fc>
 8006de6:	2d02      	cmp	r5, #2
 8006de8:	d836      	bhi.n	8006e58 <_scanf_float+0x324>
 8006dea:	9b01      	ldr	r3, [sp, #4]
 8006dec:	429e      	cmp	r6, r3
 8006dee:	f67f aee4 	bls.w	8006bba <_scanf_float+0x86>
 8006df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006df6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	4798      	blx	r3
 8006e00:	6923      	ldr	r3, [r4, #16]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	6123      	str	r3, [r4, #16]
 8006e06:	e7f0      	b.n	8006dea <_scanf_float+0x2b6>
 8006e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e0c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006e10:	463a      	mov	r2, r7
 8006e12:	4640      	mov	r0, r8
 8006e14:	4798      	blx	r3
 8006e16:	6923      	ldr	r3, [r4, #16]
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	6123      	str	r3, [r4, #16]
 8006e1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e20:	fa5f fa8a 	uxtb.w	sl, sl
 8006e24:	f1ba 0f02 	cmp.w	sl, #2
 8006e28:	d1ee      	bne.n	8006e08 <_scanf_float+0x2d4>
 8006e2a:	3d03      	subs	r5, #3
 8006e2c:	b2ed      	uxtb	r5, r5
 8006e2e:	1b76      	subs	r6, r6, r5
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	05da      	lsls	r2, r3, #23
 8006e34:	d530      	bpl.n	8006e98 <_scanf_float+0x364>
 8006e36:	055b      	lsls	r3, r3, #21
 8006e38:	d511      	bpl.n	8006e5e <_scanf_float+0x32a>
 8006e3a:	9b01      	ldr	r3, [sp, #4]
 8006e3c:	429e      	cmp	r6, r3
 8006e3e:	f67f aebc 	bls.w	8006bba <_scanf_float+0x86>
 8006e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e4a:	463a      	mov	r2, r7
 8006e4c:	4640      	mov	r0, r8
 8006e4e:	4798      	blx	r3
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	e7f0      	b.n	8006e3a <_scanf_float+0x306>
 8006e58:	46aa      	mov	sl, r5
 8006e5a:	46b3      	mov	fp, r6
 8006e5c:	e7de      	b.n	8006e1c <_scanf_float+0x2e8>
 8006e5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	2965      	cmp	r1, #101	@ 0x65
 8006e66:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e6a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006e6e:	6123      	str	r3, [r4, #16]
 8006e70:	d00c      	beq.n	8006e8c <_scanf_float+0x358>
 8006e72:	2945      	cmp	r1, #69	@ 0x45
 8006e74:	d00a      	beq.n	8006e8c <_scanf_float+0x358>
 8006e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e7a:	463a      	mov	r2, r7
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4798      	blx	r3
 8006e80:	6923      	ldr	r3, [r4, #16]
 8006e82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	1eb5      	subs	r5, r6, #2
 8006e8a:	6123      	str	r3, [r4, #16]
 8006e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e90:	463a      	mov	r2, r7
 8006e92:	4640      	mov	r0, r8
 8006e94:	4798      	blx	r3
 8006e96:	462e      	mov	r6, r5
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	f012 0210 	ands.w	r2, r2, #16
 8006e9e:	d001      	beq.n	8006ea4 <_scanf_float+0x370>
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e68b      	b.n	8006bbc <_scanf_float+0x88>
 8006ea4:	7032      	strb	r2, [r6, #0]
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb0:	d11c      	bne.n	8006eec <_scanf_float+0x3b8>
 8006eb2:	9b02      	ldr	r3, [sp, #8]
 8006eb4:	454b      	cmp	r3, r9
 8006eb6:	eba3 0209 	sub.w	r2, r3, r9
 8006eba:	d123      	bne.n	8006f04 <_scanf_float+0x3d0>
 8006ebc:	9901      	ldr	r1, [sp, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	f002 fbf9 	bl	80096b8 <_strtod_r>
 8006ec6:	9b03      	ldr	r3, [sp, #12]
 8006ec8:	6821      	ldr	r1, [r4, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f011 0f02 	tst.w	r1, #2
 8006ed0:	ec57 6b10 	vmov	r6, r7, d0
 8006ed4:	f103 0204 	add.w	r2, r3, #4
 8006ed8:	d01f      	beq.n	8006f1a <_scanf_float+0x3e6>
 8006eda:	9903      	ldr	r1, [sp, #12]
 8006edc:	600a      	str	r2, [r1, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	e9c3 6700 	strd	r6, r7, [r3]
 8006ee4:	68e3      	ldr	r3, [r4, #12]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	60e3      	str	r3, [r4, #12]
 8006eea:	e7d9      	b.n	8006ea0 <_scanf_float+0x36c>
 8006eec:	9b04      	ldr	r3, [sp, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0e4      	beq.n	8006ebc <_scanf_float+0x388>
 8006ef2:	9905      	ldr	r1, [sp, #20]
 8006ef4:	230a      	movs	r3, #10
 8006ef6:	3101      	adds	r1, #1
 8006ef8:	4640      	mov	r0, r8
 8006efa:	f002 fc5d 	bl	80097b8 <_strtol_r>
 8006efe:	9b04      	ldr	r3, [sp, #16]
 8006f00:	9e05      	ldr	r6, [sp, #20]
 8006f02:	1ac2      	subs	r2, r0, r3
 8006f04:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006f08:	429e      	cmp	r6, r3
 8006f0a:	bf28      	it	cs
 8006f0c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006f10:	4910      	ldr	r1, [pc, #64]	@ (8006f54 <_scanf_float+0x420>)
 8006f12:	4630      	mov	r0, r6
 8006f14:	f000 f8e4 	bl	80070e0 <siprintf>
 8006f18:	e7d0      	b.n	8006ebc <_scanf_float+0x388>
 8006f1a:	f011 0f04 	tst.w	r1, #4
 8006f1e:	9903      	ldr	r1, [sp, #12]
 8006f20:	600a      	str	r2, [r1, #0]
 8006f22:	d1dc      	bne.n	8006ede <_scanf_float+0x3aa>
 8006f24:	681d      	ldr	r5, [r3, #0]
 8006f26:	4632      	mov	r2, r6
 8006f28:	463b      	mov	r3, r7
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 fe0d 	bl	8000b4c <__aeabi_dcmpun>
 8006f32:	b128      	cbz	r0, 8006f40 <_scanf_float+0x40c>
 8006f34:	4808      	ldr	r0, [pc, #32]	@ (8006f58 <_scanf_float+0x424>)
 8006f36:	f000 f9b7 	bl	80072a8 <nanf>
 8006f3a:	ed85 0a00 	vstr	s0, [r5]
 8006f3e:	e7d1      	b.n	8006ee4 <_scanf_float+0x3b0>
 8006f40:	4630      	mov	r0, r6
 8006f42:	4639      	mov	r1, r7
 8006f44:	f7f9 fe60 	bl	8000c08 <__aeabi_d2f>
 8006f48:	6028      	str	r0, [r5, #0]
 8006f4a:	e7cb      	b.n	8006ee4 <_scanf_float+0x3b0>
 8006f4c:	f04f 0900 	mov.w	r9, #0
 8006f50:	e629      	b.n	8006ba6 <_scanf_float+0x72>
 8006f52:	bf00      	nop
 8006f54:	0800c94c 	.word	0x0800c94c
 8006f58:	0800cce5 	.word	0x0800cce5

08006f5c <std>:
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	4604      	mov	r4, r0
 8006f62:	e9c0 3300 	strd	r3, r3, [r0]
 8006f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f6a:	6083      	str	r3, [r0, #8]
 8006f6c:	8181      	strh	r1, [r0, #12]
 8006f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f70:	81c2      	strh	r2, [r0, #14]
 8006f72:	6183      	str	r3, [r0, #24]
 8006f74:	4619      	mov	r1, r3
 8006f76:	2208      	movs	r2, #8
 8006f78:	305c      	adds	r0, #92	@ 0x5c
 8006f7a:	f000 f914 	bl	80071a6 <memset>
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <std+0x58>)
 8006f80:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f82:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb8 <std+0x5c>)
 8006f84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <std+0x60>)
 8006f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <std+0x64>)
 8006f8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc4 <std+0x68>)
 8006f90:	6224      	str	r4, [r4, #32]
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d006      	beq.n	8006fa4 <std+0x48>
 8006f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f9a:	4294      	cmp	r4, r2
 8006f9c:	d002      	beq.n	8006fa4 <std+0x48>
 8006f9e:	33d0      	adds	r3, #208	@ 0xd0
 8006fa0:	429c      	cmp	r4, r3
 8006fa2:	d105      	bne.n	8006fb0 <std+0x54>
 8006fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f000 b978 	b.w	80072a0 <__retarget_lock_init_recursive>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	08007121 	.word	0x08007121
 8006fb8:	08007143 	.word	0x08007143
 8006fbc:	0800717b 	.word	0x0800717b
 8006fc0:	0800719f 	.word	0x0800719f
 8006fc4:	2000842c 	.word	0x2000842c

08006fc8 <stdio_exit_handler>:
 8006fc8:	4a02      	ldr	r2, [pc, #8]	@ (8006fd4 <stdio_exit_handler+0xc>)
 8006fca:	4903      	ldr	r1, [pc, #12]	@ (8006fd8 <stdio_exit_handler+0x10>)
 8006fcc:	4803      	ldr	r0, [pc, #12]	@ (8006fdc <stdio_exit_handler+0x14>)
 8006fce:	f000 b869 	b.w	80070a4 <_fwalk_sglue>
 8006fd2:	bf00      	nop
 8006fd4:	2000001c 	.word	0x2000001c
 8006fd8:	08009df9 	.word	0x08009df9
 8006fdc:	2000002c 	.word	0x2000002c

08006fe0 <cleanup_stdio>:
 8006fe0:	6841      	ldr	r1, [r0, #4]
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <cleanup_stdio+0x34>)
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4604      	mov	r4, r0
 8006fea:	d001      	beq.n	8006ff0 <cleanup_stdio+0x10>
 8006fec:	f002 ff04 	bl	8009df8 <_fflush_r>
 8006ff0:	68a1      	ldr	r1, [r4, #8]
 8006ff2:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <cleanup_stdio+0x38>)
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	d002      	beq.n	8006ffe <cleanup_stdio+0x1e>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f002 fefd 	bl	8009df8 <_fflush_r>
 8006ffe:	68e1      	ldr	r1, [r4, #12]
 8007000:	4b06      	ldr	r3, [pc, #24]	@ (800701c <cleanup_stdio+0x3c>)
 8007002:	4299      	cmp	r1, r3
 8007004:	d004      	beq.n	8007010 <cleanup_stdio+0x30>
 8007006:	4620      	mov	r0, r4
 8007008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800700c:	f002 bef4 	b.w	8009df8 <_fflush_r>
 8007010:	bd10      	pop	{r4, pc}
 8007012:	bf00      	nop
 8007014:	2000842c 	.word	0x2000842c
 8007018:	20008494 	.word	0x20008494
 800701c:	200084fc 	.word	0x200084fc

08007020 <global_stdio_init.part.0>:
 8007020:	b510      	push	{r4, lr}
 8007022:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <global_stdio_init.part.0+0x30>)
 8007024:	4c0b      	ldr	r4, [pc, #44]	@ (8007054 <global_stdio_init.part.0+0x34>)
 8007026:	4a0c      	ldr	r2, [pc, #48]	@ (8007058 <global_stdio_init.part.0+0x38>)
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	4620      	mov	r0, r4
 800702c:	2200      	movs	r2, #0
 800702e:	2104      	movs	r1, #4
 8007030:	f7ff ff94 	bl	8006f5c <std>
 8007034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007038:	2201      	movs	r2, #1
 800703a:	2109      	movs	r1, #9
 800703c:	f7ff ff8e 	bl	8006f5c <std>
 8007040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007044:	2202      	movs	r2, #2
 8007046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800704a:	2112      	movs	r1, #18
 800704c:	f7ff bf86 	b.w	8006f5c <std>
 8007050:	20008564 	.word	0x20008564
 8007054:	2000842c 	.word	0x2000842c
 8007058:	08006fc9 	.word	0x08006fc9

0800705c <__sfp_lock_acquire>:
 800705c:	4801      	ldr	r0, [pc, #4]	@ (8007064 <__sfp_lock_acquire+0x8>)
 800705e:	f000 b920 	b.w	80072a2 <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	2000856d 	.word	0x2000856d

08007068 <__sfp_lock_release>:
 8007068:	4801      	ldr	r0, [pc, #4]	@ (8007070 <__sfp_lock_release+0x8>)
 800706a:	f000 b91b 	b.w	80072a4 <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	2000856d 	.word	0x2000856d

08007074 <__sinit>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	f7ff fff0 	bl	800705c <__sfp_lock_acquire>
 800707c:	6a23      	ldr	r3, [r4, #32]
 800707e:	b11b      	cbz	r3, 8007088 <__sinit+0x14>
 8007080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007084:	f7ff bff0 	b.w	8007068 <__sfp_lock_release>
 8007088:	4b04      	ldr	r3, [pc, #16]	@ (800709c <__sinit+0x28>)
 800708a:	6223      	str	r3, [r4, #32]
 800708c:	4b04      	ldr	r3, [pc, #16]	@ (80070a0 <__sinit+0x2c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f5      	bne.n	8007080 <__sinit+0xc>
 8007094:	f7ff ffc4 	bl	8007020 <global_stdio_init.part.0>
 8007098:	e7f2      	b.n	8007080 <__sinit+0xc>
 800709a:	bf00      	nop
 800709c:	08006fe1 	.word	0x08006fe1
 80070a0:	20008564 	.word	0x20008564

080070a4 <_fwalk_sglue>:
 80070a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a8:	4607      	mov	r7, r0
 80070aa:	4688      	mov	r8, r1
 80070ac:	4614      	mov	r4, r2
 80070ae:	2600      	movs	r6, #0
 80070b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070b4:	f1b9 0901 	subs.w	r9, r9, #1
 80070b8:	d505      	bpl.n	80070c6 <_fwalk_sglue+0x22>
 80070ba:	6824      	ldr	r4, [r4, #0]
 80070bc:	2c00      	cmp	r4, #0
 80070be:	d1f7      	bne.n	80070b0 <_fwalk_sglue+0xc>
 80070c0:	4630      	mov	r0, r6
 80070c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d907      	bls.n	80070dc <_fwalk_sglue+0x38>
 80070cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070d0:	3301      	adds	r3, #1
 80070d2:	d003      	beq.n	80070dc <_fwalk_sglue+0x38>
 80070d4:	4629      	mov	r1, r5
 80070d6:	4638      	mov	r0, r7
 80070d8:	47c0      	blx	r8
 80070da:	4306      	orrs	r6, r0
 80070dc:	3568      	adds	r5, #104	@ 0x68
 80070de:	e7e9      	b.n	80070b4 <_fwalk_sglue+0x10>

080070e0 <siprintf>:
 80070e0:	b40e      	push	{r1, r2, r3}
 80070e2:	b500      	push	{lr}
 80070e4:	b09c      	sub	sp, #112	@ 0x70
 80070e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80070e8:	9002      	str	r0, [sp, #8]
 80070ea:	9006      	str	r0, [sp, #24]
 80070ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070f0:	4809      	ldr	r0, [pc, #36]	@ (8007118 <siprintf+0x38>)
 80070f2:	9107      	str	r1, [sp, #28]
 80070f4:	9104      	str	r1, [sp, #16]
 80070f6:	4909      	ldr	r1, [pc, #36]	@ (800711c <siprintf+0x3c>)
 80070f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fc:	9105      	str	r1, [sp, #20]
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	a902      	add	r1, sp, #8
 8007104:	f002 fbb6 	bl	8009874 <_svfiprintf_r>
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	b01c      	add	sp, #112	@ 0x70
 8007110:	f85d eb04 	ldr.w	lr, [sp], #4
 8007114:	b003      	add	sp, #12
 8007116:	4770      	bx	lr
 8007118:	20000028 	.word	0x20000028
 800711c:	ffff0208 	.word	0xffff0208

08007120 <__sread>:
 8007120:	b510      	push	{r4, lr}
 8007122:	460c      	mov	r4, r1
 8007124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007128:	f000 f86c 	bl	8007204 <_read_r>
 800712c:	2800      	cmp	r0, #0
 800712e:	bfab      	itete	ge
 8007130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007132:	89a3      	ldrhlt	r3, [r4, #12]
 8007134:	181b      	addge	r3, r3, r0
 8007136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800713a:	bfac      	ite	ge
 800713c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800713e:	81a3      	strhlt	r3, [r4, #12]
 8007140:	bd10      	pop	{r4, pc}

08007142 <__swrite>:
 8007142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007146:	461f      	mov	r7, r3
 8007148:	898b      	ldrh	r3, [r1, #12]
 800714a:	05db      	lsls	r3, r3, #23
 800714c:	4605      	mov	r5, r0
 800714e:	460c      	mov	r4, r1
 8007150:	4616      	mov	r6, r2
 8007152:	d505      	bpl.n	8007160 <__swrite+0x1e>
 8007154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007158:	2302      	movs	r3, #2
 800715a:	2200      	movs	r2, #0
 800715c:	f000 f840 	bl	80071e0 <_lseek_r>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	4632      	mov	r2, r6
 800716e:	463b      	mov	r3, r7
 8007170:	4628      	mov	r0, r5
 8007172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007176:	f000 b857 	b.w	8007228 <_write_r>

0800717a <__sseek>:
 800717a:	b510      	push	{r4, lr}
 800717c:	460c      	mov	r4, r1
 800717e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007182:	f000 f82d 	bl	80071e0 <_lseek_r>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	bf15      	itete	ne
 800718c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800718e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007196:	81a3      	strheq	r3, [r4, #12]
 8007198:	bf18      	it	ne
 800719a:	81a3      	strhne	r3, [r4, #12]
 800719c:	bd10      	pop	{r4, pc}

0800719e <__sclose>:
 800719e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a2:	f000 b80d 	b.w	80071c0 <_close_r>

080071a6 <memset>:
 80071a6:	4402      	add	r2, r0
 80071a8:	4603      	mov	r3, r0
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d100      	bne.n	80071b0 <memset+0xa>
 80071ae:	4770      	bx	lr
 80071b0:	f803 1b01 	strb.w	r1, [r3], #1
 80071b4:	e7f9      	b.n	80071aa <memset+0x4>
	...

080071b8 <_localeconv_r>:
 80071b8:	4800      	ldr	r0, [pc, #0]	@ (80071bc <_localeconv_r+0x4>)
 80071ba:	4770      	bx	lr
 80071bc:	20000168 	.word	0x20000168

080071c0 <_close_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d06      	ldr	r5, [pc, #24]	@ (80071dc <_close_r+0x1c>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	f7fb f880 	bl	80022d0 <_close>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_close_r+0x1a>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_close_r+0x1a>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	20008568 	.word	0x20008568

080071e0 <_lseek_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d07      	ldr	r5, [pc, #28]	@ (8007200 <_lseek_r+0x20>)
 80071e4:	4604      	mov	r4, r0
 80071e6:	4608      	mov	r0, r1
 80071e8:	4611      	mov	r1, r2
 80071ea:	2200      	movs	r2, #0
 80071ec:	602a      	str	r2, [r5, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f7fb f895 	bl	800231e <_lseek>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_lseek_r+0x1e>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_lseek_r+0x1e>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20008568 	.word	0x20008568

08007204 <_read_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d07      	ldr	r5, [pc, #28]	@ (8007224 <_read_r+0x20>)
 8007208:	4604      	mov	r4, r0
 800720a:	4608      	mov	r0, r1
 800720c:	4611      	mov	r1, r2
 800720e:	2200      	movs	r2, #0
 8007210:	602a      	str	r2, [r5, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f7fb f83f 	bl	8002296 <_read>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_read_r+0x1e>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_read_r+0x1e>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20008568 	.word	0x20008568

08007228 <_write_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d07      	ldr	r5, [pc, #28]	@ (8007248 <_write_r+0x20>)
 800722c:	4604      	mov	r4, r0
 800722e:	4608      	mov	r0, r1
 8007230:	4611      	mov	r1, r2
 8007232:	2200      	movs	r2, #0
 8007234:	602a      	str	r2, [r5, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	f7fb f960 	bl	80024fc <_write>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d102      	bne.n	8007246 <_write_r+0x1e>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	b103      	cbz	r3, 8007246 <_write_r+0x1e>
 8007244:	6023      	str	r3, [r4, #0]
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	20008568 	.word	0x20008568

0800724c <__errno>:
 800724c:	4b01      	ldr	r3, [pc, #4]	@ (8007254 <__errno+0x8>)
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000028 	.word	0x20000028

08007258 <__libc_init_array>:
 8007258:	b570      	push	{r4, r5, r6, lr}
 800725a:	4d0d      	ldr	r5, [pc, #52]	@ (8007290 <__libc_init_array+0x38>)
 800725c:	4c0d      	ldr	r4, [pc, #52]	@ (8007294 <__libc_init_array+0x3c>)
 800725e:	1b64      	subs	r4, r4, r5
 8007260:	10a4      	asrs	r4, r4, #2
 8007262:	2600      	movs	r6, #0
 8007264:	42a6      	cmp	r6, r4
 8007266:	d109      	bne.n	800727c <__libc_init_array+0x24>
 8007268:	4d0b      	ldr	r5, [pc, #44]	@ (8007298 <__libc_init_array+0x40>)
 800726a:	4c0c      	ldr	r4, [pc, #48]	@ (800729c <__libc_init_array+0x44>)
 800726c:	f005 fb38 	bl	800c8e0 <_init>
 8007270:	1b64      	subs	r4, r4, r5
 8007272:	10a4      	asrs	r4, r4, #2
 8007274:	2600      	movs	r6, #0
 8007276:	42a6      	cmp	r6, r4
 8007278:	d105      	bne.n	8007286 <__libc_init_array+0x2e>
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007280:	4798      	blx	r3
 8007282:	3601      	adds	r6, #1
 8007284:	e7ee      	b.n	8007264 <__libc_init_array+0xc>
 8007286:	f855 3b04 	ldr.w	r3, [r5], #4
 800728a:	4798      	blx	r3
 800728c:	3601      	adds	r6, #1
 800728e:	e7f2      	b.n	8007276 <__libc_init_array+0x1e>
 8007290:	0800cf58 	.word	0x0800cf58
 8007294:	0800cf58 	.word	0x0800cf58
 8007298:	0800cf58 	.word	0x0800cf58
 800729c:	0800cf5c 	.word	0x0800cf5c

080072a0 <__retarget_lock_init_recursive>:
 80072a0:	4770      	bx	lr

080072a2 <__retarget_lock_acquire_recursive>:
 80072a2:	4770      	bx	lr

080072a4 <__retarget_lock_release_recursive>:
 80072a4:	4770      	bx	lr
	...

080072a8 <nanf>:
 80072a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80072b0 <nanf+0x8>
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	7fc00000 	.word	0x7fc00000

080072b4 <quorem>:
 80072b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	6903      	ldr	r3, [r0, #16]
 80072ba:	690c      	ldr	r4, [r1, #16]
 80072bc:	42a3      	cmp	r3, r4
 80072be:	4607      	mov	r7, r0
 80072c0:	db7e      	blt.n	80073c0 <quorem+0x10c>
 80072c2:	3c01      	subs	r4, #1
 80072c4:	f101 0814 	add.w	r8, r1, #20
 80072c8:	00a3      	lsls	r3, r4, #2
 80072ca:	f100 0514 	add.w	r5, r0, #20
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072de:	3301      	adds	r3, #1
 80072e0:	429a      	cmp	r2, r3
 80072e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80072ea:	d32e      	bcc.n	800734a <quorem+0x96>
 80072ec:	f04f 0a00 	mov.w	sl, #0
 80072f0:	46c4      	mov	ip, r8
 80072f2:	46ae      	mov	lr, r5
 80072f4:	46d3      	mov	fp, sl
 80072f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80072fa:	b298      	uxth	r0, r3
 80072fc:	fb06 a000 	mla	r0, r6, r0, sl
 8007300:	0c02      	lsrs	r2, r0, #16
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	fb06 2303 	mla	r3, r6, r3, r2
 8007308:	f8de 2000 	ldr.w	r2, [lr]
 800730c:	b280      	uxth	r0, r0
 800730e:	b292      	uxth	r2, r2
 8007310:	1a12      	subs	r2, r2, r0
 8007312:	445a      	add	r2, fp
 8007314:	f8de 0000 	ldr.w	r0, [lr]
 8007318:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800731c:	b29b      	uxth	r3, r3
 800731e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007322:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007326:	b292      	uxth	r2, r2
 8007328:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800732c:	45e1      	cmp	r9, ip
 800732e:	f84e 2b04 	str.w	r2, [lr], #4
 8007332:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007336:	d2de      	bcs.n	80072f6 <quorem+0x42>
 8007338:	9b00      	ldr	r3, [sp, #0]
 800733a:	58eb      	ldr	r3, [r5, r3]
 800733c:	b92b      	cbnz	r3, 800734a <quorem+0x96>
 800733e:	9b01      	ldr	r3, [sp, #4]
 8007340:	3b04      	subs	r3, #4
 8007342:	429d      	cmp	r5, r3
 8007344:	461a      	mov	r2, r3
 8007346:	d32f      	bcc.n	80073a8 <quorem+0xf4>
 8007348:	613c      	str	r4, [r7, #16]
 800734a:	4638      	mov	r0, r7
 800734c:	f001 f9c4 	bl	80086d8 <__mcmp>
 8007350:	2800      	cmp	r0, #0
 8007352:	db25      	blt.n	80073a0 <quorem+0xec>
 8007354:	4629      	mov	r1, r5
 8007356:	2000      	movs	r0, #0
 8007358:	f858 2b04 	ldr.w	r2, [r8], #4
 800735c:	f8d1 c000 	ldr.w	ip, [r1]
 8007360:	fa1f fe82 	uxth.w	lr, r2
 8007364:	fa1f f38c 	uxth.w	r3, ip
 8007368:	eba3 030e 	sub.w	r3, r3, lr
 800736c:	4403      	add	r3, r0
 800736e:	0c12      	lsrs	r2, r2, #16
 8007370:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007374:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800737e:	45c1      	cmp	r9, r8
 8007380:	f841 3b04 	str.w	r3, [r1], #4
 8007384:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007388:	d2e6      	bcs.n	8007358 <quorem+0xa4>
 800738a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800738e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007392:	b922      	cbnz	r2, 800739e <quorem+0xea>
 8007394:	3b04      	subs	r3, #4
 8007396:	429d      	cmp	r5, r3
 8007398:	461a      	mov	r2, r3
 800739a:	d30b      	bcc.n	80073b4 <quorem+0x100>
 800739c:	613c      	str	r4, [r7, #16]
 800739e:	3601      	adds	r6, #1
 80073a0:	4630      	mov	r0, r6
 80073a2:	b003      	add	sp, #12
 80073a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a8:	6812      	ldr	r2, [r2, #0]
 80073aa:	3b04      	subs	r3, #4
 80073ac:	2a00      	cmp	r2, #0
 80073ae:	d1cb      	bne.n	8007348 <quorem+0x94>
 80073b0:	3c01      	subs	r4, #1
 80073b2:	e7c6      	b.n	8007342 <quorem+0x8e>
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	3b04      	subs	r3, #4
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	d1ef      	bne.n	800739c <quorem+0xe8>
 80073bc:	3c01      	subs	r4, #1
 80073be:	e7ea      	b.n	8007396 <quorem+0xe2>
 80073c0:	2000      	movs	r0, #0
 80073c2:	e7ee      	b.n	80073a2 <quorem+0xee>
 80073c4:	0000      	movs	r0, r0
	...

080073c8 <_dtoa_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	69c7      	ldr	r7, [r0, #28]
 80073ce:	b099      	sub	sp, #100	@ 0x64
 80073d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073d4:	ec55 4b10 	vmov	r4, r5, d0
 80073d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80073da:	9109      	str	r1, [sp, #36]	@ 0x24
 80073dc:	4683      	mov	fp, r0
 80073de:	920e      	str	r2, [sp, #56]	@ 0x38
 80073e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073e2:	b97f      	cbnz	r7, 8007404 <_dtoa_r+0x3c>
 80073e4:	2010      	movs	r0, #16
 80073e6:	f000 fdfd 	bl	8007fe4 <malloc>
 80073ea:	4602      	mov	r2, r0
 80073ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80073f0:	b920      	cbnz	r0, 80073fc <_dtoa_r+0x34>
 80073f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007690 <_dtoa_r+0x2c8>)
 80073f4:	21ef      	movs	r1, #239	@ 0xef
 80073f6:	48a7      	ldr	r0, [pc, #668]	@ (8007694 <_dtoa_r+0x2cc>)
 80073f8:	f002 fe0e 	bl	800a018 <__assert_func>
 80073fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007400:	6007      	str	r7, [r0, #0]
 8007402:	60c7      	str	r7, [r0, #12]
 8007404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007408:	6819      	ldr	r1, [r3, #0]
 800740a:	b159      	cbz	r1, 8007424 <_dtoa_r+0x5c>
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	604a      	str	r2, [r1, #4]
 8007410:	2301      	movs	r3, #1
 8007412:	4093      	lsls	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
 8007416:	4658      	mov	r0, fp
 8007418:	f000 feda 	bl	80081d0 <_Bfree>
 800741c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	1e2b      	subs	r3, r5, #0
 8007426:	bfb9      	ittee	lt
 8007428:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800742c:	9303      	strlt	r3, [sp, #12]
 800742e:	2300      	movge	r3, #0
 8007430:	6033      	strge	r3, [r6, #0]
 8007432:	9f03      	ldr	r7, [sp, #12]
 8007434:	4b98      	ldr	r3, [pc, #608]	@ (8007698 <_dtoa_r+0x2d0>)
 8007436:	bfbc      	itt	lt
 8007438:	2201      	movlt	r2, #1
 800743a:	6032      	strlt	r2, [r6, #0]
 800743c:	43bb      	bics	r3, r7
 800743e:	d112      	bne.n	8007466 <_dtoa_r+0x9e>
 8007440:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007442:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800744c:	4323      	orrs	r3, r4
 800744e:	f000 854d 	beq.w	8007eec <_dtoa_r+0xb24>
 8007452:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007454:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80076ac <_dtoa_r+0x2e4>
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 854f 	beq.w	8007efc <_dtoa_r+0xb34>
 800745e:	f10a 0303 	add.w	r3, sl, #3
 8007462:	f000 bd49 	b.w	8007ef8 <_dtoa_r+0xb30>
 8007466:	ed9d 7b02 	vldr	d7, [sp, #8]
 800746a:	2200      	movs	r2, #0
 800746c:	ec51 0b17 	vmov	r0, r1, d7
 8007470:	2300      	movs	r3, #0
 8007472:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007476:	f7f9 fb37 	bl	8000ae8 <__aeabi_dcmpeq>
 800747a:	4680      	mov	r8, r0
 800747c:	b158      	cbz	r0, 8007496 <_dtoa_r+0xce>
 800747e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007480:	2301      	movs	r3, #1
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007486:	b113      	cbz	r3, 800748e <_dtoa_r+0xc6>
 8007488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800748a:	4b84      	ldr	r3, [pc, #528]	@ (800769c <_dtoa_r+0x2d4>)
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80076b0 <_dtoa_r+0x2e8>
 8007492:	f000 bd33 	b.w	8007efc <_dtoa_r+0xb34>
 8007496:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800749a:	aa16      	add	r2, sp, #88	@ 0x58
 800749c:	a917      	add	r1, sp, #92	@ 0x5c
 800749e:	4658      	mov	r0, fp
 80074a0:	f001 fa3a 	bl	8008918 <__d2b>
 80074a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80074a8:	4681      	mov	r9, r0
 80074aa:	2e00      	cmp	r6, #0
 80074ac:	d077      	beq.n	800759e <_dtoa_r+0x1d6>
 80074ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80074b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074c8:	4619      	mov	r1, r3
 80074ca:	2200      	movs	r2, #0
 80074cc:	4b74      	ldr	r3, [pc, #464]	@ (80076a0 <_dtoa_r+0x2d8>)
 80074ce:	f7f8 feeb 	bl	80002a8 <__aeabi_dsub>
 80074d2:	a369      	add	r3, pc, #420	@ (adr r3, 8007678 <_dtoa_r+0x2b0>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f9 f89e 	bl	8000618 <__aeabi_dmul>
 80074dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007680 <_dtoa_r+0x2b8>)
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	f7f8 fee3 	bl	80002ac <__adddf3>
 80074e6:	4604      	mov	r4, r0
 80074e8:	4630      	mov	r0, r6
 80074ea:	460d      	mov	r5, r1
 80074ec:	f7f9 f82a 	bl	8000544 <__aeabi_i2d>
 80074f0:	a365      	add	r3, pc, #404	@ (adr r3, 8007688 <_dtoa_r+0x2c0>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f9 f88f 	bl	8000618 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f8 fed3 	bl	80002ac <__adddf3>
 8007506:	4604      	mov	r4, r0
 8007508:	460d      	mov	r5, r1
 800750a:	f7f9 fb35 	bl	8000b78 <__aeabi_d2iz>
 800750e:	2200      	movs	r2, #0
 8007510:	4607      	mov	r7, r0
 8007512:	2300      	movs	r3, #0
 8007514:	4620      	mov	r0, r4
 8007516:	4629      	mov	r1, r5
 8007518:	f7f9 faf0 	bl	8000afc <__aeabi_dcmplt>
 800751c:	b140      	cbz	r0, 8007530 <_dtoa_r+0x168>
 800751e:	4638      	mov	r0, r7
 8007520:	f7f9 f810 	bl	8000544 <__aeabi_i2d>
 8007524:	4622      	mov	r2, r4
 8007526:	462b      	mov	r3, r5
 8007528:	f7f9 fade 	bl	8000ae8 <__aeabi_dcmpeq>
 800752c:	b900      	cbnz	r0, 8007530 <_dtoa_r+0x168>
 800752e:	3f01      	subs	r7, #1
 8007530:	2f16      	cmp	r7, #22
 8007532:	d851      	bhi.n	80075d8 <_dtoa_r+0x210>
 8007534:	4b5b      	ldr	r3, [pc, #364]	@ (80076a4 <_dtoa_r+0x2dc>)
 8007536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007542:	f7f9 fadb 	bl	8000afc <__aeabi_dcmplt>
 8007546:	2800      	cmp	r0, #0
 8007548:	d048      	beq.n	80075dc <_dtoa_r+0x214>
 800754a:	3f01      	subs	r7, #1
 800754c:	2300      	movs	r3, #0
 800754e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007550:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007552:	1b9b      	subs	r3, r3, r6
 8007554:	1e5a      	subs	r2, r3, #1
 8007556:	bf44      	itt	mi
 8007558:	f1c3 0801 	rsbmi	r8, r3, #1
 800755c:	2300      	movmi	r3, #0
 800755e:	9208      	str	r2, [sp, #32]
 8007560:	bf54      	ite	pl
 8007562:	f04f 0800 	movpl.w	r8, #0
 8007566:	9308      	strmi	r3, [sp, #32]
 8007568:	2f00      	cmp	r7, #0
 800756a:	db39      	blt.n	80075e0 <_dtoa_r+0x218>
 800756c:	9b08      	ldr	r3, [sp, #32]
 800756e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007570:	443b      	add	r3, r7
 8007572:	9308      	str	r3, [sp, #32]
 8007574:	2300      	movs	r3, #0
 8007576:	930a      	str	r3, [sp, #40]	@ 0x28
 8007578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757a:	2b09      	cmp	r3, #9
 800757c:	d864      	bhi.n	8007648 <_dtoa_r+0x280>
 800757e:	2b05      	cmp	r3, #5
 8007580:	bfc4      	itt	gt
 8007582:	3b04      	subgt	r3, #4
 8007584:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007588:	f1a3 0302 	sub.w	r3, r3, #2
 800758c:	bfcc      	ite	gt
 800758e:	2400      	movgt	r4, #0
 8007590:	2401      	movle	r4, #1
 8007592:	2b03      	cmp	r3, #3
 8007594:	d863      	bhi.n	800765e <_dtoa_r+0x296>
 8007596:	e8df f003 	tbb	[pc, r3]
 800759a:	372a      	.short	0x372a
 800759c:	5535      	.short	0x5535
 800759e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80075a2:	441e      	add	r6, r3
 80075a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	bfc1      	itttt	gt
 80075ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075b0:	409f      	lslgt	r7, r3
 80075b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075ba:	bfd6      	itet	le
 80075bc:	f1c3 0320 	rsble	r3, r3, #32
 80075c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80075c4:	fa04 f003 	lslle.w	r0, r4, r3
 80075c8:	f7f8 ffac 	bl	8000524 <__aeabi_ui2d>
 80075cc:	2201      	movs	r2, #1
 80075ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075d2:	3e01      	subs	r6, #1
 80075d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80075d6:	e777      	b.n	80074c8 <_dtoa_r+0x100>
 80075d8:	2301      	movs	r3, #1
 80075da:	e7b8      	b.n	800754e <_dtoa_r+0x186>
 80075dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80075de:	e7b7      	b.n	8007550 <_dtoa_r+0x188>
 80075e0:	427b      	negs	r3, r7
 80075e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e4:	2300      	movs	r3, #0
 80075e6:	eba8 0807 	sub.w	r8, r8, r7
 80075ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075ec:	e7c4      	b.n	8007578 <_dtoa_r+0x1b0>
 80075ee:	2300      	movs	r3, #0
 80075f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	dc35      	bgt.n	8007664 <_dtoa_r+0x29c>
 80075f8:	2301      	movs	r3, #1
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	9307      	str	r3, [sp, #28]
 80075fe:	461a      	mov	r2, r3
 8007600:	920e      	str	r2, [sp, #56]	@ 0x38
 8007602:	e00b      	b.n	800761c <_dtoa_r+0x254>
 8007604:	2301      	movs	r3, #1
 8007606:	e7f3      	b.n	80075f0 <_dtoa_r+0x228>
 8007608:	2300      	movs	r3, #0
 800760a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800760c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800760e:	18fb      	adds	r3, r7, r3
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	2b01      	cmp	r3, #1
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	bfb8      	it	lt
 800761a:	2301      	movlt	r3, #1
 800761c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007620:	2100      	movs	r1, #0
 8007622:	2204      	movs	r2, #4
 8007624:	f102 0514 	add.w	r5, r2, #20
 8007628:	429d      	cmp	r5, r3
 800762a:	d91f      	bls.n	800766c <_dtoa_r+0x2a4>
 800762c:	6041      	str	r1, [r0, #4]
 800762e:	4658      	mov	r0, fp
 8007630:	f000 fd8e 	bl	8008150 <_Balloc>
 8007634:	4682      	mov	sl, r0
 8007636:	2800      	cmp	r0, #0
 8007638:	d13c      	bne.n	80076b4 <_dtoa_r+0x2ec>
 800763a:	4b1b      	ldr	r3, [pc, #108]	@ (80076a8 <_dtoa_r+0x2e0>)
 800763c:	4602      	mov	r2, r0
 800763e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007642:	e6d8      	b.n	80073f6 <_dtoa_r+0x2e>
 8007644:	2301      	movs	r3, #1
 8007646:	e7e0      	b.n	800760a <_dtoa_r+0x242>
 8007648:	2401      	movs	r4, #1
 800764a:	2300      	movs	r3, #0
 800764c:	9309      	str	r3, [sp, #36]	@ 0x24
 800764e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007650:	f04f 33ff 	mov.w	r3, #4294967295
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	9307      	str	r3, [sp, #28]
 8007658:	2200      	movs	r2, #0
 800765a:	2312      	movs	r3, #18
 800765c:	e7d0      	b.n	8007600 <_dtoa_r+0x238>
 800765e:	2301      	movs	r3, #1
 8007660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007662:	e7f5      	b.n	8007650 <_dtoa_r+0x288>
 8007664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	9307      	str	r3, [sp, #28]
 800766a:	e7d7      	b.n	800761c <_dtoa_r+0x254>
 800766c:	3101      	adds	r1, #1
 800766e:	0052      	lsls	r2, r2, #1
 8007670:	e7d8      	b.n	8007624 <_dtoa_r+0x25c>
 8007672:	bf00      	nop
 8007674:	f3af 8000 	nop.w
 8007678:	636f4361 	.word	0x636f4361
 800767c:	3fd287a7 	.word	0x3fd287a7
 8007680:	8b60c8b3 	.word	0x8b60c8b3
 8007684:	3fc68a28 	.word	0x3fc68a28
 8007688:	509f79fb 	.word	0x509f79fb
 800768c:	3fd34413 	.word	0x3fd34413
 8007690:	0800c95e 	.word	0x0800c95e
 8007694:	0800c975 	.word	0x0800c975
 8007698:	7ff00000 	.word	0x7ff00000
 800769c:	0800c929 	.word	0x0800c929
 80076a0:	3ff80000 	.word	0x3ff80000
 80076a4:	0800ca70 	.word	0x0800ca70
 80076a8:	0800c9cd 	.word	0x0800c9cd
 80076ac:	0800c95a 	.word	0x0800c95a
 80076b0:	0800c928 	.word	0x0800c928
 80076b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076b8:	6018      	str	r0, [r3, #0]
 80076ba:	9b07      	ldr	r3, [sp, #28]
 80076bc:	2b0e      	cmp	r3, #14
 80076be:	f200 80a4 	bhi.w	800780a <_dtoa_r+0x442>
 80076c2:	2c00      	cmp	r4, #0
 80076c4:	f000 80a1 	beq.w	800780a <_dtoa_r+0x442>
 80076c8:	2f00      	cmp	r7, #0
 80076ca:	dd33      	ble.n	8007734 <_dtoa_r+0x36c>
 80076cc:	4bad      	ldr	r3, [pc, #692]	@ (8007984 <_dtoa_r+0x5bc>)
 80076ce:	f007 020f 	and.w	r2, r7, #15
 80076d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076d6:	ed93 7b00 	vldr	d7, [r3]
 80076da:	05f8      	lsls	r0, r7, #23
 80076dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076e4:	d516      	bpl.n	8007714 <_dtoa_r+0x34c>
 80076e6:	4ba8      	ldr	r3, [pc, #672]	@ (8007988 <_dtoa_r+0x5c0>)
 80076e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076f0:	f7f9 f8bc 	bl	800086c <__aeabi_ddiv>
 80076f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f8:	f004 040f 	and.w	r4, r4, #15
 80076fc:	2603      	movs	r6, #3
 80076fe:	4da2      	ldr	r5, [pc, #648]	@ (8007988 <_dtoa_r+0x5c0>)
 8007700:	b954      	cbnz	r4, 8007718 <_dtoa_r+0x350>
 8007702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800770a:	f7f9 f8af 	bl	800086c <__aeabi_ddiv>
 800770e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007712:	e028      	b.n	8007766 <_dtoa_r+0x39e>
 8007714:	2602      	movs	r6, #2
 8007716:	e7f2      	b.n	80076fe <_dtoa_r+0x336>
 8007718:	07e1      	lsls	r1, r4, #31
 800771a:	d508      	bpl.n	800772e <_dtoa_r+0x366>
 800771c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007720:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007724:	f7f8 ff78 	bl	8000618 <__aeabi_dmul>
 8007728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800772c:	3601      	adds	r6, #1
 800772e:	1064      	asrs	r4, r4, #1
 8007730:	3508      	adds	r5, #8
 8007732:	e7e5      	b.n	8007700 <_dtoa_r+0x338>
 8007734:	f000 80d2 	beq.w	80078dc <_dtoa_r+0x514>
 8007738:	427c      	negs	r4, r7
 800773a:	4b92      	ldr	r3, [pc, #584]	@ (8007984 <_dtoa_r+0x5bc>)
 800773c:	4d92      	ldr	r5, [pc, #584]	@ (8007988 <_dtoa_r+0x5c0>)
 800773e:	f004 020f 	and.w	r2, r4, #15
 8007742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800774e:	f7f8 ff63 	bl	8000618 <__aeabi_dmul>
 8007752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007756:	1124      	asrs	r4, r4, #4
 8007758:	2300      	movs	r3, #0
 800775a:	2602      	movs	r6, #2
 800775c:	2c00      	cmp	r4, #0
 800775e:	f040 80b2 	bne.w	80078c6 <_dtoa_r+0x4fe>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1d3      	bne.n	800770e <_dtoa_r+0x346>
 8007766:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007768:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80b7 	beq.w	80078e0 <_dtoa_r+0x518>
 8007772:	4b86      	ldr	r3, [pc, #536]	@ (800798c <_dtoa_r+0x5c4>)
 8007774:	2200      	movs	r2, #0
 8007776:	4620      	mov	r0, r4
 8007778:	4629      	mov	r1, r5
 800777a:	f7f9 f9bf 	bl	8000afc <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	f000 80ae 	beq.w	80078e0 <_dtoa_r+0x518>
 8007784:	9b07      	ldr	r3, [sp, #28]
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 80aa 	beq.w	80078e0 <_dtoa_r+0x518>
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	dd37      	ble.n	8007802 <_dtoa_r+0x43a>
 8007792:	1e7b      	subs	r3, r7, #1
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	4620      	mov	r0, r4
 8007798:	4b7d      	ldr	r3, [pc, #500]	@ (8007990 <_dtoa_r+0x5c8>)
 800779a:	2200      	movs	r2, #0
 800779c:	4629      	mov	r1, r5
 800779e:	f7f8 ff3b 	bl	8000618 <__aeabi_dmul>
 80077a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a6:	9c00      	ldr	r4, [sp, #0]
 80077a8:	3601      	adds	r6, #1
 80077aa:	4630      	mov	r0, r6
 80077ac:	f7f8 feca 	bl	8000544 <__aeabi_i2d>
 80077b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077b4:	f7f8 ff30 	bl	8000618 <__aeabi_dmul>
 80077b8:	4b76      	ldr	r3, [pc, #472]	@ (8007994 <_dtoa_r+0x5cc>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	f7f8 fd76 	bl	80002ac <__adddf3>
 80077c0:	4605      	mov	r5, r0
 80077c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	f040 808d 	bne.w	80078e6 <_dtoa_r+0x51e>
 80077cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d0:	4b71      	ldr	r3, [pc, #452]	@ (8007998 <_dtoa_r+0x5d0>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7f8 fd68 	bl	80002a8 <__aeabi_dsub>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077e0:	462a      	mov	r2, r5
 80077e2:	4633      	mov	r3, r6
 80077e4:	f7f9 f9a8 	bl	8000b38 <__aeabi_dcmpgt>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f040 828b 	bne.w	8007d04 <_dtoa_r+0x93c>
 80077ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077f2:	462a      	mov	r2, r5
 80077f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80077f8:	f7f9 f980 	bl	8000afc <__aeabi_dcmplt>
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f040 8128 	bne.w	8007a52 <_dtoa_r+0x68a>
 8007802:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007806:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800780a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800780c:	2b00      	cmp	r3, #0
 800780e:	f2c0 815a 	blt.w	8007ac6 <_dtoa_r+0x6fe>
 8007812:	2f0e      	cmp	r7, #14
 8007814:	f300 8157 	bgt.w	8007ac6 <_dtoa_r+0x6fe>
 8007818:	4b5a      	ldr	r3, [pc, #360]	@ (8007984 <_dtoa_r+0x5bc>)
 800781a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800781e:	ed93 7b00 	vldr	d7, [r3]
 8007822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007824:	2b00      	cmp	r3, #0
 8007826:	ed8d 7b00 	vstr	d7, [sp]
 800782a:	da03      	bge.n	8007834 <_dtoa_r+0x46c>
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f340 8101 	ble.w	8007a36 <_dtoa_r+0x66e>
 8007834:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007838:	4656      	mov	r6, sl
 800783a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f9 f813 	bl	800086c <__aeabi_ddiv>
 8007846:	f7f9 f997 	bl	8000b78 <__aeabi_d2iz>
 800784a:	4680      	mov	r8, r0
 800784c:	f7f8 fe7a 	bl	8000544 <__aeabi_i2d>
 8007850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007854:	f7f8 fee0 	bl	8000618 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4620      	mov	r0, r4
 800785e:	4629      	mov	r1, r5
 8007860:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007864:	f7f8 fd20 	bl	80002a8 <__aeabi_dsub>
 8007868:	f806 4b01 	strb.w	r4, [r6], #1
 800786c:	9d07      	ldr	r5, [sp, #28]
 800786e:	eba6 040a 	sub.w	r4, r6, sl
 8007872:	42a5      	cmp	r5, r4
 8007874:	4602      	mov	r2, r0
 8007876:	460b      	mov	r3, r1
 8007878:	f040 8117 	bne.w	8007aaa <_dtoa_r+0x6e2>
 800787c:	f7f8 fd16 	bl	80002ac <__adddf3>
 8007880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007884:	4604      	mov	r4, r0
 8007886:	460d      	mov	r5, r1
 8007888:	f7f9 f956 	bl	8000b38 <__aeabi_dcmpgt>
 800788c:	2800      	cmp	r0, #0
 800788e:	f040 80f9 	bne.w	8007a84 <_dtoa_r+0x6bc>
 8007892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
 800789a:	f7f9 f925 	bl	8000ae8 <__aeabi_dcmpeq>
 800789e:	b118      	cbz	r0, 80078a8 <_dtoa_r+0x4e0>
 80078a0:	f018 0f01 	tst.w	r8, #1
 80078a4:	f040 80ee 	bne.w	8007a84 <_dtoa_r+0x6bc>
 80078a8:	4649      	mov	r1, r9
 80078aa:	4658      	mov	r0, fp
 80078ac:	f000 fc90 	bl	80081d0 <_Bfree>
 80078b0:	2300      	movs	r3, #0
 80078b2:	7033      	strb	r3, [r6, #0]
 80078b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078b6:	3701      	adds	r7, #1
 80078b8:	601f      	str	r7, [r3, #0]
 80078ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 831d 	beq.w	8007efc <_dtoa_r+0xb34>
 80078c2:	601e      	str	r6, [r3, #0]
 80078c4:	e31a      	b.n	8007efc <_dtoa_r+0xb34>
 80078c6:	07e2      	lsls	r2, r4, #31
 80078c8:	d505      	bpl.n	80078d6 <_dtoa_r+0x50e>
 80078ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078ce:	f7f8 fea3 	bl	8000618 <__aeabi_dmul>
 80078d2:	3601      	adds	r6, #1
 80078d4:	2301      	movs	r3, #1
 80078d6:	1064      	asrs	r4, r4, #1
 80078d8:	3508      	adds	r5, #8
 80078da:	e73f      	b.n	800775c <_dtoa_r+0x394>
 80078dc:	2602      	movs	r6, #2
 80078de:	e742      	b.n	8007766 <_dtoa_r+0x39e>
 80078e0:	9c07      	ldr	r4, [sp, #28]
 80078e2:	9704      	str	r7, [sp, #16]
 80078e4:	e761      	b.n	80077aa <_dtoa_r+0x3e2>
 80078e6:	4b27      	ldr	r3, [pc, #156]	@ (8007984 <_dtoa_r+0x5bc>)
 80078e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078f2:	4454      	add	r4, sl
 80078f4:	2900      	cmp	r1, #0
 80078f6:	d053      	beq.n	80079a0 <_dtoa_r+0x5d8>
 80078f8:	4928      	ldr	r1, [pc, #160]	@ (800799c <_dtoa_r+0x5d4>)
 80078fa:	2000      	movs	r0, #0
 80078fc:	f7f8 ffb6 	bl	800086c <__aeabi_ddiv>
 8007900:	4633      	mov	r3, r6
 8007902:	462a      	mov	r2, r5
 8007904:	f7f8 fcd0 	bl	80002a8 <__aeabi_dsub>
 8007908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800790c:	4656      	mov	r6, sl
 800790e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007912:	f7f9 f931 	bl	8000b78 <__aeabi_d2iz>
 8007916:	4605      	mov	r5, r0
 8007918:	f7f8 fe14 	bl	8000544 <__aeabi_i2d>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007924:	f7f8 fcc0 	bl	80002a8 <__aeabi_dsub>
 8007928:	3530      	adds	r5, #48	@ 0x30
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007932:	f806 5b01 	strb.w	r5, [r6], #1
 8007936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800793a:	f7f9 f8df 	bl	8000afc <__aeabi_dcmplt>
 800793e:	2800      	cmp	r0, #0
 8007940:	d171      	bne.n	8007a26 <_dtoa_r+0x65e>
 8007942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007946:	4911      	ldr	r1, [pc, #68]	@ (800798c <_dtoa_r+0x5c4>)
 8007948:	2000      	movs	r0, #0
 800794a:	f7f8 fcad 	bl	80002a8 <__aeabi_dsub>
 800794e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007952:	f7f9 f8d3 	bl	8000afc <__aeabi_dcmplt>
 8007956:	2800      	cmp	r0, #0
 8007958:	f040 8095 	bne.w	8007a86 <_dtoa_r+0x6be>
 800795c:	42a6      	cmp	r6, r4
 800795e:	f43f af50 	beq.w	8007802 <_dtoa_r+0x43a>
 8007962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007966:	4b0a      	ldr	r3, [pc, #40]	@ (8007990 <_dtoa_r+0x5c8>)
 8007968:	2200      	movs	r2, #0
 800796a:	f7f8 fe55 	bl	8000618 <__aeabi_dmul>
 800796e:	4b08      	ldr	r3, [pc, #32]	@ (8007990 <_dtoa_r+0x5c8>)
 8007970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007974:	2200      	movs	r2, #0
 8007976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800797a:	f7f8 fe4d 	bl	8000618 <__aeabi_dmul>
 800797e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007982:	e7c4      	b.n	800790e <_dtoa_r+0x546>
 8007984:	0800ca70 	.word	0x0800ca70
 8007988:	0800ca48 	.word	0x0800ca48
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	40240000 	.word	0x40240000
 8007994:	401c0000 	.word	0x401c0000
 8007998:	40140000 	.word	0x40140000
 800799c:	3fe00000 	.word	0x3fe00000
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	f7f8 fe38 	bl	8000618 <__aeabi_dmul>
 80079a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80079ae:	4656      	mov	r6, sl
 80079b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079b4:	f7f9 f8e0 	bl	8000b78 <__aeabi_d2iz>
 80079b8:	4605      	mov	r5, r0
 80079ba:	f7f8 fdc3 	bl	8000544 <__aeabi_i2d>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c6:	f7f8 fc6f 	bl	80002a8 <__aeabi_dsub>
 80079ca:	3530      	adds	r5, #48	@ 0x30
 80079cc:	f806 5b01 	strb.w	r5, [r6], #1
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	42a6      	cmp	r6, r4
 80079d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079da:	f04f 0200 	mov.w	r2, #0
 80079de:	d124      	bne.n	8007a2a <_dtoa_r+0x662>
 80079e0:	4bac      	ldr	r3, [pc, #688]	@ (8007c94 <_dtoa_r+0x8cc>)
 80079e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079e6:	f7f8 fc61 	bl	80002ac <__adddf3>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079f2:	f7f9 f8a1 	bl	8000b38 <__aeabi_dcmpgt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d145      	bne.n	8007a86 <_dtoa_r+0x6be>
 80079fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079fe:	49a5      	ldr	r1, [pc, #660]	@ (8007c94 <_dtoa_r+0x8cc>)
 8007a00:	2000      	movs	r0, #0
 8007a02:	f7f8 fc51 	bl	80002a8 <__aeabi_dsub>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0e:	f7f9 f875 	bl	8000afc <__aeabi_dcmplt>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	f43f aef5 	beq.w	8007802 <_dtoa_r+0x43a>
 8007a18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007a1a:	1e73      	subs	r3, r6, #1
 8007a1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a22:	2b30      	cmp	r3, #48	@ 0x30
 8007a24:	d0f8      	beq.n	8007a18 <_dtoa_r+0x650>
 8007a26:	9f04      	ldr	r7, [sp, #16]
 8007a28:	e73e      	b.n	80078a8 <_dtoa_r+0x4e0>
 8007a2a:	4b9b      	ldr	r3, [pc, #620]	@ (8007c98 <_dtoa_r+0x8d0>)
 8007a2c:	f7f8 fdf4 	bl	8000618 <__aeabi_dmul>
 8007a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a34:	e7bc      	b.n	80079b0 <_dtoa_r+0x5e8>
 8007a36:	d10c      	bne.n	8007a52 <_dtoa_r+0x68a>
 8007a38:	4b98      	ldr	r3, [pc, #608]	@ (8007c9c <_dtoa_r+0x8d4>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a40:	f7f8 fdea 	bl	8000618 <__aeabi_dmul>
 8007a44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a48:	f7f9 f86c 	bl	8000b24 <__aeabi_dcmpge>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	f000 8157 	beq.w	8007d00 <_dtoa_r+0x938>
 8007a52:	2400      	movs	r4, #0
 8007a54:	4625      	mov	r5, r4
 8007a56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	9304      	str	r3, [sp, #16]
 8007a5c:	4656      	mov	r6, sl
 8007a5e:	2700      	movs	r7, #0
 8007a60:	4621      	mov	r1, r4
 8007a62:	4658      	mov	r0, fp
 8007a64:	f000 fbb4 	bl	80081d0 <_Bfree>
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	d0dc      	beq.n	8007a26 <_dtoa_r+0x65e>
 8007a6c:	b12f      	cbz	r7, 8007a7a <_dtoa_r+0x6b2>
 8007a6e:	42af      	cmp	r7, r5
 8007a70:	d003      	beq.n	8007a7a <_dtoa_r+0x6b2>
 8007a72:	4639      	mov	r1, r7
 8007a74:	4658      	mov	r0, fp
 8007a76:	f000 fbab 	bl	80081d0 <_Bfree>
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4658      	mov	r0, fp
 8007a7e:	f000 fba7 	bl	80081d0 <_Bfree>
 8007a82:	e7d0      	b.n	8007a26 <_dtoa_r+0x65e>
 8007a84:	9704      	str	r7, [sp, #16]
 8007a86:	4633      	mov	r3, r6
 8007a88:	461e      	mov	r6, r3
 8007a8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a8e:	2a39      	cmp	r2, #57	@ 0x39
 8007a90:	d107      	bne.n	8007aa2 <_dtoa_r+0x6da>
 8007a92:	459a      	cmp	sl, r3
 8007a94:	d1f8      	bne.n	8007a88 <_dtoa_r+0x6c0>
 8007a96:	9a04      	ldr	r2, [sp, #16]
 8007a98:	3201      	adds	r2, #1
 8007a9a:	9204      	str	r2, [sp, #16]
 8007a9c:	2230      	movs	r2, #48	@ 0x30
 8007a9e:	f88a 2000 	strb.w	r2, [sl]
 8007aa2:	781a      	ldrb	r2, [r3, #0]
 8007aa4:	3201      	adds	r2, #1
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	e7bd      	b.n	8007a26 <_dtoa_r+0x65e>
 8007aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8007c98 <_dtoa_r+0x8d0>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	f7f8 fdb3 	bl	8000618 <__aeabi_dmul>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	460d      	mov	r5, r1
 8007aba:	f7f9 f815 	bl	8000ae8 <__aeabi_dcmpeq>
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	f43f aebb 	beq.w	800783a <_dtoa_r+0x472>
 8007ac4:	e6f0      	b.n	80078a8 <_dtoa_r+0x4e0>
 8007ac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	f000 80db 	beq.w	8007c84 <_dtoa_r+0x8bc>
 8007ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ad0:	2a01      	cmp	r2, #1
 8007ad2:	f300 80bf 	bgt.w	8007c54 <_dtoa_r+0x88c>
 8007ad6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	f000 80b7 	beq.w	8007c4c <_dtoa_r+0x884>
 8007ade:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007ae2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ae4:	4646      	mov	r6, r8
 8007ae6:	9a08      	ldr	r2, [sp, #32]
 8007ae8:	2101      	movs	r1, #1
 8007aea:	441a      	add	r2, r3
 8007aec:	4658      	mov	r0, fp
 8007aee:	4498      	add	r8, r3
 8007af0:	9208      	str	r2, [sp, #32]
 8007af2:	f000 fc6b 	bl	80083cc <__i2b>
 8007af6:	4605      	mov	r5, r0
 8007af8:	b15e      	cbz	r6, 8007b12 <_dtoa_r+0x74a>
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	dd08      	ble.n	8007b12 <_dtoa_r+0x74a>
 8007b00:	42b3      	cmp	r3, r6
 8007b02:	9a08      	ldr	r2, [sp, #32]
 8007b04:	bfa8      	it	ge
 8007b06:	4633      	movge	r3, r6
 8007b08:	eba8 0803 	sub.w	r8, r8, r3
 8007b0c:	1af6      	subs	r6, r6, r3
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	9308      	str	r3, [sp, #32]
 8007b12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b14:	b1f3      	cbz	r3, 8007b54 <_dtoa_r+0x78c>
 8007b16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80b7 	beq.w	8007c8c <_dtoa_r+0x8c4>
 8007b1e:	b18c      	cbz	r4, 8007b44 <_dtoa_r+0x77c>
 8007b20:	4629      	mov	r1, r5
 8007b22:	4622      	mov	r2, r4
 8007b24:	4658      	mov	r0, fp
 8007b26:	f000 fd11 	bl	800854c <__pow5mult>
 8007b2a:	464a      	mov	r2, r9
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	4605      	mov	r5, r0
 8007b30:	4658      	mov	r0, fp
 8007b32:	f000 fc61 	bl	80083f8 <__multiply>
 8007b36:	4649      	mov	r1, r9
 8007b38:	9004      	str	r0, [sp, #16]
 8007b3a:	4658      	mov	r0, fp
 8007b3c:	f000 fb48 	bl	80081d0 <_Bfree>
 8007b40:	9b04      	ldr	r3, [sp, #16]
 8007b42:	4699      	mov	r9, r3
 8007b44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b46:	1b1a      	subs	r2, r3, r4
 8007b48:	d004      	beq.n	8007b54 <_dtoa_r+0x78c>
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	4658      	mov	r0, fp
 8007b4e:	f000 fcfd 	bl	800854c <__pow5mult>
 8007b52:	4681      	mov	r9, r0
 8007b54:	2101      	movs	r1, #1
 8007b56:	4658      	mov	r0, fp
 8007b58:	f000 fc38 	bl	80083cc <__i2b>
 8007b5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b5e:	4604      	mov	r4, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 81cf 	beq.w	8007f04 <_dtoa_r+0xb3c>
 8007b66:	461a      	mov	r2, r3
 8007b68:	4601      	mov	r1, r0
 8007b6a:	4658      	mov	r0, fp
 8007b6c:	f000 fcee 	bl	800854c <__pow5mult>
 8007b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	4604      	mov	r4, r0
 8007b76:	f300 8095 	bgt.w	8007ca4 <_dtoa_r+0x8dc>
 8007b7a:	9b02      	ldr	r3, [sp, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 8087 	bne.w	8007c90 <_dtoa_r+0x8c8>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 8089 	bne.w	8007ca0 <_dtoa_r+0x8d8>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b94:	0d1b      	lsrs	r3, r3, #20
 8007b96:	051b      	lsls	r3, r3, #20
 8007b98:	b12b      	cbz	r3, 8007ba6 <_dtoa_r+0x7de>
 8007b9a:	9b08      	ldr	r3, [sp, #32]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	9308      	str	r3, [sp, #32]
 8007ba0:	f108 0801 	add.w	r8, r8, #1
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 81b0 	beq.w	8007f10 <_dtoa_r+0xb48>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bb6:	6918      	ldr	r0, [r3, #16]
 8007bb8:	f000 fbbc 	bl	8008334 <__hi0bits>
 8007bbc:	f1c0 0020 	rsb	r0, r0, #32
 8007bc0:	9b08      	ldr	r3, [sp, #32]
 8007bc2:	4418      	add	r0, r3
 8007bc4:	f010 001f 	ands.w	r0, r0, #31
 8007bc8:	d077      	beq.n	8007cba <_dtoa_r+0x8f2>
 8007bca:	f1c0 0320 	rsb	r3, r0, #32
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	dd6b      	ble.n	8007caa <_dtoa_r+0x8e2>
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	f1c0 001c 	rsb	r0, r0, #28
 8007bd8:	4403      	add	r3, r0
 8007bda:	4480      	add	r8, r0
 8007bdc:	4406      	add	r6, r0
 8007bde:	9308      	str	r3, [sp, #32]
 8007be0:	f1b8 0f00 	cmp.w	r8, #0
 8007be4:	dd05      	ble.n	8007bf2 <_dtoa_r+0x82a>
 8007be6:	4649      	mov	r1, r9
 8007be8:	4642      	mov	r2, r8
 8007bea:	4658      	mov	r0, fp
 8007bec:	f000 fd08 	bl	8008600 <__lshift>
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dd05      	ble.n	8007c04 <_dtoa_r+0x83c>
 8007bf8:	4621      	mov	r1, r4
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	4658      	mov	r0, fp
 8007bfe:	f000 fcff 	bl	8008600 <__lshift>
 8007c02:	4604      	mov	r4, r0
 8007c04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d059      	beq.n	8007cbe <_dtoa_r+0x8f6>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4648      	mov	r0, r9
 8007c0e:	f000 fd63 	bl	80086d8 <__mcmp>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	da53      	bge.n	8007cbe <_dtoa_r+0x8f6>
 8007c16:	1e7b      	subs	r3, r7, #1
 8007c18:	9304      	str	r3, [sp, #16]
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	220a      	movs	r2, #10
 8007c20:	4658      	mov	r0, fp
 8007c22:	f000 faf7 	bl	8008214 <__multadd>
 8007c26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c28:	4681      	mov	r9, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 8172 	beq.w	8007f14 <_dtoa_r+0xb4c>
 8007c30:	2300      	movs	r3, #0
 8007c32:	4629      	mov	r1, r5
 8007c34:	220a      	movs	r2, #10
 8007c36:	4658      	mov	r0, fp
 8007c38:	f000 faec 	bl	8008214 <__multadd>
 8007c3c:	9b00      	ldr	r3, [sp, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	4605      	mov	r5, r0
 8007c42:	dc67      	bgt.n	8007d14 <_dtoa_r+0x94c>
 8007c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	dc41      	bgt.n	8007cce <_dtoa_r+0x906>
 8007c4a:	e063      	b.n	8007d14 <_dtoa_r+0x94c>
 8007c4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c52:	e746      	b.n	8007ae2 <_dtoa_r+0x71a>
 8007c54:	9b07      	ldr	r3, [sp, #28]
 8007c56:	1e5c      	subs	r4, r3, #1
 8007c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c5a:	42a3      	cmp	r3, r4
 8007c5c:	bfbf      	itttt	lt
 8007c5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c64:	1ae3      	sublt	r3, r4, r3
 8007c66:	bfb4      	ite	lt
 8007c68:	18d2      	addlt	r2, r2, r3
 8007c6a:	1b1c      	subge	r4, r3, r4
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	bfbc      	itt	lt
 8007c70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c72:	2400      	movlt	r4, #0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bfb5      	itete	lt
 8007c78:	eba8 0603 	sublt.w	r6, r8, r3
 8007c7c:	9b07      	ldrge	r3, [sp, #28]
 8007c7e:	2300      	movlt	r3, #0
 8007c80:	4646      	movge	r6, r8
 8007c82:	e730      	b.n	8007ae6 <_dtoa_r+0x71e>
 8007c84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c88:	4646      	mov	r6, r8
 8007c8a:	e735      	b.n	8007af8 <_dtoa_r+0x730>
 8007c8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c8e:	e75c      	b.n	8007b4a <_dtoa_r+0x782>
 8007c90:	2300      	movs	r3, #0
 8007c92:	e788      	b.n	8007ba6 <_dtoa_r+0x7de>
 8007c94:	3fe00000 	.word	0x3fe00000
 8007c98:	40240000 	.word	0x40240000
 8007c9c:	40140000 	.word	0x40140000
 8007ca0:	9b02      	ldr	r3, [sp, #8]
 8007ca2:	e780      	b.n	8007ba6 <_dtoa_r+0x7de>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca8:	e782      	b.n	8007bb0 <_dtoa_r+0x7e8>
 8007caa:	d099      	beq.n	8007be0 <_dtoa_r+0x818>
 8007cac:	9a08      	ldr	r2, [sp, #32]
 8007cae:	331c      	adds	r3, #28
 8007cb0:	441a      	add	r2, r3
 8007cb2:	4498      	add	r8, r3
 8007cb4:	441e      	add	r6, r3
 8007cb6:	9208      	str	r2, [sp, #32]
 8007cb8:	e792      	b.n	8007be0 <_dtoa_r+0x818>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	e7f6      	b.n	8007cac <_dtoa_r+0x8e4>
 8007cbe:	9b07      	ldr	r3, [sp, #28]
 8007cc0:	9704      	str	r7, [sp, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	dc20      	bgt.n	8007d08 <_dtoa_r+0x940>
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	dd1e      	ble.n	8007d0c <_dtoa_r+0x944>
 8007cce:	9b00      	ldr	r3, [sp, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f47f aec0 	bne.w	8007a56 <_dtoa_r+0x68e>
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	2205      	movs	r2, #5
 8007cda:	4658      	mov	r0, fp
 8007cdc:	f000 fa9a 	bl	8008214 <__multadd>
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	4648      	mov	r0, r9
 8007ce6:	f000 fcf7 	bl	80086d8 <__mcmp>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	f77f aeb3 	ble.w	8007a56 <_dtoa_r+0x68e>
 8007cf0:	4656      	mov	r6, sl
 8007cf2:	2331      	movs	r3, #49	@ 0x31
 8007cf4:	f806 3b01 	strb.w	r3, [r6], #1
 8007cf8:	9b04      	ldr	r3, [sp, #16]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	9304      	str	r3, [sp, #16]
 8007cfe:	e6ae      	b.n	8007a5e <_dtoa_r+0x696>
 8007d00:	9c07      	ldr	r4, [sp, #28]
 8007d02:	9704      	str	r7, [sp, #16]
 8007d04:	4625      	mov	r5, r4
 8007d06:	e7f3      	b.n	8007cf0 <_dtoa_r+0x928>
 8007d08:	9b07      	ldr	r3, [sp, #28]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 8104 	beq.w	8007f1c <_dtoa_r+0xb54>
 8007d14:	2e00      	cmp	r6, #0
 8007d16:	dd05      	ble.n	8007d24 <_dtoa_r+0x95c>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4632      	mov	r2, r6
 8007d1c:	4658      	mov	r0, fp
 8007d1e:	f000 fc6f 	bl	8008600 <__lshift>
 8007d22:	4605      	mov	r5, r0
 8007d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d05a      	beq.n	8007de0 <_dtoa_r+0xa18>
 8007d2a:	6869      	ldr	r1, [r5, #4]
 8007d2c:	4658      	mov	r0, fp
 8007d2e:	f000 fa0f 	bl	8008150 <_Balloc>
 8007d32:	4606      	mov	r6, r0
 8007d34:	b928      	cbnz	r0, 8007d42 <_dtoa_r+0x97a>
 8007d36:	4b84      	ldr	r3, [pc, #528]	@ (8007f48 <_dtoa_r+0xb80>)
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d3e:	f7ff bb5a 	b.w	80073f6 <_dtoa_r+0x2e>
 8007d42:	692a      	ldr	r2, [r5, #16]
 8007d44:	3202      	adds	r2, #2
 8007d46:	0092      	lsls	r2, r2, #2
 8007d48:	f105 010c 	add.w	r1, r5, #12
 8007d4c:	300c      	adds	r0, #12
 8007d4e:	f002 f94b 	bl	8009fe8 <memcpy>
 8007d52:	2201      	movs	r2, #1
 8007d54:	4631      	mov	r1, r6
 8007d56:	4658      	mov	r0, fp
 8007d58:	f000 fc52 	bl	8008600 <__lshift>
 8007d5c:	f10a 0301 	add.w	r3, sl, #1
 8007d60:	9307      	str	r3, [sp, #28]
 8007d62:	9b00      	ldr	r3, [sp, #0]
 8007d64:	4453      	add	r3, sl
 8007d66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d68:	9b02      	ldr	r3, [sp, #8]
 8007d6a:	f003 0301 	and.w	r3, r3, #1
 8007d6e:	462f      	mov	r7, r5
 8007d70:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d72:	4605      	mov	r5, r0
 8007d74:	9b07      	ldr	r3, [sp, #28]
 8007d76:	4621      	mov	r1, r4
 8007d78:	3b01      	subs	r3, #1
 8007d7a:	4648      	mov	r0, r9
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	f7ff fa99 	bl	80072b4 <quorem>
 8007d82:	4639      	mov	r1, r7
 8007d84:	9002      	str	r0, [sp, #8]
 8007d86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d8a:	4648      	mov	r0, r9
 8007d8c:	f000 fca4 	bl	80086d8 <__mcmp>
 8007d90:	462a      	mov	r2, r5
 8007d92:	9008      	str	r0, [sp, #32]
 8007d94:	4621      	mov	r1, r4
 8007d96:	4658      	mov	r0, fp
 8007d98:	f000 fcba 	bl	8008710 <__mdiff>
 8007d9c:	68c2      	ldr	r2, [r0, #12]
 8007d9e:	4606      	mov	r6, r0
 8007da0:	bb02      	cbnz	r2, 8007de4 <_dtoa_r+0xa1c>
 8007da2:	4601      	mov	r1, r0
 8007da4:	4648      	mov	r0, r9
 8007da6:	f000 fc97 	bl	80086d8 <__mcmp>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4631      	mov	r1, r6
 8007dae:	4658      	mov	r0, fp
 8007db0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007db2:	f000 fa0d 	bl	80081d0 <_Bfree>
 8007db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dba:	9e07      	ldr	r6, [sp, #28]
 8007dbc:	ea43 0102 	orr.w	r1, r3, r2
 8007dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dc2:	4319      	orrs	r1, r3
 8007dc4:	d110      	bne.n	8007de8 <_dtoa_r+0xa20>
 8007dc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dca:	d029      	beq.n	8007e20 <_dtoa_r+0xa58>
 8007dcc:	9b08      	ldr	r3, [sp, #32]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dd02      	ble.n	8007dd8 <_dtoa_r+0xa10>
 8007dd2:	9b02      	ldr	r3, [sp, #8]
 8007dd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007dd8:	9b00      	ldr	r3, [sp, #0]
 8007dda:	f883 8000 	strb.w	r8, [r3]
 8007dde:	e63f      	b.n	8007a60 <_dtoa_r+0x698>
 8007de0:	4628      	mov	r0, r5
 8007de2:	e7bb      	b.n	8007d5c <_dtoa_r+0x994>
 8007de4:	2201      	movs	r2, #1
 8007de6:	e7e1      	b.n	8007dac <_dtoa_r+0x9e4>
 8007de8:	9b08      	ldr	r3, [sp, #32]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	db04      	blt.n	8007df8 <_dtoa_r+0xa30>
 8007dee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007df0:	430b      	orrs	r3, r1
 8007df2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007df4:	430b      	orrs	r3, r1
 8007df6:	d120      	bne.n	8007e3a <_dtoa_r+0xa72>
 8007df8:	2a00      	cmp	r2, #0
 8007dfa:	dded      	ble.n	8007dd8 <_dtoa_r+0xa10>
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4658      	mov	r0, fp
 8007e02:	f000 fbfd 	bl	8008600 <__lshift>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4681      	mov	r9, r0
 8007e0a:	f000 fc65 	bl	80086d8 <__mcmp>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	dc03      	bgt.n	8007e1a <_dtoa_r+0xa52>
 8007e12:	d1e1      	bne.n	8007dd8 <_dtoa_r+0xa10>
 8007e14:	f018 0f01 	tst.w	r8, #1
 8007e18:	d0de      	beq.n	8007dd8 <_dtoa_r+0xa10>
 8007e1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e1e:	d1d8      	bne.n	8007dd2 <_dtoa_r+0xa0a>
 8007e20:	9a00      	ldr	r2, [sp, #0]
 8007e22:	2339      	movs	r3, #57	@ 0x39
 8007e24:	7013      	strb	r3, [r2, #0]
 8007e26:	4633      	mov	r3, r6
 8007e28:	461e      	mov	r6, r3
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e30:	2a39      	cmp	r2, #57	@ 0x39
 8007e32:	d052      	beq.n	8007eda <_dtoa_r+0xb12>
 8007e34:	3201      	adds	r2, #1
 8007e36:	701a      	strb	r2, [r3, #0]
 8007e38:	e612      	b.n	8007a60 <_dtoa_r+0x698>
 8007e3a:	2a00      	cmp	r2, #0
 8007e3c:	dd07      	ble.n	8007e4e <_dtoa_r+0xa86>
 8007e3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e42:	d0ed      	beq.n	8007e20 <_dtoa_r+0xa58>
 8007e44:	9a00      	ldr	r2, [sp, #0]
 8007e46:	f108 0301 	add.w	r3, r8, #1
 8007e4a:	7013      	strb	r3, [r2, #0]
 8007e4c:	e608      	b.n	8007a60 <_dtoa_r+0x698>
 8007e4e:	9b07      	ldr	r3, [sp, #28]
 8007e50:	9a07      	ldr	r2, [sp, #28]
 8007e52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d028      	beq.n	8007eae <_dtoa_r+0xae6>
 8007e5c:	4649      	mov	r1, r9
 8007e5e:	2300      	movs	r3, #0
 8007e60:	220a      	movs	r2, #10
 8007e62:	4658      	mov	r0, fp
 8007e64:	f000 f9d6 	bl	8008214 <__multadd>
 8007e68:	42af      	cmp	r7, r5
 8007e6a:	4681      	mov	r9, r0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	f04f 020a 	mov.w	r2, #10
 8007e74:	4639      	mov	r1, r7
 8007e76:	4658      	mov	r0, fp
 8007e78:	d107      	bne.n	8007e8a <_dtoa_r+0xac2>
 8007e7a:	f000 f9cb 	bl	8008214 <__multadd>
 8007e7e:	4607      	mov	r7, r0
 8007e80:	4605      	mov	r5, r0
 8007e82:	9b07      	ldr	r3, [sp, #28]
 8007e84:	3301      	adds	r3, #1
 8007e86:	9307      	str	r3, [sp, #28]
 8007e88:	e774      	b.n	8007d74 <_dtoa_r+0x9ac>
 8007e8a:	f000 f9c3 	bl	8008214 <__multadd>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4607      	mov	r7, r0
 8007e92:	2300      	movs	r3, #0
 8007e94:	220a      	movs	r2, #10
 8007e96:	4658      	mov	r0, fp
 8007e98:	f000 f9bc 	bl	8008214 <__multadd>
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	e7f0      	b.n	8007e82 <_dtoa_r+0xaba>
 8007ea0:	9b00      	ldr	r3, [sp, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfcc      	ite	gt
 8007ea6:	461e      	movgt	r6, r3
 8007ea8:	2601      	movle	r6, #1
 8007eaa:	4456      	add	r6, sl
 8007eac:	2700      	movs	r7, #0
 8007eae:	4649      	mov	r1, r9
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	4658      	mov	r0, fp
 8007eb4:	f000 fba4 	bl	8008600 <__lshift>
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4681      	mov	r9, r0
 8007ebc:	f000 fc0c 	bl	80086d8 <__mcmp>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	dcb0      	bgt.n	8007e26 <_dtoa_r+0xa5e>
 8007ec4:	d102      	bne.n	8007ecc <_dtoa_r+0xb04>
 8007ec6:	f018 0f01 	tst.w	r8, #1
 8007eca:	d1ac      	bne.n	8007e26 <_dtoa_r+0xa5e>
 8007ecc:	4633      	mov	r3, r6
 8007ece:	461e      	mov	r6, r3
 8007ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ed4:	2a30      	cmp	r2, #48	@ 0x30
 8007ed6:	d0fa      	beq.n	8007ece <_dtoa_r+0xb06>
 8007ed8:	e5c2      	b.n	8007a60 <_dtoa_r+0x698>
 8007eda:	459a      	cmp	sl, r3
 8007edc:	d1a4      	bne.n	8007e28 <_dtoa_r+0xa60>
 8007ede:	9b04      	ldr	r3, [sp, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	2331      	movs	r3, #49	@ 0x31
 8007ee6:	f88a 3000 	strb.w	r3, [sl]
 8007eea:	e5b9      	b.n	8007a60 <_dtoa_r+0x698>
 8007eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007eee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f4c <_dtoa_r+0xb84>
 8007ef2:	b11b      	cbz	r3, 8007efc <_dtoa_r+0xb34>
 8007ef4:	f10a 0308 	add.w	r3, sl, #8
 8007ef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	4650      	mov	r0, sl
 8007efe:	b019      	add	sp, #100	@ 0x64
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	f77f ae37 	ble.w	8007b7a <_dtoa_r+0x7b2>
 8007f0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f10:	2001      	movs	r0, #1
 8007f12:	e655      	b.n	8007bc0 <_dtoa_r+0x7f8>
 8007f14:	9b00      	ldr	r3, [sp, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f77f aed6 	ble.w	8007cc8 <_dtoa_r+0x900>
 8007f1c:	4656      	mov	r6, sl
 8007f1e:	4621      	mov	r1, r4
 8007f20:	4648      	mov	r0, r9
 8007f22:	f7ff f9c7 	bl	80072b4 <quorem>
 8007f26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f2a:	f806 8b01 	strb.w	r8, [r6], #1
 8007f2e:	9b00      	ldr	r3, [sp, #0]
 8007f30:	eba6 020a 	sub.w	r2, r6, sl
 8007f34:	4293      	cmp	r3, r2
 8007f36:	ddb3      	ble.n	8007ea0 <_dtoa_r+0xad8>
 8007f38:	4649      	mov	r1, r9
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	4658      	mov	r0, fp
 8007f40:	f000 f968 	bl	8008214 <__multadd>
 8007f44:	4681      	mov	r9, r0
 8007f46:	e7ea      	b.n	8007f1e <_dtoa_r+0xb56>
 8007f48:	0800c9cd 	.word	0x0800c9cd
 8007f4c:	0800c951 	.word	0x0800c951

08007f50 <_free_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4605      	mov	r5, r0
 8007f54:	2900      	cmp	r1, #0
 8007f56:	d041      	beq.n	8007fdc <_free_r+0x8c>
 8007f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5c:	1f0c      	subs	r4, r1, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfb8      	it	lt
 8007f62:	18e4      	addlt	r4, r4, r3
 8007f64:	f000 f8e8 	bl	8008138 <__malloc_lock>
 8007f68:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe0 <_free_r+0x90>)
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	b933      	cbnz	r3, 8007f7c <_free_r+0x2c>
 8007f6e:	6063      	str	r3, [r4, #4]
 8007f70:	6014      	str	r4, [r2, #0]
 8007f72:	4628      	mov	r0, r5
 8007f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f78:	f000 b8e4 	b.w	8008144 <__malloc_unlock>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d908      	bls.n	8007f92 <_free_r+0x42>
 8007f80:	6820      	ldr	r0, [r4, #0]
 8007f82:	1821      	adds	r1, r4, r0
 8007f84:	428b      	cmp	r3, r1
 8007f86:	bf01      	itttt	eq
 8007f88:	6819      	ldreq	r1, [r3, #0]
 8007f8a:	685b      	ldreq	r3, [r3, #4]
 8007f8c:	1809      	addeq	r1, r1, r0
 8007f8e:	6021      	streq	r1, [r4, #0]
 8007f90:	e7ed      	b.n	8007f6e <_free_r+0x1e>
 8007f92:	461a      	mov	r2, r3
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b10b      	cbz	r3, 8007f9c <_free_r+0x4c>
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d9fa      	bls.n	8007f92 <_free_r+0x42>
 8007f9c:	6811      	ldr	r1, [r2, #0]
 8007f9e:	1850      	adds	r0, r2, r1
 8007fa0:	42a0      	cmp	r0, r4
 8007fa2:	d10b      	bne.n	8007fbc <_free_r+0x6c>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	4401      	add	r1, r0
 8007fa8:	1850      	adds	r0, r2, r1
 8007faa:	4283      	cmp	r3, r0
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	d1e0      	bne.n	8007f72 <_free_r+0x22>
 8007fb0:	6818      	ldr	r0, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	6053      	str	r3, [r2, #4]
 8007fb6:	4408      	add	r0, r1
 8007fb8:	6010      	str	r0, [r2, #0]
 8007fba:	e7da      	b.n	8007f72 <_free_r+0x22>
 8007fbc:	d902      	bls.n	8007fc4 <_free_r+0x74>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	602b      	str	r3, [r5, #0]
 8007fc2:	e7d6      	b.n	8007f72 <_free_r+0x22>
 8007fc4:	6820      	ldr	r0, [r4, #0]
 8007fc6:	1821      	adds	r1, r4, r0
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	bf04      	itt	eq
 8007fcc:	6819      	ldreq	r1, [r3, #0]
 8007fce:	685b      	ldreq	r3, [r3, #4]
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	bf04      	itt	eq
 8007fd4:	1809      	addeq	r1, r1, r0
 8007fd6:	6021      	streq	r1, [r4, #0]
 8007fd8:	6054      	str	r4, [r2, #4]
 8007fda:	e7ca      	b.n	8007f72 <_free_r+0x22>
 8007fdc:	bd38      	pop	{r3, r4, r5, pc}
 8007fde:	bf00      	nop
 8007fe0:	20008574 	.word	0x20008574

08007fe4 <malloc>:
 8007fe4:	4b02      	ldr	r3, [pc, #8]	@ (8007ff0 <malloc+0xc>)
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	f000 b825 	b.w	8008038 <_malloc_r>
 8007fee:	bf00      	nop
 8007ff0:	20000028 	.word	0x20000028

08007ff4 <sbrk_aligned>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8008034 <sbrk_aligned+0x40>)
 8007ff8:	460c      	mov	r4, r1
 8007ffa:	6831      	ldr	r1, [r6, #0]
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	b911      	cbnz	r1, 8008006 <sbrk_aligned+0x12>
 8008000:	f001 ffe2 	bl	8009fc8 <_sbrk_r>
 8008004:	6030      	str	r0, [r6, #0]
 8008006:	4621      	mov	r1, r4
 8008008:	4628      	mov	r0, r5
 800800a:	f001 ffdd 	bl	8009fc8 <_sbrk_r>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	d103      	bne.n	800801a <sbrk_aligned+0x26>
 8008012:	f04f 34ff 	mov.w	r4, #4294967295
 8008016:	4620      	mov	r0, r4
 8008018:	bd70      	pop	{r4, r5, r6, pc}
 800801a:	1cc4      	adds	r4, r0, #3
 800801c:	f024 0403 	bic.w	r4, r4, #3
 8008020:	42a0      	cmp	r0, r4
 8008022:	d0f8      	beq.n	8008016 <sbrk_aligned+0x22>
 8008024:	1a21      	subs	r1, r4, r0
 8008026:	4628      	mov	r0, r5
 8008028:	f001 ffce 	bl	8009fc8 <_sbrk_r>
 800802c:	3001      	adds	r0, #1
 800802e:	d1f2      	bne.n	8008016 <sbrk_aligned+0x22>
 8008030:	e7ef      	b.n	8008012 <sbrk_aligned+0x1e>
 8008032:	bf00      	nop
 8008034:	20008570 	.word	0x20008570

08008038 <_malloc_r>:
 8008038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800803c:	1ccd      	adds	r5, r1, #3
 800803e:	f025 0503 	bic.w	r5, r5, #3
 8008042:	3508      	adds	r5, #8
 8008044:	2d0c      	cmp	r5, #12
 8008046:	bf38      	it	cc
 8008048:	250c      	movcc	r5, #12
 800804a:	2d00      	cmp	r5, #0
 800804c:	4606      	mov	r6, r0
 800804e:	db01      	blt.n	8008054 <_malloc_r+0x1c>
 8008050:	42a9      	cmp	r1, r5
 8008052:	d904      	bls.n	800805e <_malloc_r+0x26>
 8008054:	230c      	movs	r3, #12
 8008056:	6033      	str	r3, [r6, #0]
 8008058:	2000      	movs	r0, #0
 800805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008134 <_malloc_r+0xfc>
 8008062:	f000 f869 	bl	8008138 <__malloc_lock>
 8008066:	f8d8 3000 	ldr.w	r3, [r8]
 800806a:	461c      	mov	r4, r3
 800806c:	bb44      	cbnz	r4, 80080c0 <_malloc_r+0x88>
 800806e:	4629      	mov	r1, r5
 8008070:	4630      	mov	r0, r6
 8008072:	f7ff ffbf 	bl	8007ff4 <sbrk_aligned>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	4604      	mov	r4, r0
 800807a:	d158      	bne.n	800812e <_malloc_r+0xf6>
 800807c:	f8d8 4000 	ldr.w	r4, [r8]
 8008080:	4627      	mov	r7, r4
 8008082:	2f00      	cmp	r7, #0
 8008084:	d143      	bne.n	800810e <_malloc_r+0xd6>
 8008086:	2c00      	cmp	r4, #0
 8008088:	d04b      	beq.n	8008122 <_malloc_r+0xea>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	4639      	mov	r1, r7
 800808e:	4630      	mov	r0, r6
 8008090:	eb04 0903 	add.w	r9, r4, r3
 8008094:	f001 ff98 	bl	8009fc8 <_sbrk_r>
 8008098:	4581      	cmp	r9, r0
 800809a:	d142      	bne.n	8008122 <_malloc_r+0xea>
 800809c:	6821      	ldr	r1, [r4, #0]
 800809e:	1a6d      	subs	r5, r5, r1
 80080a0:	4629      	mov	r1, r5
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff ffa6 	bl	8007ff4 <sbrk_aligned>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d03a      	beq.n	8008122 <_malloc_r+0xea>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	442b      	add	r3, r5
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	f8d8 3000 	ldr.w	r3, [r8]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	bb62      	cbnz	r2, 8008114 <_malloc_r+0xdc>
 80080ba:	f8c8 7000 	str.w	r7, [r8]
 80080be:	e00f      	b.n	80080e0 <_malloc_r+0xa8>
 80080c0:	6822      	ldr	r2, [r4, #0]
 80080c2:	1b52      	subs	r2, r2, r5
 80080c4:	d420      	bmi.n	8008108 <_malloc_r+0xd0>
 80080c6:	2a0b      	cmp	r2, #11
 80080c8:	d917      	bls.n	80080fa <_malloc_r+0xc2>
 80080ca:	1961      	adds	r1, r4, r5
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	6025      	str	r5, [r4, #0]
 80080d0:	bf18      	it	ne
 80080d2:	6059      	strne	r1, [r3, #4]
 80080d4:	6863      	ldr	r3, [r4, #4]
 80080d6:	bf08      	it	eq
 80080d8:	f8c8 1000 	streq.w	r1, [r8]
 80080dc:	5162      	str	r2, [r4, r5]
 80080de:	604b      	str	r3, [r1, #4]
 80080e0:	4630      	mov	r0, r6
 80080e2:	f000 f82f 	bl	8008144 <__malloc_unlock>
 80080e6:	f104 000b 	add.w	r0, r4, #11
 80080ea:	1d23      	adds	r3, r4, #4
 80080ec:	f020 0007 	bic.w	r0, r0, #7
 80080f0:	1ac2      	subs	r2, r0, r3
 80080f2:	bf1c      	itt	ne
 80080f4:	1a1b      	subne	r3, r3, r0
 80080f6:	50a3      	strne	r3, [r4, r2]
 80080f8:	e7af      	b.n	800805a <_malloc_r+0x22>
 80080fa:	6862      	ldr	r2, [r4, #4]
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	bf0c      	ite	eq
 8008100:	f8c8 2000 	streq.w	r2, [r8]
 8008104:	605a      	strne	r2, [r3, #4]
 8008106:	e7eb      	b.n	80080e0 <_malloc_r+0xa8>
 8008108:	4623      	mov	r3, r4
 800810a:	6864      	ldr	r4, [r4, #4]
 800810c:	e7ae      	b.n	800806c <_malloc_r+0x34>
 800810e:	463c      	mov	r4, r7
 8008110:	687f      	ldr	r7, [r7, #4]
 8008112:	e7b6      	b.n	8008082 <_malloc_r+0x4a>
 8008114:	461a      	mov	r2, r3
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	42a3      	cmp	r3, r4
 800811a:	d1fb      	bne.n	8008114 <_malloc_r+0xdc>
 800811c:	2300      	movs	r3, #0
 800811e:	6053      	str	r3, [r2, #4]
 8008120:	e7de      	b.n	80080e0 <_malloc_r+0xa8>
 8008122:	230c      	movs	r3, #12
 8008124:	6033      	str	r3, [r6, #0]
 8008126:	4630      	mov	r0, r6
 8008128:	f000 f80c 	bl	8008144 <__malloc_unlock>
 800812c:	e794      	b.n	8008058 <_malloc_r+0x20>
 800812e:	6005      	str	r5, [r0, #0]
 8008130:	e7d6      	b.n	80080e0 <_malloc_r+0xa8>
 8008132:	bf00      	nop
 8008134:	20008574 	.word	0x20008574

08008138 <__malloc_lock>:
 8008138:	4801      	ldr	r0, [pc, #4]	@ (8008140 <__malloc_lock+0x8>)
 800813a:	f7ff b8b2 	b.w	80072a2 <__retarget_lock_acquire_recursive>
 800813e:	bf00      	nop
 8008140:	2000856c 	.word	0x2000856c

08008144 <__malloc_unlock>:
 8008144:	4801      	ldr	r0, [pc, #4]	@ (800814c <__malloc_unlock+0x8>)
 8008146:	f7ff b8ad 	b.w	80072a4 <__retarget_lock_release_recursive>
 800814a:	bf00      	nop
 800814c:	2000856c 	.word	0x2000856c

08008150 <_Balloc>:
 8008150:	b570      	push	{r4, r5, r6, lr}
 8008152:	69c6      	ldr	r6, [r0, #28]
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	b976      	cbnz	r6, 8008178 <_Balloc+0x28>
 800815a:	2010      	movs	r0, #16
 800815c:	f7ff ff42 	bl	8007fe4 <malloc>
 8008160:	4602      	mov	r2, r0
 8008162:	61e0      	str	r0, [r4, #28]
 8008164:	b920      	cbnz	r0, 8008170 <_Balloc+0x20>
 8008166:	4b18      	ldr	r3, [pc, #96]	@ (80081c8 <_Balloc+0x78>)
 8008168:	4818      	ldr	r0, [pc, #96]	@ (80081cc <_Balloc+0x7c>)
 800816a:	216b      	movs	r1, #107	@ 0x6b
 800816c:	f001 ff54 	bl	800a018 <__assert_func>
 8008170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008174:	6006      	str	r6, [r0, #0]
 8008176:	60c6      	str	r6, [r0, #12]
 8008178:	69e6      	ldr	r6, [r4, #28]
 800817a:	68f3      	ldr	r3, [r6, #12]
 800817c:	b183      	cbz	r3, 80081a0 <_Balloc+0x50>
 800817e:	69e3      	ldr	r3, [r4, #28]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008186:	b9b8      	cbnz	r0, 80081b8 <_Balloc+0x68>
 8008188:	2101      	movs	r1, #1
 800818a:	fa01 f605 	lsl.w	r6, r1, r5
 800818e:	1d72      	adds	r2, r6, #5
 8008190:	0092      	lsls	r2, r2, #2
 8008192:	4620      	mov	r0, r4
 8008194:	f001 ff5e 	bl	800a054 <_calloc_r>
 8008198:	b160      	cbz	r0, 80081b4 <_Balloc+0x64>
 800819a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800819e:	e00e      	b.n	80081be <_Balloc+0x6e>
 80081a0:	2221      	movs	r2, #33	@ 0x21
 80081a2:	2104      	movs	r1, #4
 80081a4:	4620      	mov	r0, r4
 80081a6:	f001 ff55 	bl	800a054 <_calloc_r>
 80081aa:	69e3      	ldr	r3, [r4, #28]
 80081ac:	60f0      	str	r0, [r6, #12]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e4      	bne.n	800817e <_Balloc+0x2e>
 80081b4:	2000      	movs	r0, #0
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	6802      	ldr	r2, [r0, #0]
 80081ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081be:	2300      	movs	r3, #0
 80081c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081c4:	e7f7      	b.n	80081b6 <_Balloc+0x66>
 80081c6:	bf00      	nop
 80081c8:	0800c95e 	.word	0x0800c95e
 80081cc:	0800c9de 	.word	0x0800c9de

080081d0 <_Bfree>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	69c6      	ldr	r6, [r0, #28]
 80081d4:	4605      	mov	r5, r0
 80081d6:	460c      	mov	r4, r1
 80081d8:	b976      	cbnz	r6, 80081f8 <_Bfree+0x28>
 80081da:	2010      	movs	r0, #16
 80081dc:	f7ff ff02 	bl	8007fe4 <malloc>
 80081e0:	4602      	mov	r2, r0
 80081e2:	61e8      	str	r0, [r5, #28]
 80081e4:	b920      	cbnz	r0, 80081f0 <_Bfree+0x20>
 80081e6:	4b09      	ldr	r3, [pc, #36]	@ (800820c <_Bfree+0x3c>)
 80081e8:	4809      	ldr	r0, [pc, #36]	@ (8008210 <_Bfree+0x40>)
 80081ea:	218f      	movs	r1, #143	@ 0x8f
 80081ec:	f001 ff14 	bl	800a018 <__assert_func>
 80081f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081f4:	6006      	str	r6, [r0, #0]
 80081f6:	60c6      	str	r6, [r0, #12]
 80081f8:	b13c      	cbz	r4, 800820a <_Bfree+0x3a>
 80081fa:	69eb      	ldr	r3, [r5, #28]
 80081fc:	6862      	ldr	r2, [r4, #4]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008204:	6021      	str	r1, [r4, #0]
 8008206:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800820a:	bd70      	pop	{r4, r5, r6, pc}
 800820c:	0800c95e 	.word	0x0800c95e
 8008210:	0800c9de 	.word	0x0800c9de

08008214 <__multadd>:
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	690d      	ldr	r5, [r1, #16]
 800821a:	4607      	mov	r7, r0
 800821c:	460c      	mov	r4, r1
 800821e:	461e      	mov	r6, r3
 8008220:	f101 0c14 	add.w	ip, r1, #20
 8008224:	2000      	movs	r0, #0
 8008226:	f8dc 3000 	ldr.w	r3, [ip]
 800822a:	b299      	uxth	r1, r3
 800822c:	fb02 6101 	mla	r1, r2, r1, r6
 8008230:	0c1e      	lsrs	r6, r3, #16
 8008232:	0c0b      	lsrs	r3, r1, #16
 8008234:	fb02 3306 	mla	r3, r2, r6, r3
 8008238:	b289      	uxth	r1, r1
 800823a:	3001      	adds	r0, #1
 800823c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008240:	4285      	cmp	r5, r0
 8008242:	f84c 1b04 	str.w	r1, [ip], #4
 8008246:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800824a:	dcec      	bgt.n	8008226 <__multadd+0x12>
 800824c:	b30e      	cbz	r6, 8008292 <__multadd+0x7e>
 800824e:	68a3      	ldr	r3, [r4, #8]
 8008250:	42ab      	cmp	r3, r5
 8008252:	dc19      	bgt.n	8008288 <__multadd+0x74>
 8008254:	6861      	ldr	r1, [r4, #4]
 8008256:	4638      	mov	r0, r7
 8008258:	3101      	adds	r1, #1
 800825a:	f7ff ff79 	bl	8008150 <_Balloc>
 800825e:	4680      	mov	r8, r0
 8008260:	b928      	cbnz	r0, 800826e <__multadd+0x5a>
 8008262:	4602      	mov	r2, r0
 8008264:	4b0c      	ldr	r3, [pc, #48]	@ (8008298 <__multadd+0x84>)
 8008266:	480d      	ldr	r0, [pc, #52]	@ (800829c <__multadd+0x88>)
 8008268:	21ba      	movs	r1, #186	@ 0xba
 800826a:	f001 fed5 	bl	800a018 <__assert_func>
 800826e:	6922      	ldr	r2, [r4, #16]
 8008270:	3202      	adds	r2, #2
 8008272:	f104 010c 	add.w	r1, r4, #12
 8008276:	0092      	lsls	r2, r2, #2
 8008278:	300c      	adds	r0, #12
 800827a:	f001 feb5 	bl	8009fe8 <memcpy>
 800827e:	4621      	mov	r1, r4
 8008280:	4638      	mov	r0, r7
 8008282:	f7ff ffa5 	bl	80081d0 <_Bfree>
 8008286:	4644      	mov	r4, r8
 8008288:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800828c:	3501      	adds	r5, #1
 800828e:	615e      	str	r6, [r3, #20]
 8008290:	6125      	str	r5, [r4, #16]
 8008292:	4620      	mov	r0, r4
 8008294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008298:	0800c9cd 	.word	0x0800c9cd
 800829c:	0800c9de 	.word	0x0800c9de

080082a0 <__s2b>:
 80082a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082a4:	460c      	mov	r4, r1
 80082a6:	4615      	mov	r5, r2
 80082a8:	461f      	mov	r7, r3
 80082aa:	2209      	movs	r2, #9
 80082ac:	3308      	adds	r3, #8
 80082ae:	4606      	mov	r6, r0
 80082b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80082b4:	2100      	movs	r1, #0
 80082b6:	2201      	movs	r2, #1
 80082b8:	429a      	cmp	r2, r3
 80082ba:	db09      	blt.n	80082d0 <__s2b+0x30>
 80082bc:	4630      	mov	r0, r6
 80082be:	f7ff ff47 	bl	8008150 <_Balloc>
 80082c2:	b940      	cbnz	r0, 80082d6 <__s2b+0x36>
 80082c4:	4602      	mov	r2, r0
 80082c6:	4b19      	ldr	r3, [pc, #100]	@ (800832c <__s2b+0x8c>)
 80082c8:	4819      	ldr	r0, [pc, #100]	@ (8008330 <__s2b+0x90>)
 80082ca:	21d3      	movs	r1, #211	@ 0xd3
 80082cc:	f001 fea4 	bl	800a018 <__assert_func>
 80082d0:	0052      	lsls	r2, r2, #1
 80082d2:	3101      	adds	r1, #1
 80082d4:	e7f0      	b.n	80082b8 <__s2b+0x18>
 80082d6:	9b08      	ldr	r3, [sp, #32]
 80082d8:	6143      	str	r3, [r0, #20]
 80082da:	2d09      	cmp	r5, #9
 80082dc:	f04f 0301 	mov.w	r3, #1
 80082e0:	6103      	str	r3, [r0, #16]
 80082e2:	dd16      	ble.n	8008312 <__s2b+0x72>
 80082e4:	f104 0909 	add.w	r9, r4, #9
 80082e8:	46c8      	mov	r8, r9
 80082ea:	442c      	add	r4, r5
 80082ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80082f0:	4601      	mov	r1, r0
 80082f2:	3b30      	subs	r3, #48	@ 0x30
 80082f4:	220a      	movs	r2, #10
 80082f6:	4630      	mov	r0, r6
 80082f8:	f7ff ff8c 	bl	8008214 <__multadd>
 80082fc:	45a0      	cmp	r8, r4
 80082fe:	d1f5      	bne.n	80082ec <__s2b+0x4c>
 8008300:	f1a5 0408 	sub.w	r4, r5, #8
 8008304:	444c      	add	r4, r9
 8008306:	1b2d      	subs	r5, r5, r4
 8008308:	1963      	adds	r3, r4, r5
 800830a:	42bb      	cmp	r3, r7
 800830c:	db04      	blt.n	8008318 <__s2b+0x78>
 800830e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008312:	340a      	adds	r4, #10
 8008314:	2509      	movs	r5, #9
 8008316:	e7f6      	b.n	8008306 <__s2b+0x66>
 8008318:	f814 3b01 	ldrb.w	r3, [r4], #1
 800831c:	4601      	mov	r1, r0
 800831e:	3b30      	subs	r3, #48	@ 0x30
 8008320:	220a      	movs	r2, #10
 8008322:	4630      	mov	r0, r6
 8008324:	f7ff ff76 	bl	8008214 <__multadd>
 8008328:	e7ee      	b.n	8008308 <__s2b+0x68>
 800832a:	bf00      	nop
 800832c:	0800c9cd 	.word	0x0800c9cd
 8008330:	0800c9de 	.word	0x0800c9de

08008334 <__hi0bits>:
 8008334:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008338:	4603      	mov	r3, r0
 800833a:	bf36      	itet	cc
 800833c:	0403      	lslcc	r3, r0, #16
 800833e:	2000      	movcs	r0, #0
 8008340:	2010      	movcc	r0, #16
 8008342:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008346:	bf3c      	itt	cc
 8008348:	021b      	lslcc	r3, r3, #8
 800834a:	3008      	addcc	r0, #8
 800834c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008350:	bf3c      	itt	cc
 8008352:	011b      	lslcc	r3, r3, #4
 8008354:	3004      	addcc	r0, #4
 8008356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800835a:	bf3c      	itt	cc
 800835c:	009b      	lslcc	r3, r3, #2
 800835e:	3002      	addcc	r0, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	db05      	blt.n	8008370 <__hi0bits+0x3c>
 8008364:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008368:	f100 0001 	add.w	r0, r0, #1
 800836c:	bf08      	it	eq
 800836e:	2020      	moveq	r0, #32
 8008370:	4770      	bx	lr

08008372 <__lo0bits>:
 8008372:	6803      	ldr	r3, [r0, #0]
 8008374:	4602      	mov	r2, r0
 8008376:	f013 0007 	ands.w	r0, r3, #7
 800837a:	d00b      	beq.n	8008394 <__lo0bits+0x22>
 800837c:	07d9      	lsls	r1, r3, #31
 800837e:	d421      	bmi.n	80083c4 <__lo0bits+0x52>
 8008380:	0798      	lsls	r0, r3, #30
 8008382:	bf49      	itett	mi
 8008384:	085b      	lsrmi	r3, r3, #1
 8008386:	089b      	lsrpl	r3, r3, #2
 8008388:	2001      	movmi	r0, #1
 800838a:	6013      	strmi	r3, [r2, #0]
 800838c:	bf5c      	itt	pl
 800838e:	6013      	strpl	r3, [r2, #0]
 8008390:	2002      	movpl	r0, #2
 8008392:	4770      	bx	lr
 8008394:	b299      	uxth	r1, r3
 8008396:	b909      	cbnz	r1, 800839c <__lo0bits+0x2a>
 8008398:	0c1b      	lsrs	r3, r3, #16
 800839a:	2010      	movs	r0, #16
 800839c:	b2d9      	uxtb	r1, r3
 800839e:	b909      	cbnz	r1, 80083a4 <__lo0bits+0x32>
 80083a0:	3008      	adds	r0, #8
 80083a2:	0a1b      	lsrs	r3, r3, #8
 80083a4:	0719      	lsls	r1, r3, #28
 80083a6:	bf04      	itt	eq
 80083a8:	091b      	lsreq	r3, r3, #4
 80083aa:	3004      	addeq	r0, #4
 80083ac:	0799      	lsls	r1, r3, #30
 80083ae:	bf04      	itt	eq
 80083b0:	089b      	lsreq	r3, r3, #2
 80083b2:	3002      	addeq	r0, #2
 80083b4:	07d9      	lsls	r1, r3, #31
 80083b6:	d403      	bmi.n	80083c0 <__lo0bits+0x4e>
 80083b8:	085b      	lsrs	r3, r3, #1
 80083ba:	f100 0001 	add.w	r0, r0, #1
 80083be:	d003      	beq.n	80083c8 <__lo0bits+0x56>
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	4770      	bx	lr
 80083c4:	2000      	movs	r0, #0
 80083c6:	4770      	bx	lr
 80083c8:	2020      	movs	r0, #32
 80083ca:	4770      	bx	lr

080083cc <__i2b>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	460c      	mov	r4, r1
 80083d0:	2101      	movs	r1, #1
 80083d2:	f7ff febd 	bl	8008150 <_Balloc>
 80083d6:	4602      	mov	r2, r0
 80083d8:	b928      	cbnz	r0, 80083e6 <__i2b+0x1a>
 80083da:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <__i2b+0x24>)
 80083dc:	4805      	ldr	r0, [pc, #20]	@ (80083f4 <__i2b+0x28>)
 80083de:	f240 1145 	movw	r1, #325	@ 0x145
 80083e2:	f001 fe19 	bl	800a018 <__assert_func>
 80083e6:	2301      	movs	r3, #1
 80083e8:	6144      	str	r4, [r0, #20]
 80083ea:	6103      	str	r3, [r0, #16]
 80083ec:	bd10      	pop	{r4, pc}
 80083ee:	bf00      	nop
 80083f0:	0800c9cd 	.word	0x0800c9cd
 80083f4:	0800c9de 	.word	0x0800c9de

080083f8 <__multiply>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	4614      	mov	r4, r2
 80083fe:	690a      	ldr	r2, [r1, #16]
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	429a      	cmp	r2, r3
 8008404:	bfa8      	it	ge
 8008406:	4623      	movge	r3, r4
 8008408:	460f      	mov	r7, r1
 800840a:	bfa4      	itt	ge
 800840c:	460c      	movge	r4, r1
 800840e:	461f      	movge	r7, r3
 8008410:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008414:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008418:	68a3      	ldr	r3, [r4, #8]
 800841a:	6861      	ldr	r1, [r4, #4]
 800841c:	eb0a 0609 	add.w	r6, sl, r9
 8008420:	42b3      	cmp	r3, r6
 8008422:	b085      	sub	sp, #20
 8008424:	bfb8      	it	lt
 8008426:	3101      	addlt	r1, #1
 8008428:	f7ff fe92 	bl	8008150 <_Balloc>
 800842c:	b930      	cbnz	r0, 800843c <__multiply+0x44>
 800842e:	4602      	mov	r2, r0
 8008430:	4b44      	ldr	r3, [pc, #272]	@ (8008544 <__multiply+0x14c>)
 8008432:	4845      	ldr	r0, [pc, #276]	@ (8008548 <__multiply+0x150>)
 8008434:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008438:	f001 fdee 	bl	800a018 <__assert_func>
 800843c:	f100 0514 	add.w	r5, r0, #20
 8008440:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008444:	462b      	mov	r3, r5
 8008446:	2200      	movs	r2, #0
 8008448:	4543      	cmp	r3, r8
 800844a:	d321      	bcc.n	8008490 <__multiply+0x98>
 800844c:	f107 0114 	add.w	r1, r7, #20
 8008450:	f104 0214 	add.w	r2, r4, #20
 8008454:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008458:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800845c:	9302      	str	r3, [sp, #8]
 800845e:	1b13      	subs	r3, r2, r4
 8008460:	3b15      	subs	r3, #21
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	3304      	adds	r3, #4
 8008468:	f104 0715 	add.w	r7, r4, #21
 800846c:	42ba      	cmp	r2, r7
 800846e:	bf38      	it	cc
 8008470:	2304      	movcc	r3, #4
 8008472:	9301      	str	r3, [sp, #4]
 8008474:	9b02      	ldr	r3, [sp, #8]
 8008476:	9103      	str	r1, [sp, #12]
 8008478:	428b      	cmp	r3, r1
 800847a:	d80c      	bhi.n	8008496 <__multiply+0x9e>
 800847c:	2e00      	cmp	r6, #0
 800847e:	dd03      	ble.n	8008488 <__multiply+0x90>
 8008480:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008484:	2b00      	cmp	r3, #0
 8008486:	d05b      	beq.n	8008540 <__multiply+0x148>
 8008488:	6106      	str	r6, [r0, #16]
 800848a:	b005      	add	sp, #20
 800848c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008490:	f843 2b04 	str.w	r2, [r3], #4
 8008494:	e7d8      	b.n	8008448 <__multiply+0x50>
 8008496:	f8b1 a000 	ldrh.w	sl, [r1]
 800849a:	f1ba 0f00 	cmp.w	sl, #0
 800849e:	d024      	beq.n	80084ea <__multiply+0xf2>
 80084a0:	f104 0e14 	add.w	lr, r4, #20
 80084a4:	46a9      	mov	r9, r5
 80084a6:	f04f 0c00 	mov.w	ip, #0
 80084aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084ae:	f8d9 3000 	ldr.w	r3, [r9]
 80084b2:	fa1f fb87 	uxth.w	fp, r7
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80084bc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80084c0:	f8d9 7000 	ldr.w	r7, [r9]
 80084c4:	4463      	add	r3, ip
 80084c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084ca:	fb0a c70b 	mla	r7, sl, fp, ip
 80084ce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80084d8:	4572      	cmp	r2, lr
 80084da:	f849 3b04 	str.w	r3, [r9], #4
 80084de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084e2:	d8e2      	bhi.n	80084aa <__multiply+0xb2>
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	f845 c003 	str.w	ip, [r5, r3]
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80084f0:	3104      	adds	r1, #4
 80084f2:	f1b9 0f00 	cmp.w	r9, #0
 80084f6:	d021      	beq.n	800853c <__multiply+0x144>
 80084f8:	682b      	ldr	r3, [r5, #0]
 80084fa:	f104 0c14 	add.w	ip, r4, #20
 80084fe:	46ae      	mov	lr, r5
 8008500:	f04f 0a00 	mov.w	sl, #0
 8008504:	f8bc b000 	ldrh.w	fp, [ip]
 8008508:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800850c:	fb09 770b 	mla	r7, r9, fp, r7
 8008510:	4457      	add	r7, sl
 8008512:	b29b      	uxth	r3, r3
 8008514:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008518:	f84e 3b04 	str.w	r3, [lr], #4
 800851c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008524:	f8be 3000 	ldrh.w	r3, [lr]
 8008528:	fb09 330a 	mla	r3, r9, sl, r3
 800852c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008530:	4562      	cmp	r2, ip
 8008532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008536:	d8e5      	bhi.n	8008504 <__multiply+0x10c>
 8008538:	9f01      	ldr	r7, [sp, #4]
 800853a:	51eb      	str	r3, [r5, r7]
 800853c:	3504      	adds	r5, #4
 800853e:	e799      	b.n	8008474 <__multiply+0x7c>
 8008540:	3e01      	subs	r6, #1
 8008542:	e79b      	b.n	800847c <__multiply+0x84>
 8008544:	0800c9cd 	.word	0x0800c9cd
 8008548:	0800c9de 	.word	0x0800c9de

0800854c <__pow5mult>:
 800854c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008550:	4615      	mov	r5, r2
 8008552:	f012 0203 	ands.w	r2, r2, #3
 8008556:	4607      	mov	r7, r0
 8008558:	460e      	mov	r6, r1
 800855a:	d007      	beq.n	800856c <__pow5mult+0x20>
 800855c:	4c25      	ldr	r4, [pc, #148]	@ (80085f4 <__pow5mult+0xa8>)
 800855e:	3a01      	subs	r2, #1
 8008560:	2300      	movs	r3, #0
 8008562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008566:	f7ff fe55 	bl	8008214 <__multadd>
 800856a:	4606      	mov	r6, r0
 800856c:	10ad      	asrs	r5, r5, #2
 800856e:	d03d      	beq.n	80085ec <__pow5mult+0xa0>
 8008570:	69fc      	ldr	r4, [r7, #28]
 8008572:	b97c      	cbnz	r4, 8008594 <__pow5mult+0x48>
 8008574:	2010      	movs	r0, #16
 8008576:	f7ff fd35 	bl	8007fe4 <malloc>
 800857a:	4602      	mov	r2, r0
 800857c:	61f8      	str	r0, [r7, #28]
 800857e:	b928      	cbnz	r0, 800858c <__pow5mult+0x40>
 8008580:	4b1d      	ldr	r3, [pc, #116]	@ (80085f8 <__pow5mult+0xac>)
 8008582:	481e      	ldr	r0, [pc, #120]	@ (80085fc <__pow5mult+0xb0>)
 8008584:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008588:	f001 fd46 	bl	800a018 <__assert_func>
 800858c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008590:	6004      	str	r4, [r0, #0]
 8008592:	60c4      	str	r4, [r0, #12]
 8008594:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800859c:	b94c      	cbnz	r4, 80085b2 <__pow5mult+0x66>
 800859e:	f240 2171 	movw	r1, #625	@ 0x271
 80085a2:	4638      	mov	r0, r7
 80085a4:	f7ff ff12 	bl	80083cc <__i2b>
 80085a8:	2300      	movs	r3, #0
 80085aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80085ae:	4604      	mov	r4, r0
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	f04f 0900 	mov.w	r9, #0
 80085b6:	07eb      	lsls	r3, r5, #31
 80085b8:	d50a      	bpl.n	80085d0 <__pow5mult+0x84>
 80085ba:	4631      	mov	r1, r6
 80085bc:	4622      	mov	r2, r4
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff ff1a 	bl	80083f8 <__multiply>
 80085c4:	4631      	mov	r1, r6
 80085c6:	4680      	mov	r8, r0
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff fe01 	bl	80081d0 <_Bfree>
 80085ce:	4646      	mov	r6, r8
 80085d0:	106d      	asrs	r5, r5, #1
 80085d2:	d00b      	beq.n	80085ec <__pow5mult+0xa0>
 80085d4:	6820      	ldr	r0, [r4, #0]
 80085d6:	b938      	cbnz	r0, 80085e8 <__pow5mult+0x9c>
 80085d8:	4622      	mov	r2, r4
 80085da:	4621      	mov	r1, r4
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ff0b 	bl	80083f8 <__multiply>
 80085e2:	6020      	str	r0, [r4, #0]
 80085e4:	f8c0 9000 	str.w	r9, [r0]
 80085e8:	4604      	mov	r4, r0
 80085ea:	e7e4      	b.n	80085b6 <__pow5mult+0x6a>
 80085ec:	4630      	mov	r0, r6
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f2:	bf00      	nop
 80085f4:	0800ca38 	.word	0x0800ca38
 80085f8:	0800c95e 	.word	0x0800c95e
 80085fc:	0800c9de 	.word	0x0800c9de

08008600 <__lshift>:
 8008600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008604:	460c      	mov	r4, r1
 8008606:	6849      	ldr	r1, [r1, #4]
 8008608:	6923      	ldr	r3, [r4, #16]
 800860a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800860e:	68a3      	ldr	r3, [r4, #8]
 8008610:	4607      	mov	r7, r0
 8008612:	4691      	mov	r9, r2
 8008614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008618:	f108 0601 	add.w	r6, r8, #1
 800861c:	42b3      	cmp	r3, r6
 800861e:	db0b      	blt.n	8008638 <__lshift+0x38>
 8008620:	4638      	mov	r0, r7
 8008622:	f7ff fd95 	bl	8008150 <_Balloc>
 8008626:	4605      	mov	r5, r0
 8008628:	b948      	cbnz	r0, 800863e <__lshift+0x3e>
 800862a:	4602      	mov	r2, r0
 800862c:	4b28      	ldr	r3, [pc, #160]	@ (80086d0 <__lshift+0xd0>)
 800862e:	4829      	ldr	r0, [pc, #164]	@ (80086d4 <__lshift+0xd4>)
 8008630:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008634:	f001 fcf0 	bl	800a018 <__assert_func>
 8008638:	3101      	adds	r1, #1
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	e7ee      	b.n	800861c <__lshift+0x1c>
 800863e:	2300      	movs	r3, #0
 8008640:	f100 0114 	add.w	r1, r0, #20
 8008644:	f100 0210 	add.w	r2, r0, #16
 8008648:	4618      	mov	r0, r3
 800864a:	4553      	cmp	r3, sl
 800864c:	db33      	blt.n	80086b6 <__lshift+0xb6>
 800864e:	6920      	ldr	r0, [r4, #16]
 8008650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008654:	f104 0314 	add.w	r3, r4, #20
 8008658:	f019 091f 	ands.w	r9, r9, #31
 800865c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008664:	d02b      	beq.n	80086be <__lshift+0xbe>
 8008666:	f1c9 0e20 	rsb	lr, r9, #32
 800866a:	468a      	mov	sl, r1
 800866c:	2200      	movs	r2, #0
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	fa00 f009 	lsl.w	r0, r0, r9
 8008674:	4310      	orrs	r0, r2
 8008676:	f84a 0b04 	str.w	r0, [sl], #4
 800867a:	f853 2b04 	ldr.w	r2, [r3], #4
 800867e:	459c      	cmp	ip, r3
 8008680:	fa22 f20e 	lsr.w	r2, r2, lr
 8008684:	d8f3      	bhi.n	800866e <__lshift+0x6e>
 8008686:	ebac 0304 	sub.w	r3, ip, r4
 800868a:	3b15      	subs	r3, #21
 800868c:	f023 0303 	bic.w	r3, r3, #3
 8008690:	3304      	adds	r3, #4
 8008692:	f104 0015 	add.w	r0, r4, #21
 8008696:	4584      	cmp	ip, r0
 8008698:	bf38      	it	cc
 800869a:	2304      	movcc	r3, #4
 800869c:	50ca      	str	r2, [r1, r3]
 800869e:	b10a      	cbz	r2, 80086a4 <__lshift+0xa4>
 80086a0:	f108 0602 	add.w	r6, r8, #2
 80086a4:	3e01      	subs	r6, #1
 80086a6:	4638      	mov	r0, r7
 80086a8:	612e      	str	r6, [r5, #16]
 80086aa:	4621      	mov	r1, r4
 80086ac:	f7ff fd90 	bl	80081d0 <_Bfree>
 80086b0:	4628      	mov	r0, r5
 80086b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80086ba:	3301      	adds	r3, #1
 80086bc:	e7c5      	b.n	800864a <__lshift+0x4a>
 80086be:	3904      	subs	r1, #4
 80086c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80086c8:	459c      	cmp	ip, r3
 80086ca:	d8f9      	bhi.n	80086c0 <__lshift+0xc0>
 80086cc:	e7ea      	b.n	80086a4 <__lshift+0xa4>
 80086ce:	bf00      	nop
 80086d0:	0800c9cd 	.word	0x0800c9cd
 80086d4:	0800c9de 	.word	0x0800c9de

080086d8 <__mcmp>:
 80086d8:	690a      	ldr	r2, [r1, #16]
 80086da:	4603      	mov	r3, r0
 80086dc:	6900      	ldr	r0, [r0, #16]
 80086de:	1a80      	subs	r0, r0, r2
 80086e0:	b530      	push	{r4, r5, lr}
 80086e2:	d10e      	bne.n	8008702 <__mcmp+0x2a>
 80086e4:	3314      	adds	r3, #20
 80086e6:	3114      	adds	r1, #20
 80086e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086f8:	4295      	cmp	r5, r2
 80086fa:	d003      	beq.n	8008704 <__mcmp+0x2c>
 80086fc:	d205      	bcs.n	800870a <__mcmp+0x32>
 80086fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008702:	bd30      	pop	{r4, r5, pc}
 8008704:	42a3      	cmp	r3, r4
 8008706:	d3f3      	bcc.n	80086f0 <__mcmp+0x18>
 8008708:	e7fb      	b.n	8008702 <__mcmp+0x2a>
 800870a:	2001      	movs	r0, #1
 800870c:	e7f9      	b.n	8008702 <__mcmp+0x2a>
	...

08008710 <__mdiff>:
 8008710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	4689      	mov	r9, r1
 8008716:	4606      	mov	r6, r0
 8008718:	4611      	mov	r1, r2
 800871a:	4648      	mov	r0, r9
 800871c:	4614      	mov	r4, r2
 800871e:	f7ff ffdb 	bl	80086d8 <__mcmp>
 8008722:	1e05      	subs	r5, r0, #0
 8008724:	d112      	bne.n	800874c <__mdiff+0x3c>
 8008726:	4629      	mov	r1, r5
 8008728:	4630      	mov	r0, r6
 800872a:	f7ff fd11 	bl	8008150 <_Balloc>
 800872e:	4602      	mov	r2, r0
 8008730:	b928      	cbnz	r0, 800873e <__mdiff+0x2e>
 8008732:	4b3f      	ldr	r3, [pc, #252]	@ (8008830 <__mdiff+0x120>)
 8008734:	f240 2137 	movw	r1, #567	@ 0x237
 8008738:	483e      	ldr	r0, [pc, #248]	@ (8008834 <__mdiff+0x124>)
 800873a:	f001 fc6d 	bl	800a018 <__assert_func>
 800873e:	2301      	movs	r3, #1
 8008740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008744:	4610      	mov	r0, r2
 8008746:	b003      	add	sp, #12
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	bfbc      	itt	lt
 800874e:	464b      	movlt	r3, r9
 8008750:	46a1      	movlt	r9, r4
 8008752:	4630      	mov	r0, r6
 8008754:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008758:	bfba      	itte	lt
 800875a:	461c      	movlt	r4, r3
 800875c:	2501      	movlt	r5, #1
 800875e:	2500      	movge	r5, #0
 8008760:	f7ff fcf6 	bl	8008150 <_Balloc>
 8008764:	4602      	mov	r2, r0
 8008766:	b918      	cbnz	r0, 8008770 <__mdiff+0x60>
 8008768:	4b31      	ldr	r3, [pc, #196]	@ (8008830 <__mdiff+0x120>)
 800876a:	f240 2145 	movw	r1, #581	@ 0x245
 800876e:	e7e3      	b.n	8008738 <__mdiff+0x28>
 8008770:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008774:	6926      	ldr	r6, [r4, #16]
 8008776:	60c5      	str	r5, [r0, #12]
 8008778:	f109 0310 	add.w	r3, r9, #16
 800877c:	f109 0514 	add.w	r5, r9, #20
 8008780:	f104 0e14 	add.w	lr, r4, #20
 8008784:	f100 0b14 	add.w	fp, r0, #20
 8008788:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800878c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	46d9      	mov	r9, fp
 8008794:	f04f 0c00 	mov.w	ip, #0
 8008798:	9b01      	ldr	r3, [sp, #4]
 800879a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800879e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	fa1f f38a 	uxth.w	r3, sl
 80087a8:	4619      	mov	r1, r3
 80087aa:	b283      	uxth	r3, r0
 80087ac:	1acb      	subs	r3, r1, r3
 80087ae:	0c00      	lsrs	r0, r0, #16
 80087b0:	4463      	add	r3, ip
 80087b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087c0:	4576      	cmp	r6, lr
 80087c2:	f849 3b04 	str.w	r3, [r9], #4
 80087c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087ca:	d8e5      	bhi.n	8008798 <__mdiff+0x88>
 80087cc:	1b33      	subs	r3, r6, r4
 80087ce:	3b15      	subs	r3, #21
 80087d0:	f023 0303 	bic.w	r3, r3, #3
 80087d4:	3415      	adds	r4, #21
 80087d6:	3304      	adds	r3, #4
 80087d8:	42a6      	cmp	r6, r4
 80087da:	bf38      	it	cc
 80087dc:	2304      	movcc	r3, #4
 80087de:	441d      	add	r5, r3
 80087e0:	445b      	add	r3, fp
 80087e2:	461e      	mov	r6, r3
 80087e4:	462c      	mov	r4, r5
 80087e6:	4544      	cmp	r4, r8
 80087e8:	d30e      	bcc.n	8008808 <__mdiff+0xf8>
 80087ea:	f108 0103 	add.w	r1, r8, #3
 80087ee:	1b49      	subs	r1, r1, r5
 80087f0:	f021 0103 	bic.w	r1, r1, #3
 80087f4:	3d03      	subs	r5, #3
 80087f6:	45a8      	cmp	r8, r5
 80087f8:	bf38      	it	cc
 80087fa:	2100      	movcc	r1, #0
 80087fc:	440b      	add	r3, r1
 80087fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008802:	b191      	cbz	r1, 800882a <__mdiff+0x11a>
 8008804:	6117      	str	r7, [r2, #16]
 8008806:	e79d      	b.n	8008744 <__mdiff+0x34>
 8008808:	f854 1b04 	ldr.w	r1, [r4], #4
 800880c:	46e6      	mov	lr, ip
 800880e:	0c08      	lsrs	r0, r1, #16
 8008810:	fa1c fc81 	uxtah	ip, ip, r1
 8008814:	4471      	add	r1, lr
 8008816:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800881a:	b289      	uxth	r1, r1
 800881c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008820:	f846 1b04 	str.w	r1, [r6], #4
 8008824:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008828:	e7dd      	b.n	80087e6 <__mdiff+0xd6>
 800882a:	3f01      	subs	r7, #1
 800882c:	e7e7      	b.n	80087fe <__mdiff+0xee>
 800882e:	bf00      	nop
 8008830:	0800c9cd 	.word	0x0800c9cd
 8008834:	0800c9de 	.word	0x0800c9de

08008838 <__ulp>:
 8008838:	b082      	sub	sp, #8
 800883a:	ed8d 0b00 	vstr	d0, [sp]
 800883e:	9a01      	ldr	r2, [sp, #4]
 8008840:	4b0f      	ldr	r3, [pc, #60]	@ (8008880 <__ulp+0x48>)
 8008842:	4013      	ands	r3, r2
 8008844:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008848:	2b00      	cmp	r3, #0
 800884a:	dc08      	bgt.n	800885e <__ulp+0x26>
 800884c:	425b      	negs	r3, r3
 800884e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008852:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008856:	da04      	bge.n	8008862 <__ulp+0x2a>
 8008858:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800885c:	4113      	asrs	r3, r2
 800885e:	2200      	movs	r2, #0
 8008860:	e008      	b.n	8008874 <__ulp+0x3c>
 8008862:	f1a2 0314 	sub.w	r3, r2, #20
 8008866:	2b1e      	cmp	r3, #30
 8008868:	bfda      	itte	le
 800886a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800886e:	40da      	lsrle	r2, r3
 8008870:	2201      	movgt	r2, #1
 8008872:	2300      	movs	r3, #0
 8008874:	4619      	mov	r1, r3
 8008876:	4610      	mov	r0, r2
 8008878:	ec41 0b10 	vmov	d0, r0, r1
 800887c:	b002      	add	sp, #8
 800887e:	4770      	bx	lr
 8008880:	7ff00000 	.word	0x7ff00000

08008884 <__b2d>:
 8008884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008888:	6906      	ldr	r6, [r0, #16]
 800888a:	f100 0814 	add.w	r8, r0, #20
 800888e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008892:	1f37      	subs	r7, r6, #4
 8008894:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008898:	4610      	mov	r0, r2
 800889a:	f7ff fd4b 	bl	8008334 <__hi0bits>
 800889e:	f1c0 0320 	rsb	r3, r0, #32
 80088a2:	280a      	cmp	r0, #10
 80088a4:	600b      	str	r3, [r1, #0]
 80088a6:	491b      	ldr	r1, [pc, #108]	@ (8008914 <__b2d+0x90>)
 80088a8:	dc15      	bgt.n	80088d6 <__b2d+0x52>
 80088aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80088ae:	fa22 f30c 	lsr.w	r3, r2, ip
 80088b2:	45b8      	cmp	r8, r7
 80088b4:	ea43 0501 	orr.w	r5, r3, r1
 80088b8:	bf34      	ite	cc
 80088ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088be:	2300      	movcs	r3, #0
 80088c0:	3015      	adds	r0, #21
 80088c2:	fa02 f000 	lsl.w	r0, r2, r0
 80088c6:	fa23 f30c 	lsr.w	r3, r3, ip
 80088ca:	4303      	orrs	r3, r0
 80088cc:	461c      	mov	r4, r3
 80088ce:	ec45 4b10 	vmov	d0, r4, r5
 80088d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d6:	45b8      	cmp	r8, r7
 80088d8:	bf3a      	itte	cc
 80088da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088de:	f1a6 0708 	subcc.w	r7, r6, #8
 80088e2:	2300      	movcs	r3, #0
 80088e4:	380b      	subs	r0, #11
 80088e6:	d012      	beq.n	800890e <__b2d+0x8a>
 80088e8:	f1c0 0120 	rsb	r1, r0, #32
 80088ec:	fa23 f401 	lsr.w	r4, r3, r1
 80088f0:	4082      	lsls	r2, r0
 80088f2:	4322      	orrs	r2, r4
 80088f4:	4547      	cmp	r7, r8
 80088f6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80088fa:	bf8c      	ite	hi
 80088fc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008900:	2200      	movls	r2, #0
 8008902:	4083      	lsls	r3, r0
 8008904:	40ca      	lsrs	r2, r1
 8008906:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800890a:	4313      	orrs	r3, r2
 800890c:	e7de      	b.n	80088cc <__b2d+0x48>
 800890e:	ea42 0501 	orr.w	r5, r2, r1
 8008912:	e7db      	b.n	80088cc <__b2d+0x48>
 8008914:	3ff00000 	.word	0x3ff00000

08008918 <__d2b>:
 8008918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800891c:	460f      	mov	r7, r1
 800891e:	2101      	movs	r1, #1
 8008920:	ec59 8b10 	vmov	r8, r9, d0
 8008924:	4616      	mov	r6, r2
 8008926:	f7ff fc13 	bl	8008150 <_Balloc>
 800892a:	4604      	mov	r4, r0
 800892c:	b930      	cbnz	r0, 800893c <__d2b+0x24>
 800892e:	4602      	mov	r2, r0
 8008930:	4b23      	ldr	r3, [pc, #140]	@ (80089c0 <__d2b+0xa8>)
 8008932:	4824      	ldr	r0, [pc, #144]	@ (80089c4 <__d2b+0xac>)
 8008934:	f240 310f 	movw	r1, #783	@ 0x30f
 8008938:	f001 fb6e 	bl	800a018 <__assert_func>
 800893c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008944:	b10d      	cbz	r5, 800894a <__d2b+0x32>
 8008946:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	f1b8 0300 	subs.w	r3, r8, #0
 8008950:	d023      	beq.n	800899a <__d2b+0x82>
 8008952:	4668      	mov	r0, sp
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	f7ff fd0c 	bl	8008372 <__lo0bits>
 800895a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800895e:	b1d0      	cbz	r0, 8008996 <__d2b+0x7e>
 8008960:	f1c0 0320 	rsb	r3, r0, #32
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	430b      	orrs	r3, r1
 800896a:	40c2      	lsrs	r2, r0
 800896c:	6163      	str	r3, [r4, #20]
 800896e:	9201      	str	r2, [sp, #4]
 8008970:	9b01      	ldr	r3, [sp, #4]
 8008972:	61a3      	str	r3, [r4, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	bf0c      	ite	eq
 8008978:	2201      	moveq	r2, #1
 800897a:	2202      	movne	r2, #2
 800897c:	6122      	str	r2, [r4, #16]
 800897e:	b1a5      	cbz	r5, 80089aa <__d2b+0x92>
 8008980:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008984:	4405      	add	r5, r0
 8008986:	603d      	str	r5, [r7, #0]
 8008988:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800898c:	6030      	str	r0, [r6, #0]
 800898e:	4620      	mov	r0, r4
 8008990:	b003      	add	sp, #12
 8008992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008996:	6161      	str	r1, [r4, #20]
 8008998:	e7ea      	b.n	8008970 <__d2b+0x58>
 800899a:	a801      	add	r0, sp, #4
 800899c:	f7ff fce9 	bl	8008372 <__lo0bits>
 80089a0:	9b01      	ldr	r3, [sp, #4]
 80089a2:	6163      	str	r3, [r4, #20]
 80089a4:	3020      	adds	r0, #32
 80089a6:	2201      	movs	r2, #1
 80089a8:	e7e8      	b.n	800897c <__d2b+0x64>
 80089aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089b2:	6038      	str	r0, [r7, #0]
 80089b4:	6918      	ldr	r0, [r3, #16]
 80089b6:	f7ff fcbd 	bl	8008334 <__hi0bits>
 80089ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089be:	e7e5      	b.n	800898c <__d2b+0x74>
 80089c0:	0800c9cd 	.word	0x0800c9cd
 80089c4:	0800c9de 	.word	0x0800c9de

080089c8 <__ratio>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	b085      	sub	sp, #20
 80089ce:	e9cd 1000 	strd	r1, r0, [sp]
 80089d2:	a902      	add	r1, sp, #8
 80089d4:	f7ff ff56 	bl	8008884 <__b2d>
 80089d8:	9800      	ldr	r0, [sp, #0]
 80089da:	a903      	add	r1, sp, #12
 80089dc:	ec55 4b10 	vmov	r4, r5, d0
 80089e0:	f7ff ff50 	bl	8008884 <__b2d>
 80089e4:	9b01      	ldr	r3, [sp, #4]
 80089e6:	6919      	ldr	r1, [r3, #16]
 80089e8:	9b00      	ldr	r3, [sp, #0]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	1ac9      	subs	r1, r1, r3
 80089ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	ec5b ab10 	vmov	sl, fp, d0
 80089f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	bfce      	itee	gt
 8008a00:	462a      	movgt	r2, r5
 8008a02:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a06:	465a      	movle	r2, fp
 8008a08:	462f      	mov	r7, r5
 8008a0a:	46d9      	mov	r9, fp
 8008a0c:	bfcc      	ite	gt
 8008a0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008a12:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008a16:	464b      	mov	r3, r9
 8008a18:	4652      	mov	r2, sl
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	f7f7 ff25 	bl	800086c <__aeabi_ddiv>
 8008a22:	ec41 0b10 	vmov	d0, r0, r1
 8008a26:	b005      	add	sp, #20
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a2c <__copybits>:
 8008a2c:	3901      	subs	r1, #1
 8008a2e:	b570      	push	{r4, r5, r6, lr}
 8008a30:	1149      	asrs	r1, r1, #5
 8008a32:	6914      	ldr	r4, [r2, #16]
 8008a34:	3101      	adds	r1, #1
 8008a36:	f102 0314 	add.w	r3, r2, #20
 8008a3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a42:	1f05      	subs	r5, r0, #4
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d30c      	bcc.n	8008a62 <__copybits+0x36>
 8008a48:	1aa3      	subs	r3, r4, r2
 8008a4a:	3b11      	subs	r3, #17
 8008a4c:	f023 0303 	bic.w	r3, r3, #3
 8008a50:	3211      	adds	r2, #17
 8008a52:	42a2      	cmp	r2, r4
 8008a54:	bf88      	it	hi
 8008a56:	2300      	movhi	r3, #0
 8008a58:	4418      	add	r0, r3
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	4288      	cmp	r0, r1
 8008a5e:	d305      	bcc.n	8008a6c <__copybits+0x40>
 8008a60:	bd70      	pop	{r4, r5, r6, pc}
 8008a62:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a66:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a6a:	e7eb      	b.n	8008a44 <__copybits+0x18>
 8008a6c:	f840 3b04 	str.w	r3, [r0], #4
 8008a70:	e7f4      	b.n	8008a5c <__copybits+0x30>

08008a72 <__any_on>:
 8008a72:	f100 0214 	add.w	r2, r0, #20
 8008a76:	6900      	ldr	r0, [r0, #16]
 8008a78:	114b      	asrs	r3, r1, #5
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	b510      	push	{r4, lr}
 8008a7e:	db11      	blt.n	8008aa4 <__any_on+0x32>
 8008a80:	dd0a      	ble.n	8008a98 <__any_on+0x26>
 8008a82:	f011 011f 	ands.w	r1, r1, #31
 8008a86:	d007      	beq.n	8008a98 <__any_on+0x26>
 8008a88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a8c:	fa24 f001 	lsr.w	r0, r4, r1
 8008a90:	fa00 f101 	lsl.w	r1, r0, r1
 8008a94:	428c      	cmp	r4, r1
 8008a96:	d10b      	bne.n	8008ab0 <__any_on+0x3e>
 8008a98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d803      	bhi.n	8008aa8 <__any_on+0x36>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	bd10      	pop	{r4, pc}
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	e7f7      	b.n	8008a98 <__any_on+0x26>
 8008aa8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008aac:	2900      	cmp	r1, #0
 8008aae:	d0f5      	beq.n	8008a9c <__any_on+0x2a>
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	e7f6      	b.n	8008aa2 <__any_on+0x30>

08008ab4 <sulp>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	460d      	mov	r5, r1
 8008aba:	ec45 4b10 	vmov	d0, r4, r5
 8008abe:	4616      	mov	r6, r2
 8008ac0:	f7ff feba 	bl	8008838 <__ulp>
 8008ac4:	ec51 0b10 	vmov	r0, r1, d0
 8008ac8:	b17e      	cbz	r6, 8008aea <sulp+0x36>
 8008aca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ace:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	dd09      	ble.n	8008aea <sulp+0x36>
 8008ad6:	051b      	lsls	r3, r3, #20
 8008ad8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008adc:	2400      	movs	r4, #0
 8008ade:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	f7f7 fd97 	bl	8000618 <__aeabi_dmul>
 8008aea:	ec41 0b10 	vmov	d0, r0, r1
 8008aee:	bd70      	pop	{r4, r5, r6, pc}

08008af0 <_strtod_l>:
 8008af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	b09f      	sub	sp, #124	@ 0x7c
 8008af6:	460c      	mov	r4, r1
 8008af8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008afa:	2200      	movs	r2, #0
 8008afc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008afe:	9005      	str	r0, [sp, #20]
 8008b00:	f04f 0a00 	mov.w	sl, #0
 8008b04:	f04f 0b00 	mov.w	fp, #0
 8008b08:	460a      	mov	r2, r1
 8008b0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b0c:	7811      	ldrb	r1, [r2, #0]
 8008b0e:	292b      	cmp	r1, #43	@ 0x2b
 8008b10:	d04a      	beq.n	8008ba8 <_strtod_l+0xb8>
 8008b12:	d838      	bhi.n	8008b86 <_strtod_l+0x96>
 8008b14:	290d      	cmp	r1, #13
 8008b16:	d832      	bhi.n	8008b7e <_strtod_l+0x8e>
 8008b18:	2908      	cmp	r1, #8
 8008b1a:	d832      	bhi.n	8008b82 <_strtod_l+0x92>
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d03b      	beq.n	8008b98 <_strtod_l+0xa8>
 8008b20:	2200      	movs	r2, #0
 8008b22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008b24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008b26:	782a      	ldrb	r2, [r5, #0]
 8008b28:	2a30      	cmp	r2, #48	@ 0x30
 8008b2a:	f040 80b3 	bne.w	8008c94 <_strtod_l+0x1a4>
 8008b2e:	786a      	ldrb	r2, [r5, #1]
 8008b30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b34:	2a58      	cmp	r2, #88	@ 0x58
 8008b36:	d16e      	bne.n	8008c16 <_strtod_l+0x126>
 8008b38:	9302      	str	r3, [sp, #8]
 8008b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4a8e      	ldr	r2, [pc, #568]	@ (8008d7c <_strtod_l+0x28c>)
 8008b44:	9805      	ldr	r0, [sp, #20]
 8008b46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008b48:	a919      	add	r1, sp, #100	@ 0x64
 8008b4a:	f001 faff 	bl	800a14c <__gethex>
 8008b4e:	f010 060f 	ands.w	r6, r0, #15
 8008b52:	4604      	mov	r4, r0
 8008b54:	d005      	beq.n	8008b62 <_strtod_l+0x72>
 8008b56:	2e06      	cmp	r6, #6
 8008b58:	d128      	bne.n	8008bac <_strtod_l+0xbc>
 8008b5a:	3501      	adds	r5, #1
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f040 858e 	bne.w	8009686 <_strtod_l+0xb96>
 8008b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b6c:	b1cb      	cbz	r3, 8008ba2 <_strtod_l+0xb2>
 8008b6e:	4652      	mov	r2, sl
 8008b70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008b74:	ec43 2b10 	vmov	d0, r2, r3
 8008b78:	b01f      	add	sp, #124	@ 0x7c
 8008b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b7e:	2920      	cmp	r1, #32
 8008b80:	d1ce      	bne.n	8008b20 <_strtod_l+0x30>
 8008b82:	3201      	adds	r2, #1
 8008b84:	e7c1      	b.n	8008b0a <_strtod_l+0x1a>
 8008b86:	292d      	cmp	r1, #45	@ 0x2d
 8008b88:	d1ca      	bne.n	8008b20 <_strtod_l+0x30>
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b8e:	1c51      	adds	r1, r2, #1
 8008b90:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b92:	7852      	ldrb	r2, [r2, #1]
 8008b94:	2a00      	cmp	r2, #0
 8008b96:	d1c5      	bne.n	8008b24 <_strtod_l+0x34>
 8008b98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f040 8570 	bne.w	8009682 <_strtod_l+0xb92>
 8008ba2:	4652      	mov	r2, sl
 8008ba4:	465b      	mov	r3, fp
 8008ba6:	e7e5      	b.n	8008b74 <_strtod_l+0x84>
 8008ba8:	2100      	movs	r1, #0
 8008baa:	e7ef      	b.n	8008b8c <_strtod_l+0x9c>
 8008bac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008bae:	b13a      	cbz	r2, 8008bc0 <_strtod_l+0xd0>
 8008bb0:	2135      	movs	r1, #53	@ 0x35
 8008bb2:	a81c      	add	r0, sp, #112	@ 0x70
 8008bb4:	f7ff ff3a 	bl	8008a2c <__copybits>
 8008bb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bba:	9805      	ldr	r0, [sp, #20]
 8008bbc:	f7ff fb08 	bl	80081d0 <_Bfree>
 8008bc0:	3e01      	subs	r6, #1
 8008bc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008bc4:	2e04      	cmp	r6, #4
 8008bc6:	d806      	bhi.n	8008bd6 <_strtod_l+0xe6>
 8008bc8:	e8df f006 	tbb	[pc, r6]
 8008bcc:	201d0314 	.word	0x201d0314
 8008bd0:	14          	.byte	0x14
 8008bd1:	00          	.byte	0x00
 8008bd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008bd6:	05e1      	lsls	r1, r4, #23
 8008bd8:	bf48      	it	mi
 8008bda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008bde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008be2:	0d1b      	lsrs	r3, r3, #20
 8008be4:	051b      	lsls	r3, r3, #20
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1bb      	bne.n	8008b62 <_strtod_l+0x72>
 8008bea:	f7fe fb2f 	bl	800724c <__errno>
 8008bee:	2322      	movs	r3, #34	@ 0x22
 8008bf0:	6003      	str	r3, [r0, #0]
 8008bf2:	e7b6      	b.n	8008b62 <_strtod_l+0x72>
 8008bf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008bf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008bfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008c00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c04:	e7e7      	b.n	8008bd6 <_strtod_l+0xe6>
 8008c06:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008d84 <_strtod_l+0x294>
 8008c0a:	e7e4      	b.n	8008bd6 <_strtod_l+0xe6>
 8008c0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008c10:	f04f 3aff 	mov.w	sl, #4294967295
 8008c14:	e7df      	b.n	8008bd6 <_strtod_l+0xe6>
 8008c16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	2b30      	cmp	r3, #48	@ 0x30
 8008c20:	d0f9      	beq.n	8008c16 <_strtod_l+0x126>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d09d      	beq.n	8008b62 <_strtod_l+0x72>
 8008c26:	2301      	movs	r3, #1
 8008c28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c2c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c2e:	2300      	movs	r3, #0
 8008c30:	9308      	str	r3, [sp, #32]
 8008c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c34:	461f      	mov	r7, r3
 8008c36:	220a      	movs	r2, #10
 8008c38:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008c3a:	7805      	ldrb	r5, [r0, #0]
 8008c3c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008c40:	b2d9      	uxtb	r1, r3
 8008c42:	2909      	cmp	r1, #9
 8008c44:	d928      	bls.n	8008c98 <_strtod_l+0x1a8>
 8008c46:	494e      	ldr	r1, [pc, #312]	@ (8008d80 <_strtod_l+0x290>)
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f001 f9ab 	bl	8009fa4 <strncmp>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d032      	beq.n	8008cb8 <_strtod_l+0x1c8>
 8008c52:	2000      	movs	r0, #0
 8008c54:	462a      	mov	r2, r5
 8008c56:	4681      	mov	r9, r0
 8008c58:	463d      	mov	r5, r7
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2a65      	cmp	r2, #101	@ 0x65
 8008c5e:	d001      	beq.n	8008c64 <_strtod_l+0x174>
 8008c60:	2a45      	cmp	r2, #69	@ 0x45
 8008c62:	d114      	bne.n	8008c8e <_strtod_l+0x19e>
 8008c64:	b91d      	cbnz	r5, 8008c6e <_strtod_l+0x17e>
 8008c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c68:	4302      	orrs	r2, r0
 8008c6a:	d095      	beq.n	8008b98 <_strtod_l+0xa8>
 8008c6c:	2500      	movs	r5, #0
 8008c6e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008c70:	1c62      	adds	r2, r4, #1
 8008c72:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c74:	7862      	ldrb	r2, [r4, #1]
 8008c76:	2a2b      	cmp	r2, #43	@ 0x2b
 8008c78:	d077      	beq.n	8008d6a <_strtod_l+0x27a>
 8008c7a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008c7c:	d07b      	beq.n	8008d76 <_strtod_l+0x286>
 8008c7e:	f04f 0c00 	mov.w	ip, #0
 8008c82:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008c86:	2909      	cmp	r1, #9
 8008c88:	f240 8082 	bls.w	8008d90 <_strtod_l+0x2a0>
 8008c8c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c8e:	f04f 0800 	mov.w	r8, #0
 8008c92:	e0a2      	b.n	8008dda <_strtod_l+0x2ea>
 8008c94:	2300      	movs	r3, #0
 8008c96:	e7c7      	b.n	8008c28 <_strtod_l+0x138>
 8008c98:	2f08      	cmp	r7, #8
 8008c9a:	bfd5      	itete	le
 8008c9c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008c9e:	9908      	ldrgt	r1, [sp, #32]
 8008ca0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ca4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008ca8:	f100 0001 	add.w	r0, r0, #1
 8008cac:	bfd4      	ite	le
 8008cae:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008cb0:	9308      	strgt	r3, [sp, #32]
 8008cb2:	3701      	adds	r7, #1
 8008cb4:	9019      	str	r0, [sp, #100]	@ 0x64
 8008cb6:	e7bf      	b.n	8008c38 <_strtod_l+0x148>
 8008cb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cbe:	785a      	ldrb	r2, [r3, #1]
 8008cc0:	b37f      	cbz	r7, 8008d22 <_strtod_l+0x232>
 8008cc2:	4681      	mov	r9, r0
 8008cc4:	463d      	mov	r5, r7
 8008cc6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008cca:	2b09      	cmp	r3, #9
 8008ccc:	d912      	bls.n	8008cf4 <_strtod_l+0x204>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e7c4      	b.n	8008c5c <_strtod_l+0x16c>
 8008cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cd4:	1c5a      	adds	r2, r3, #1
 8008cd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cd8:	785a      	ldrb	r2, [r3, #1]
 8008cda:	3001      	adds	r0, #1
 8008cdc:	2a30      	cmp	r2, #48	@ 0x30
 8008cde:	d0f8      	beq.n	8008cd2 <_strtod_l+0x1e2>
 8008ce0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ce4:	2b08      	cmp	r3, #8
 8008ce6:	f200 84d3 	bhi.w	8009690 <_strtod_l+0xba0>
 8008cea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cec:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cee:	4681      	mov	r9, r0
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	3a30      	subs	r2, #48	@ 0x30
 8008cf6:	f100 0301 	add.w	r3, r0, #1
 8008cfa:	d02a      	beq.n	8008d52 <_strtod_l+0x262>
 8008cfc:	4499      	add	r9, r3
 8008cfe:	eb00 0c05 	add.w	ip, r0, r5
 8008d02:	462b      	mov	r3, r5
 8008d04:	210a      	movs	r1, #10
 8008d06:	4563      	cmp	r3, ip
 8008d08:	d10d      	bne.n	8008d26 <_strtod_l+0x236>
 8008d0a:	1c69      	adds	r1, r5, #1
 8008d0c:	4401      	add	r1, r0
 8008d0e:	4428      	add	r0, r5
 8008d10:	2808      	cmp	r0, #8
 8008d12:	dc16      	bgt.n	8008d42 <_strtod_l+0x252>
 8008d14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008d16:	230a      	movs	r3, #10
 8008d18:	fb03 2300 	mla	r3, r3, r0, r2
 8008d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e018      	b.n	8008d54 <_strtod_l+0x264>
 8008d22:	4638      	mov	r0, r7
 8008d24:	e7da      	b.n	8008cdc <_strtod_l+0x1ec>
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	f103 0301 	add.w	r3, r3, #1
 8008d2c:	dc03      	bgt.n	8008d36 <_strtod_l+0x246>
 8008d2e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008d30:	434e      	muls	r6, r1
 8008d32:	960a      	str	r6, [sp, #40]	@ 0x28
 8008d34:	e7e7      	b.n	8008d06 <_strtod_l+0x216>
 8008d36:	2b10      	cmp	r3, #16
 8008d38:	bfde      	ittt	le
 8008d3a:	9e08      	ldrle	r6, [sp, #32]
 8008d3c:	434e      	mulle	r6, r1
 8008d3e:	9608      	strle	r6, [sp, #32]
 8008d40:	e7e1      	b.n	8008d06 <_strtod_l+0x216>
 8008d42:	280f      	cmp	r0, #15
 8008d44:	dceb      	bgt.n	8008d1e <_strtod_l+0x22e>
 8008d46:	9808      	ldr	r0, [sp, #32]
 8008d48:	230a      	movs	r3, #10
 8008d4a:	fb03 2300 	mla	r3, r3, r0, r2
 8008d4e:	9308      	str	r3, [sp, #32]
 8008d50:	e7e5      	b.n	8008d1e <_strtod_l+0x22e>
 8008d52:	4629      	mov	r1, r5
 8008d54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d56:	1c50      	adds	r0, r2, #1
 8008d58:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d5a:	7852      	ldrb	r2, [r2, #1]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	460d      	mov	r5, r1
 8008d60:	e7b1      	b.n	8008cc6 <_strtod_l+0x1d6>
 8008d62:	f04f 0900 	mov.w	r9, #0
 8008d66:	2301      	movs	r3, #1
 8008d68:	e77d      	b.n	8008c66 <_strtod_l+0x176>
 8008d6a:	f04f 0c00 	mov.w	ip, #0
 8008d6e:	1ca2      	adds	r2, r4, #2
 8008d70:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d72:	78a2      	ldrb	r2, [r4, #2]
 8008d74:	e785      	b.n	8008c82 <_strtod_l+0x192>
 8008d76:	f04f 0c01 	mov.w	ip, #1
 8008d7a:	e7f8      	b.n	8008d6e <_strtod_l+0x27e>
 8008d7c:	0800cb50 	.word	0x0800cb50
 8008d80:	0800cb38 	.word	0x0800cb38
 8008d84:	7ff00000 	.word	0x7ff00000
 8008d88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d8a:	1c51      	adds	r1, r2, #1
 8008d8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d8e:	7852      	ldrb	r2, [r2, #1]
 8008d90:	2a30      	cmp	r2, #48	@ 0x30
 8008d92:	d0f9      	beq.n	8008d88 <_strtod_l+0x298>
 8008d94:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008d98:	2908      	cmp	r1, #8
 8008d9a:	f63f af78 	bhi.w	8008c8e <_strtod_l+0x19e>
 8008d9e:	3a30      	subs	r2, #48	@ 0x30
 8008da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008da2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008da4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008da6:	f04f 080a 	mov.w	r8, #10
 8008daa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008dac:	1c56      	adds	r6, r2, #1
 8008dae:	9619      	str	r6, [sp, #100]	@ 0x64
 8008db0:	7852      	ldrb	r2, [r2, #1]
 8008db2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008db6:	f1be 0f09 	cmp.w	lr, #9
 8008dba:	d939      	bls.n	8008e30 <_strtod_l+0x340>
 8008dbc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008dbe:	1a76      	subs	r6, r6, r1
 8008dc0:	2e08      	cmp	r6, #8
 8008dc2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008dc6:	dc03      	bgt.n	8008dd0 <_strtod_l+0x2e0>
 8008dc8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008dca:	4588      	cmp	r8, r1
 8008dcc:	bfa8      	it	ge
 8008dce:	4688      	movge	r8, r1
 8008dd0:	f1bc 0f00 	cmp.w	ip, #0
 8008dd4:	d001      	beq.n	8008dda <_strtod_l+0x2ea>
 8008dd6:	f1c8 0800 	rsb	r8, r8, #0
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	d14e      	bne.n	8008e7c <_strtod_l+0x38c>
 8008dde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008de0:	4308      	orrs	r0, r1
 8008de2:	f47f aebe 	bne.w	8008b62 <_strtod_l+0x72>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f47f aed6 	bne.w	8008b98 <_strtod_l+0xa8>
 8008dec:	2a69      	cmp	r2, #105	@ 0x69
 8008dee:	d028      	beq.n	8008e42 <_strtod_l+0x352>
 8008df0:	dc25      	bgt.n	8008e3e <_strtod_l+0x34e>
 8008df2:	2a49      	cmp	r2, #73	@ 0x49
 8008df4:	d025      	beq.n	8008e42 <_strtod_l+0x352>
 8008df6:	2a4e      	cmp	r2, #78	@ 0x4e
 8008df8:	f47f aece 	bne.w	8008b98 <_strtod_l+0xa8>
 8008dfc:	499b      	ldr	r1, [pc, #620]	@ (800906c <_strtod_l+0x57c>)
 8008dfe:	a819      	add	r0, sp, #100	@ 0x64
 8008e00:	f001 fbc6 	bl	800a590 <__match>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	f43f aec7 	beq.w	8008b98 <_strtod_l+0xa8>
 8008e0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b28      	cmp	r3, #40	@ 0x28
 8008e10:	d12e      	bne.n	8008e70 <_strtod_l+0x380>
 8008e12:	4997      	ldr	r1, [pc, #604]	@ (8009070 <_strtod_l+0x580>)
 8008e14:	aa1c      	add	r2, sp, #112	@ 0x70
 8008e16:	a819      	add	r0, sp, #100	@ 0x64
 8008e18:	f001 fbce 	bl	800a5b8 <__hexnan>
 8008e1c:	2805      	cmp	r0, #5
 8008e1e:	d127      	bne.n	8008e70 <_strtod_l+0x380>
 8008e20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e22:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008e26:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008e2a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008e2e:	e698      	b.n	8008b62 <_strtod_l+0x72>
 8008e30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008e32:	fb08 2101 	mla	r1, r8, r1, r2
 8008e36:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008e3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e3c:	e7b5      	b.n	8008daa <_strtod_l+0x2ba>
 8008e3e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008e40:	e7da      	b.n	8008df8 <_strtod_l+0x308>
 8008e42:	498c      	ldr	r1, [pc, #560]	@ (8009074 <_strtod_l+0x584>)
 8008e44:	a819      	add	r0, sp, #100	@ 0x64
 8008e46:	f001 fba3 	bl	800a590 <__match>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	f43f aea4 	beq.w	8008b98 <_strtod_l+0xa8>
 8008e50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e52:	4989      	ldr	r1, [pc, #548]	@ (8009078 <_strtod_l+0x588>)
 8008e54:	3b01      	subs	r3, #1
 8008e56:	a819      	add	r0, sp, #100	@ 0x64
 8008e58:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e5a:	f001 fb99 	bl	800a590 <__match>
 8008e5e:	b910      	cbnz	r0, 8008e66 <_strtod_l+0x376>
 8008e60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e62:	3301      	adds	r3, #1
 8008e64:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e66:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009088 <_strtod_l+0x598>
 8008e6a:	f04f 0a00 	mov.w	sl, #0
 8008e6e:	e678      	b.n	8008b62 <_strtod_l+0x72>
 8008e70:	4882      	ldr	r0, [pc, #520]	@ (800907c <_strtod_l+0x58c>)
 8008e72:	f001 f8c9 	bl	800a008 <nan>
 8008e76:	ec5b ab10 	vmov	sl, fp, d0
 8008e7a:	e672      	b.n	8008b62 <_strtod_l+0x72>
 8008e7c:	eba8 0309 	sub.w	r3, r8, r9
 8008e80:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e84:	2f00      	cmp	r7, #0
 8008e86:	bf08      	it	eq
 8008e88:	462f      	moveq	r7, r5
 8008e8a:	2d10      	cmp	r5, #16
 8008e8c:	462c      	mov	r4, r5
 8008e8e:	bfa8      	it	ge
 8008e90:	2410      	movge	r4, #16
 8008e92:	f7f7 fb47 	bl	8000524 <__aeabi_ui2d>
 8008e96:	2d09      	cmp	r5, #9
 8008e98:	4682      	mov	sl, r0
 8008e9a:	468b      	mov	fp, r1
 8008e9c:	dc13      	bgt.n	8008ec6 <_strtod_l+0x3d6>
 8008e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f43f ae5e 	beq.w	8008b62 <_strtod_l+0x72>
 8008ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea8:	dd78      	ble.n	8008f9c <_strtod_l+0x4ac>
 8008eaa:	2b16      	cmp	r3, #22
 8008eac:	dc5f      	bgt.n	8008f6e <_strtod_l+0x47e>
 8008eae:	4974      	ldr	r1, [pc, #464]	@ (8009080 <_strtod_l+0x590>)
 8008eb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb8:	4652      	mov	r2, sl
 8008eba:	465b      	mov	r3, fp
 8008ebc:	f7f7 fbac 	bl	8000618 <__aeabi_dmul>
 8008ec0:	4682      	mov	sl, r0
 8008ec2:	468b      	mov	fp, r1
 8008ec4:	e64d      	b.n	8008b62 <_strtod_l+0x72>
 8008ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8009080 <_strtod_l+0x590>)
 8008ec8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ecc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ed0:	f7f7 fba2 	bl	8000618 <__aeabi_dmul>
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	9808      	ldr	r0, [sp, #32]
 8008ed8:	468b      	mov	fp, r1
 8008eda:	f7f7 fb23 	bl	8000524 <__aeabi_ui2d>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	4659      	mov	r1, fp
 8008ee6:	f7f7 f9e1 	bl	80002ac <__adddf3>
 8008eea:	2d0f      	cmp	r5, #15
 8008eec:	4682      	mov	sl, r0
 8008eee:	468b      	mov	fp, r1
 8008ef0:	ddd5      	ble.n	8008e9e <_strtod_l+0x3ae>
 8008ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef4:	1b2c      	subs	r4, r5, r4
 8008ef6:	441c      	add	r4, r3
 8008ef8:	2c00      	cmp	r4, #0
 8008efa:	f340 8096 	ble.w	800902a <_strtod_l+0x53a>
 8008efe:	f014 030f 	ands.w	r3, r4, #15
 8008f02:	d00a      	beq.n	8008f1a <_strtod_l+0x42a>
 8008f04:	495e      	ldr	r1, [pc, #376]	@ (8009080 <_strtod_l+0x590>)
 8008f06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f0a:	4652      	mov	r2, sl
 8008f0c:	465b      	mov	r3, fp
 8008f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f12:	f7f7 fb81 	bl	8000618 <__aeabi_dmul>
 8008f16:	4682      	mov	sl, r0
 8008f18:	468b      	mov	fp, r1
 8008f1a:	f034 040f 	bics.w	r4, r4, #15
 8008f1e:	d073      	beq.n	8009008 <_strtod_l+0x518>
 8008f20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008f24:	dd48      	ble.n	8008fb8 <_strtod_l+0x4c8>
 8008f26:	2400      	movs	r4, #0
 8008f28:	46a0      	mov	r8, r4
 8008f2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f2c:	46a1      	mov	r9, r4
 8008f2e:	9a05      	ldr	r2, [sp, #20]
 8008f30:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009088 <_strtod_l+0x598>
 8008f34:	2322      	movs	r3, #34	@ 0x22
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	f04f 0a00 	mov.w	sl, #0
 8008f3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f43f ae0f 	beq.w	8008b62 <_strtod_l+0x72>
 8008f44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f46:	9805      	ldr	r0, [sp, #20]
 8008f48:	f7ff f942 	bl	80081d0 <_Bfree>
 8008f4c:	9805      	ldr	r0, [sp, #20]
 8008f4e:	4649      	mov	r1, r9
 8008f50:	f7ff f93e 	bl	80081d0 <_Bfree>
 8008f54:	9805      	ldr	r0, [sp, #20]
 8008f56:	4641      	mov	r1, r8
 8008f58:	f7ff f93a 	bl	80081d0 <_Bfree>
 8008f5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f5e:	9805      	ldr	r0, [sp, #20]
 8008f60:	f7ff f936 	bl	80081d0 <_Bfree>
 8008f64:	9805      	ldr	r0, [sp, #20]
 8008f66:	4621      	mov	r1, r4
 8008f68:	f7ff f932 	bl	80081d0 <_Bfree>
 8008f6c:	e5f9      	b.n	8008b62 <_strtod_l+0x72>
 8008f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008f74:	4293      	cmp	r3, r2
 8008f76:	dbbc      	blt.n	8008ef2 <_strtod_l+0x402>
 8008f78:	4c41      	ldr	r4, [pc, #260]	@ (8009080 <_strtod_l+0x590>)
 8008f7a:	f1c5 050f 	rsb	r5, r5, #15
 8008f7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008f82:	4652      	mov	r2, sl
 8008f84:	465b      	mov	r3, fp
 8008f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8a:	f7f7 fb45 	bl	8000618 <__aeabi_dmul>
 8008f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f90:	1b5d      	subs	r5, r3, r5
 8008f92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f9a:	e78f      	b.n	8008ebc <_strtod_l+0x3cc>
 8008f9c:	3316      	adds	r3, #22
 8008f9e:	dba8      	blt.n	8008ef2 <_strtod_l+0x402>
 8008fa0:	4b37      	ldr	r3, [pc, #220]	@ (8009080 <_strtod_l+0x590>)
 8008fa2:	eba9 0808 	sub.w	r8, r9, r8
 8008fa6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008faa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008fae:	4650      	mov	r0, sl
 8008fb0:	4659      	mov	r1, fp
 8008fb2:	f7f7 fc5b 	bl	800086c <__aeabi_ddiv>
 8008fb6:	e783      	b.n	8008ec0 <_strtod_l+0x3d0>
 8008fb8:	4b32      	ldr	r3, [pc, #200]	@ (8009084 <_strtod_l+0x594>)
 8008fba:	9308      	str	r3, [sp, #32]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	1124      	asrs	r4, r4, #4
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	4659      	mov	r1, fp
 8008fc4:	461e      	mov	r6, r3
 8008fc6:	2c01      	cmp	r4, #1
 8008fc8:	dc21      	bgt.n	800900e <_strtod_l+0x51e>
 8008fca:	b10b      	cbz	r3, 8008fd0 <_strtod_l+0x4e0>
 8008fcc:	4682      	mov	sl, r0
 8008fce:	468b      	mov	fp, r1
 8008fd0:	492c      	ldr	r1, [pc, #176]	@ (8009084 <_strtod_l+0x594>)
 8008fd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008fd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008fda:	4652      	mov	r2, sl
 8008fdc:	465b      	mov	r3, fp
 8008fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fe2:	f7f7 fb19 	bl	8000618 <__aeabi_dmul>
 8008fe6:	4b28      	ldr	r3, [pc, #160]	@ (8009088 <_strtod_l+0x598>)
 8008fe8:	460a      	mov	r2, r1
 8008fea:	400b      	ands	r3, r1
 8008fec:	4927      	ldr	r1, [pc, #156]	@ (800908c <_strtod_l+0x59c>)
 8008fee:	428b      	cmp	r3, r1
 8008ff0:	4682      	mov	sl, r0
 8008ff2:	d898      	bhi.n	8008f26 <_strtod_l+0x436>
 8008ff4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008ff8:	428b      	cmp	r3, r1
 8008ffa:	bf86      	itte	hi
 8008ffc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009090 <_strtod_l+0x5a0>
 8009000:	f04f 3aff 	movhi.w	sl, #4294967295
 8009004:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009008:	2300      	movs	r3, #0
 800900a:	9308      	str	r3, [sp, #32]
 800900c:	e07a      	b.n	8009104 <_strtod_l+0x614>
 800900e:	07e2      	lsls	r2, r4, #31
 8009010:	d505      	bpl.n	800901e <_strtod_l+0x52e>
 8009012:	9b08      	ldr	r3, [sp, #32]
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f7f7 fafe 	bl	8000618 <__aeabi_dmul>
 800901c:	2301      	movs	r3, #1
 800901e:	9a08      	ldr	r2, [sp, #32]
 8009020:	3208      	adds	r2, #8
 8009022:	3601      	adds	r6, #1
 8009024:	1064      	asrs	r4, r4, #1
 8009026:	9208      	str	r2, [sp, #32]
 8009028:	e7cd      	b.n	8008fc6 <_strtod_l+0x4d6>
 800902a:	d0ed      	beq.n	8009008 <_strtod_l+0x518>
 800902c:	4264      	negs	r4, r4
 800902e:	f014 020f 	ands.w	r2, r4, #15
 8009032:	d00a      	beq.n	800904a <_strtod_l+0x55a>
 8009034:	4b12      	ldr	r3, [pc, #72]	@ (8009080 <_strtod_l+0x590>)
 8009036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800903a:	4650      	mov	r0, sl
 800903c:	4659      	mov	r1, fp
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	f7f7 fc13 	bl	800086c <__aeabi_ddiv>
 8009046:	4682      	mov	sl, r0
 8009048:	468b      	mov	fp, r1
 800904a:	1124      	asrs	r4, r4, #4
 800904c:	d0dc      	beq.n	8009008 <_strtod_l+0x518>
 800904e:	2c1f      	cmp	r4, #31
 8009050:	dd20      	ble.n	8009094 <_strtod_l+0x5a4>
 8009052:	2400      	movs	r4, #0
 8009054:	46a0      	mov	r8, r4
 8009056:	940a      	str	r4, [sp, #40]	@ 0x28
 8009058:	46a1      	mov	r9, r4
 800905a:	9a05      	ldr	r2, [sp, #20]
 800905c:	2322      	movs	r3, #34	@ 0x22
 800905e:	f04f 0a00 	mov.w	sl, #0
 8009062:	f04f 0b00 	mov.w	fp, #0
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	e768      	b.n	8008f3c <_strtod_l+0x44c>
 800906a:	bf00      	nop
 800906c:	0800c925 	.word	0x0800c925
 8009070:	0800cb3c 	.word	0x0800cb3c
 8009074:	0800c91d 	.word	0x0800c91d
 8009078:	0800c954 	.word	0x0800c954
 800907c:	0800cce5 	.word	0x0800cce5
 8009080:	0800ca70 	.word	0x0800ca70
 8009084:	0800ca48 	.word	0x0800ca48
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	7ca00000 	.word	0x7ca00000
 8009090:	7fefffff 	.word	0x7fefffff
 8009094:	f014 0310 	ands.w	r3, r4, #16
 8009098:	bf18      	it	ne
 800909a:	236a      	movne	r3, #106	@ 0x6a
 800909c:	4ea9      	ldr	r6, [pc, #676]	@ (8009344 <_strtod_l+0x854>)
 800909e:	9308      	str	r3, [sp, #32]
 80090a0:	4650      	mov	r0, sl
 80090a2:	4659      	mov	r1, fp
 80090a4:	2300      	movs	r3, #0
 80090a6:	07e2      	lsls	r2, r4, #31
 80090a8:	d504      	bpl.n	80090b4 <_strtod_l+0x5c4>
 80090aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090ae:	f7f7 fab3 	bl	8000618 <__aeabi_dmul>
 80090b2:	2301      	movs	r3, #1
 80090b4:	1064      	asrs	r4, r4, #1
 80090b6:	f106 0608 	add.w	r6, r6, #8
 80090ba:	d1f4      	bne.n	80090a6 <_strtod_l+0x5b6>
 80090bc:	b10b      	cbz	r3, 80090c2 <_strtod_l+0x5d2>
 80090be:	4682      	mov	sl, r0
 80090c0:	468b      	mov	fp, r1
 80090c2:	9b08      	ldr	r3, [sp, #32]
 80090c4:	b1b3      	cbz	r3, 80090f4 <_strtod_l+0x604>
 80090c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80090ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	4659      	mov	r1, fp
 80090d2:	dd0f      	ble.n	80090f4 <_strtod_l+0x604>
 80090d4:	2b1f      	cmp	r3, #31
 80090d6:	dd55      	ble.n	8009184 <_strtod_l+0x694>
 80090d8:	2b34      	cmp	r3, #52	@ 0x34
 80090da:	bfde      	ittt	le
 80090dc:	f04f 33ff 	movle.w	r3, #4294967295
 80090e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80090e4:	4093      	lslle	r3, r2
 80090e6:	f04f 0a00 	mov.w	sl, #0
 80090ea:	bfcc      	ite	gt
 80090ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80090f0:	ea03 0b01 	andle.w	fp, r3, r1
 80090f4:	2200      	movs	r2, #0
 80090f6:	2300      	movs	r3, #0
 80090f8:	4650      	mov	r0, sl
 80090fa:	4659      	mov	r1, fp
 80090fc:	f7f7 fcf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009100:	2800      	cmp	r0, #0
 8009102:	d1a6      	bne.n	8009052 <_strtod_l+0x562>
 8009104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800910a:	9805      	ldr	r0, [sp, #20]
 800910c:	462b      	mov	r3, r5
 800910e:	463a      	mov	r2, r7
 8009110:	f7ff f8c6 	bl	80082a0 <__s2b>
 8009114:	900a      	str	r0, [sp, #40]	@ 0x28
 8009116:	2800      	cmp	r0, #0
 8009118:	f43f af05 	beq.w	8008f26 <_strtod_l+0x436>
 800911c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800911e:	2a00      	cmp	r2, #0
 8009120:	eba9 0308 	sub.w	r3, r9, r8
 8009124:	bfa8      	it	ge
 8009126:	2300      	movge	r3, #0
 8009128:	9312      	str	r3, [sp, #72]	@ 0x48
 800912a:	2400      	movs	r4, #0
 800912c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009130:	9316      	str	r3, [sp, #88]	@ 0x58
 8009132:	46a0      	mov	r8, r4
 8009134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009136:	9805      	ldr	r0, [sp, #20]
 8009138:	6859      	ldr	r1, [r3, #4]
 800913a:	f7ff f809 	bl	8008150 <_Balloc>
 800913e:	4681      	mov	r9, r0
 8009140:	2800      	cmp	r0, #0
 8009142:	f43f aef4 	beq.w	8008f2e <_strtod_l+0x43e>
 8009146:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009148:	691a      	ldr	r2, [r3, #16]
 800914a:	3202      	adds	r2, #2
 800914c:	f103 010c 	add.w	r1, r3, #12
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	300c      	adds	r0, #12
 8009154:	f000 ff48 	bl	8009fe8 <memcpy>
 8009158:	ec4b ab10 	vmov	d0, sl, fp
 800915c:	9805      	ldr	r0, [sp, #20]
 800915e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009160:	a91b      	add	r1, sp, #108	@ 0x6c
 8009162:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009166:	f7ff fbd7 	bl	8008918 <__d2b>
 800916a:	901a      	str	r0, [sp, #104]	@ 0x68
 800916c:	2800      	cmp	r0, #0
 800916e:	f43f aede 	beq.w	8008f2e <_strtod_l+0x43e>
 8009172:	9805      	ldr	r0, [sp, #20]
 8009174:	2101      	movs	r1, #1
 8009176:	f7ff f929 	bl	80083cc <__i2b>
 800917a:	4680      	mov	r8, r0
 800917c:	b948      	cbnz	r0, 8009192 <_strtod_l+0x6a2>
 800917e:	f04f 0800 	mov.w	r8, #0
 8009182:	e6d4      	b.n	8008f2e <_strtod_l+0x43e>
 8009184:	f04f 32ff 	mov.w	r2, #4294967295
 8009188:	fa02 f303 	lsl.w	r3, r2, r3
 800918c:	ea03 0a0a 	and.w	sl, r3, sl
 8009190:	e7b0      	b.n	80090f4 <_strtod_l+0x604>
 8009192:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009194:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009196:	2d00      	cmp	r5, #0
 8009198:	bfab      	itete	ge
 800919a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800919c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800919e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80091a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80091a2:	bfac      	ite	ge
 80091a4:	18ef      	addge	r7, r5, r3
 80091a6:	1b5e      	sublt	r6, r3, r5
 80091a8:	9b08      	ldr	r3, [sp, #32]
 80091aa:	1aed      	subs	r5, r5, r3
 80091ac:	4415      	add	r5, r2
 80091ae:	4b66      	ldr	r3, [pc, #408]	@ (8009348 <_strtod_l+0x858>)
 80091b0:	3d01      	subs	r5, #1
 80091b2:	429d      	cmp	r5, r3
 80091b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80091b8:	da50      	bge.n	800925c <_strtod_l+0x76c>
 80091ba:	1b5b      	subs	r3, r3, r5
 80091bc:	2b1f      	cmp	r3, #31
 80091be:	eba2 0203 	sub.w	r2, r2, r3
 80091c2:	f04f 0101 	mov.w	r1, #1
 80091c6:	dc3d      	bgt.n	8009244 <_strtod_l+0x754>
 80091c8:	fa01 f303 	lsl.w	r3, r1, r3
 80091cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091ce:	2300      	movs	r3, #0
 80091d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80091d2:	18bd      	adds	r5, r7, r2
 80091d4:	9b08      	ldr	r3, [sp, #32]
 80091d6:	42af      	cmp	r7, r5
 80091d8:	4416      	add	r6, r2
 80091da:	441e      	add	r6, r3
 80091dc:	463b      	mov	r3, r7
 80091de:	bfa8      	it	ge
 80091e0:	462b      	movge	r3, r5
 80091e2:	42b3      	cmp	r3, r6
 80091e4:	bfa8      	it	ge
 80091e6:	4633      	movge	r3, r6
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	bfc2      	ittt	gt
 80091ec:	1aed      	subgt	r5, r5, r3
 80091ee:	1af6      	subgt	r6, r6, r3
 80091f0:	1aff      	subgt	r7, r7, r3
 80091f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dd16      	ble.n	8009226 <_strtod_l+0x736>
 80091f8:	4641      	mov	r1, r8
 80091fa:	9805      	ldr	r0, [sp, #20]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f7ff f9a5 	bl	800854c <__pow5mult>
 8009202:	4680      	mov	r8, r0
 8009204:	2800      	cmp	r0, #0
 8009206:	d0ba      	beq.n	800917e <_strtod_l+0x68e>
 8009208:	4601      	mov	r1, r0
 800920a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800920c:	9805      	ldr	r0, [sp, #20]
 800920e:	f7ff f8f3 	bl	80083f8 <__multiply>
 8009212:	900e      	str	r0, [sp, #56]	@ 0x38
 8009214:	2800      	cmp	r0, #0
 8009216:	f43f ae8a 	beq.w	8008f2e <_strtod_l+0x43e>
 800921a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800921c:	9805      	ldr	r0, [sp, #20]
 800921e:	f7fe ffd7 	bl	80081d0 <_Bfree>
 8009222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009224:	931a      	str	r3, [sp, #104]	@ 0x68
 8009226:	2d00      	cmp	r5, #0
 8009228:	dc1d      	bgt.n	8009266 <_strtod_l+0x776>
 800922a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd23      	ble.n	8009278 <_strtod_l+0x788>
 8009230:	4649      	mov	r1, r9
 8009232:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009234:	9805      	ldr	r0, [sp, #20]
 8009236:	f7ff f989 	bl	800854c <__pow5mult>
 800923a:	4681      	mov	r9, r0
 800923c:	b9e0      	cbnz	r0, 8009278 <_strtod_l+0x788>
 800923e:	f04f 0900 	mov.w	r9, #0
 8009242:	e674      	b.n	8008f2e <_strtod_l+0x43e>
 8009244:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009248:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800924c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009250:	35e2      	adds	r5, #226	@ 0xe2
 8009252:	fa01 f305 	lsl.w	r3, r1, r5
 8009256:	9310      	str	r3, [sp, #64]	@ 0x40
 8009258:	9113      	str	r1, [sp, #76]	@ 0x4c
 800925a:	e7ba      	b.n	80091d2 <_strtod_l+0x6e2>
 800925c:	2300      	movs	r3, #0
 800925e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009260:	2301      	movs	r3, #1
 8009262:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009264:	e7b5      	b.n	80091d2 <_strtod_l+0x6e2>
 8009266:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009268:	9805      	ldr	r0, [sp, #20]
 800926a:	462a      	mov	r2, r5
 800926c:	f7ff f9c8 	bl	8008600 <__lshift>
 8009270:	901a      	str	r0, [sp, #104]	@ 0x68
 8009272:	2800      	cmp	r0, #0
 8009274:	d1d9      	bne.n	800922a <_strtod_l+0x73a>
 8009276:	e65a      	b.n	8008f2e <_strtod_l+0x43e>
 8009278:	2e00      	cmp	r6, #0
 800927a:	dd07      	ble.n	800928c <_strtod_l+0x79c>
 800927c:	4649      	mov	r1, r9
 800927e:	9805      	ldr	r0, [sp, #20]
 8009280:	4632      	mov	r2, r6
 8009282:	f7ff f9bd 	bl	8008600 <__lshift>
 8009286:	4681      	mov	r9, r0
 8009288:	2800      	cmp	r0, #0
 800928a:	d0d8      	beq.n	800923e <_strtod_l+0x74e>
 800928c:	2f00      	cmp	r7, #0
 800928e:	dd08      	ble.n	80092a2 <_strtod_l+0x7b2>
 8009290:	4641      	mov	r1, r8
 8009292:	9805      	ldr	r0, [sp, #20]
 8009294:	463a      	mov	r2, r7
 8009296:	f7ff f9b3 	bl	8008600 <__lshift>
 800929a:	4680      	mov	r8, r0
 800929c:	2800      	cmp	r0, #0
 800929e:	f43f ae46 	beq.w	8008f2e <_strtod_l+0x43e>
 80092a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092a4:	9805      	ldr	r0, [sp, #20]
 80092a6:	464a      	mov	r2, r9
 80092a8:	f7ff fa32 	bl	8008710 <__mdiff>
 80092ac:	4604      	mov	r4, r0
 80092ae:	2800      	cmp	r0, #0
 80092b0:	f43f ae3d 	beq.w	8008f2e <_strtod_l+0x43e>
 80092b4:	68c3      	ldr	r3, [r0, #12]
 80092b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092b8:	2300      	movs	r3, #0
 80092ba:	60c3      	str	r3, [r0, #12]
 80092bc:	4641      	mov	r1, r8
 80092be:	f7ff fa0b 	bl	80086d8 <__mcmp>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	da46      	bge.n	8009354 <_strtod_l+0x864>
 80092c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092c8:	ea53 030a 	orrs.w	r3, r3, sl
 80092cc:	d16c      	bne.n	80093a8 <_strtod_l+0x8b8>
 80092ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d168      	bne.n	80093a8 <_strtod_l+0x8b8>
 80092d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092da:	0d1b      	lsrs	r3, r3, #20
 80092dc:	051b      	lsls	r3, r3, #20
 80092de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092e2:	d961      	bls.n	80093a8 <_strtod_l+0x8b8>
 80092e4:	6963      	ldr	r3, [r4, #20]
 80092e6:	b913      	cbnz	r3, 80092ee <_strtod_l+0x7fe>
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	dd5c      	ble.n	80093a8 <_strtod_l+0x8b8>
 80092ee:	4621      	mov	r1, r4
 80092f0:	2201      	movs	r2, #1
 80092f2:	9805      	ldr	r0, [sp, #20]
 80092f4:	f7ff f984 	bl	8008600 <__lshift>
 80092f8:	4641      	mov	r1, r8
 80092fa:	4604      	mov	r4, r0
 80092fc:	f7ff f9ec 	bl	80086d8 <__mcmp>
 8009300:	2800      	cmp	r0, #0
 8009302:	dd51      	ble.n	80093a8 <_strtod_l+0x8b8>
 8009304:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009308:	9a08      	ldr	r2, [sp, #32]
 800930a:	0d1b      	lsrs	r3, r3, #20
 800930c:	051b      	lsls	r3, r3, #20
 800930e:	2a00      	cmp	r2, #0
 8009310:	d06b      	beq.n	80093ea <_strtod_l+0x8fa>
 8009312:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009316:	d868      	bhi.n	80093ea <_strtod_l+0x8fa>
 8009318:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800931c:	f67f ae9d 	bls.w	800905a <_strtod_l+0x56a>
 8009320:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <_strtod_l+0x85c>)
 8009322:	4650      	mov	r0, sl
 8009324:	4659      	mov	r1, fp
 8009326:	2200      	movs	r2, #0
 8009328:	f7f7 f976 	bl	8000618 <__aeabi_dmul>
 800932c:	4b08      	ldr	r3, [pc, #32]	@ (8009350 <_strtod_l+0x860>)
 800932e:	400b      	ands	r3, r1
 8009330:	4682      	mov	sl, r0
 8009332:	468b      	mov	fp, r1
 8009334:	2b00      	cmp	r3, #0
 8009336:	f47f ae05 	bne.w	8008f44 <_strtod_l+0x454>
 800933a:	9a05      	ldr	r2, [sp, #20]
 800933c:	2322      	movs	r3, #34	@ 0x22
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	e600      	b.n	8008f44 <_strtod_l+0x454>
 8009342:	bf00      	nop
 8009344:	0800cb68 	.word	0x0800cb68
 8009348:	fffffc02 	.word	0xfffffc02
 800934c:	39500000 	.word	0x39500000
 8009350:	7ff00000 	.word	0x7ff00000
 8009354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009358:	d165      	bne.n	8009426 <_strtod_l+0x936>
 800935a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800935c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009360:	b35a      	cbz	r2, 80093ba <_strtod_l+0x8ca>
 8009362:	4a9f      	ldr	r2, [pc, #636]	@ (80095e0 <_strtod_l+0xaf0>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d12b      	bne.n	80093c0 <_strtod_l+0x8d0>
 8009368:	9b08      	ldr	r3, [sp, #32]
 800936a:	4651      	mov	r1, sl
 800936c:	b303      	cbz	r3, 80093b0 <_strtod_l+0x8c0>
 800936e:	4b9d      	ldr	r3, [pc, #628]	@ (80095e4 <_strtod_l+0xaf4>)
 8009370:	465a      	mov	r2, fp
 8009372:	4013      	ands	r3, r2
 8009374:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009378:	f04f 32ff 	mov.w	r2, #4294967295
 800937c:	d81b      	bhi.n	80093b6 <_strtod_l+0x8c6>
 800937e:	0d1b      	lsrs	r3, r3, #20
 8009380:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009384:	fa02 f303 	lsl.w	r3, r2, r3
 8009388:	4299      	cmp	r1, r3
 800938a:	d119      	bne.n	80093c0 <_strtod_l+0x8d0>
 800938c:	4b96      	ldr	r3, [pc, #600]	@ (80095e8 <_strtod_l+0xaf8>)
 800938e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009390:	429a      	cmp	r2, r3
 8009392:	d102      	bne.n	800939a <_strtod_l+0x8aa>
 8009394:	3101      	adds	r1, #1
 8009396:	f43f adca 	beq.w	8008f2e <_strtod_l+0x43e>
 800939a:	4b92      	ldr	r3, [pc, #584]	@ (80095e4 <_strtod_l+0xaf4>)
 800939c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800939e:	401a      	ands	r2, r3
 80093a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80093a4:	f04f 0a00 	mov.w	sl, #0
 80093a8:	9b08      	ldr	r3, [sp, #32]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1b8      	bne.n	8009320 <_strtod_l+0x830>
 80093ae:	e5c9      	b.n	8008f44 <_strtod_l+0x454>
 80093b0:	f04f 33ff 	mov.w	r3, #4294967295
 80093b4:	e7e8      	b.n	8009388 <_strtod_l+0x898>
 80093b6:	4613      	mov	r3, r2
 80093b8:	e7e6      	b.n	8009388 <_strtod_l+0x898>
 80093ba:	ea53 030a 	orrs.w	r3, r3, sl
 80093be:	d0a1      	beq.n	8009304 <_strtod_l+0x814>
 80093c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093c2:	b1db      	cbz	r3, 80093fc <_strtod_l+0x90c>
 80093c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093c6:	4213      	tst	r3, r2
 80093c8:	d0ee      	beq.n	80093a8 <_strtod_l+0x8b8>
 80093ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093cc:	9a08      	ldr	r2, [sp, #32]
 80093ce:	4650      	mov	r0, sl
 80093d0:	4659      	mov	r1, fp
 80093d2:	b1bb      	cbz	r3, 8009404 <_strtod_l+0x914>
 80093d4:	f7ff fb6e 	bl	8008ab4 <sulp>
 80093d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093dc:	ec53 2b10 	vmov	r2, r3, d0
 80093e0:	f7f6 ff64 	bl	80002ac <__adddf3>
 80093e4:	4682      	mov	sl, r0
 80093e6:	468b      	mov	fp, r1
 80093e8:	e7de      	b.n	80093a8 <_strtod_l+0x8b8>
 80093ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80093ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093f6:	f04f 3aff 	mov.w	sl, #4294967295
 80093fa:	e7d5      	b.n	80093a8 <_strtod_l+0x8b8>
 80093fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80093fe:	ea13 0f0a 	tst.w	r3, sl
 8009402:	e7e1      	b.n	80093c8 <_strtod_l+0x8d8>
 8009404:	f7ff fb56 	bl	8008ab4 <sulp>
 8009408:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800940c:	ec53 2b10 	vmov	r2, r3, d0
 8009410:	f7f6 ff4a 	bl	80002a8 <__aeabi_dsub>
 8009414:	2200      	movs	r2, #0
 8009416:	2300      	movs	r3, #0
 8009418:	4682      	mov	sl, r0
 800941a:	468b      	mov	fp, r1
 800941c:	f7f7 fb64 	bl	8000ae8 <__aeabi_dcmpeq>
 8009420:	2800      	cmp	r0, #0
 8009422:	d0c1      	beq.n	80093a8 <_strtod_l+0x8b8>
 8009424:	e619      	b.n	800905a <_strtod_l+0x56a>
 8009426:	4641      	mov	r1, r8
 8009428:	4620      	mov	r0, r4
 800942a:	f7ff facd 	bl	80089c8 <__ratio>
 800942e:	ec57 6b10 	vmov	r6, r7, d0
 8009432:	2200      	movs	r2, #0
 8009434:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009438:	4630      	mov	r0, r6
 800943a:	4639      	mov	r1, r7
 800943c:	f7f7 fb68 	bl	8000b10 <__aeabi_dcmple>
 8009440:	2800      	cmp	r0, #0
 8009442:	d06f      	beq.n	8009524 <_strtod_l+0xa34>
 8009444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d17a      	bne.n	8009540 <_strtod_l+0xa50>
 800944a:	f1ba 0f00 	cmp.w	sl, #0
 800944e:	d158      	bne.n	8009502 <_strtod_l+0xa12>
 8009450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009456:	2b00      	cmp	r3, #0
 8009458:	d15a      	bne.n	8009510 <_strtod_l+0xa20>
 800945a:	4b64      	ldr	r3, [pc, #400]	@ (80095ec <_strtod_l+0xafc>)
 800945c:	2200      	movs	r2, #0
 800945e:	4630      	mov	r0, r6
 8009460:	4639      	mov	r1, r7
 8009462:	f7f7 fb4b 	bl	8000afc <__aeabi_dcmplt>
 8009466:	2800      	cmp	r0, #0
 8009468:	d159      	bne.n	800951e <_strtod_l+0xa2e>
 800946a:	4630      	mov	r0, r6
 800946c:	4639      	mov	r1, r7
 800946e:	4b60      	ldr	r3, [pc, #384]	@ (80095f0 <_strtod_l+0xb00>)
 8009470:	2200      	movs	r2, #0
 8009472:	f7f7 f8d1 	bl	8000618 <__aeabi_dmul>
 8009476:	4606      	mov	r6, r0
 8009478:	460f      	mov	r7, r1
 800947a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800947e:	9606      	str	r6, [sp, #24]
 8009480:	9307      	str	r3, [sp, #28]
 8009482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009486:	4d57      	ldr	r5, [pc, #348]	@ (80095e4 <_strtod_l+0xaf4>)
 8009488:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800948c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800948e:	401d      	ands	r5, r3
 8009490:	4b58      	ldr	r3, [pc, #352]	@ (80095f4 <_strtod_l+0xb04>)
 8009492:	429d      	cmp	r5, r3
 8009494:	f040 80b2 	bne.w	80095fc <_strtod_l+0xb0c>
 8009498:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800949a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800949e:	ec4b ab10 	vmov	d0, sl, fp
 80094a2:	f7ff f9c9 	bl	8008838 <__ulp>
 80094a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094aa:	ec51 0b10 	vmov	r0, r1, d0
 80094ae:	f7f7 f8b3 	bl	8000618 <__aeabi_dmul>
 80094b2:	4652      	mov	r2, sl
 80094b4:	465b      	mov	r3, fp
 80094b6:	f7f6 fef9 	bl	80002ac <__adddf3>
 80094ba:	460b      	mov	r3, r1
 80094bc:	4949      	ldr	r1, [pc, #292]	@ (80095e4 <_strtod_l+0xaf4>)
 80094be:	4a4e      	ldr	r2, [pc, #312]	@ (80095f8 <_strtod_l+0xb08>)
 80094c0:	4019      	ands	r1, r3
 80094c2:	4291      	cmp	r1, r2
 80094c4:	4682      	mov	sl, r0
 80094c6:	d942      	bls.n	800954e <_strtod_l+0xa5e>
 80094c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094ca:	4b47      	ldr	r3, [pc, #284]	@ (80095e8 <_strtod_l+0xaf8>)
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d103      	bne.n	80094d8 <_strtod_l+0x9e8>
 80094d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094d2:	3301      	adds	r3, #1
 80094d4:	f43f ad2b 	beq.w	8008f2e <_strtod_l+0x43e>
 80094d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80095e8 <_strtod_l+0xaf8>
 80094dc:	f04f 3aff 	mov.w	sl, #4294967295
 80094e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094e2:	9805      	ldr	r0, [sp, #20]
 80094e4:	f7fe fe74 	bl	80081d0 <_Bfree>
 80094e8:	9805      	ldr	r0, [sp, #20]
 80094ea:	4649      	mov	r1, r9
 80094ec:	f7fe fe70 	bl	80081d0 <_Bfree>
 80094f0:	9805      	ldr	r0, [sp, #20]
 80094f2:	4641      	mov	r1, r8
 80094f4:	f7fe fe6c 	bl	80081d0 <_Bfree>
 80094f8:	9805      	ldr	r0, [sp, #20]
 80094fa:	4621      	mov	r1, r4
 80094fc:	f7fe fe68 	bl	80081d0 <_Bfree>
 8009500:	e618      	b.n	8009134 <_strtod_l+0x644>
 8009502:	f1ba 0f01 	cmp.w	sl, #1
 8009506:	d103      	bne.n	8009510 <_strtod_l+0xa20>
 8009508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800950a:	2b00      	cmp	r3, #0
 800950c:	f43f ada5 	beq.w	800905a <_strtod_l+0x56a>
 8009510:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80095c0 <_strtod_l+0xad0>
 8009514:	4f35      	ldr	r7, [pc, #212]	@ (80095ec <_strtod_l+0xafc>)
 8009516:	ed8d 7b06 	vstr	d7, [sp, #24]
 800951a:	2600      	movs	r6, #0
 800951c:	e7b1      	b.n	8009482 <_strtod_l+0x992>
 800951e:	4f34      	ldr	r7, [pc, #208]	@ (80095f0 <_strtod_l+0xb00>)
 8009520:	2600      	movs	r6, #0
 8009522:	e7aa      	b.n	800947a <_strtod_l+0x98a>
 8009524:	4b32      	ldr	r3, [pc, #200]	@ (80095f0 <_strtod_l+0xb00>)
 8009526:	4630      	mov	r0, r6
 8009528:	4639      	mov	r1, r7
 800952a:	2200      	movs	r2, #0
 800952c:	f7f7 f874 	bl	8000618 <__aeabi_dmul>
 8009530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009532:	4606      	mov	r6, r0
 8009534:	460f      	mov	r7, r1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d09f      	beq.n	800947a <_strtod_l+0x98a>
 800953a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800953e:	e7a0      	b.n	8009482 <_strtod_l+0x992>
 8009540:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80095c8 <_strtod_l+0xad8>
 8009544:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009548:	ec57 6b17 	vmov	r6, r7, d7
 800954c:	e799      	b.n	8009482 <_strtod_l+0x992>
 800954e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009552:	9b08      	ldr	r3, [sp, #32]
 8009554:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1c1      	bne.n	80094e0 <_strtod_l+0x9f0>
 800955c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009560:	0d1b      	lsrs	r3, r3, #20
 8009562:	051b      	lsls	r3, r3, #20
 8009564:	429d      	cmp	r5, r3
 8009566:	d1bb      	bne.n	80094e0 <_strtod_l+0x9f0>
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f7 fd1a 	bl	8000fa4 <__aeabi_d2lz>
 8009570:	f7f7 f824 	bl	80005bc <__aeabi_l2d>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	4630      	mov	r0, r6
 800957a:	4639      	mov	r1, r7
 800957c:	f7f6 fe94 	bl	80002a8 <__aeabi_dsub>
 8009580:	460b      	mov	r3, r1
 8009582:	4602      	mov	r2, r0
 8009584:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009588:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800958c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800958e:	ea46 060a 	orr.w	r6, r6, sl
 8009592:	431e      	orrs	r6, r3
 8009594:	d06f      	beq.n	8009676 <_strtod_l+0xb86>
 8009596:	a30e      	add	r3, pc, #56	@ (adr r3, 80095d0 <_strtod_l+0xae0>)
 8009598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959c:	f7f7 faae 	bl	8000afc <__aeabi_dcmplt>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	f47f accf 	bne.w	8008f44 <_strtod_l+0x454>
 80095a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80095d8 <_strtod_l+0xae8>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095b0:	f7f7 fac2 	bl	8000b38 <__aeabi_dcmpgt>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d093      	beq.n	80094e0 <_strtod_l+0x9f0>
 80095b8:	e4c4      	b.n	8008f44 <_strtod_l+0x454>
 80095ba:	bf00      	nop
 80095bc:	f3af 8000 	nop.w
 80095c0:	00000000 	.word	0x00000000
 80095c4:	bff00000 	.word	0xbff00000
 80095c8:	00000000 	.word	0x00000000
 80095cc:	3ff00000 	.word	0x3ff00000
 80095d0:	94a03595 	.word	0x94a03595
 80095d4:	3fdfffff 	.word	0x3fdfffff
 80095d8:	35afe535 	.word	0x35afe535
 80095dc:	3fe00000 	.word	0x3fe00000
 80095e0:	000fffff 	.word	0x000fffff
 80095e4:	7ff00000 	.word	0x7ff00000
 80095e8:	7fefffff 	.word	0x7fefffff
 80095ec:	3ff00000 	.word	0x3ff00000
 80095f0:	3fe00000 	.word	0x3fe00000
 80095f4:	7fe00000 	.word	0x7fe00000
 80095f8:	7c9fffff 	.word	0x7c9fffff
 80095fc:	9b08      	ldr	r3, [sp, #32]
 80095fe:	b323      	cbz	r3, 800964a <_strtod_l+0xb5a>
 8009600:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009604:	d821      	bhi.n	800964a <_strtod_l+0xb5a>
 8009606:	a328      	add	r3, pc, #160	@ (adr r3, 80096a8 <_strtod_l+0xbb8>)
 8009608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960c:	4630      	mov	r0, r6
 800960e:	4639      	mov	r1, r7
 8009610:	f7f7 fa7e 	bl	8000b10 <__aeabi_dcmple>
 8009614:	b1a0      	cbz	r0, 8009640 <_strtod_l+0xb50>
 8009616:	4639      	mov	r1, r7
 8009618:	4630      	mov	r0, r6
 800961a:	f7f7 fad5 	bl	8000bc8 <__aeabi_d2uiz>
 800961e:	2801      	cmp	r0, #1
 8009620:	bf38      	it	cc
 8009622:	2001      	movcc	r0, #1
 8009624:	f7f6 ff7e 	bl	8000524 <__aeabi_ui2d>
 8009628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962a:	4606      	mov	r6, r0
 800962c:	460f      	mov	r7, r1
 800962e:	b9fb      	cbnz	r3, 8009670 <_strtod_l+0xb80>
 8009630:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009634:	9014      	str	r0, [sp, #80]	@ 0x50
 8009636:	9315      	str	r3, [sp, #84]	@ 0x54
 8009638:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800963c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009640:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009642:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009646:	1b5b      	subs	r3, r3, r5
 8009648:	9311      	str	r3, [sp, #68]	@ 0x44
 800964a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800964e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009652:	f7ff f8f1 	bl	8008838 <__ulp>
 8009656:	4650      	mov	r0, sl
 8009658:	ec53 2b10 	vmov	r2, r3, d0
 800965c:	4659      	mov	r1, fp
 800965e:	f7f6 ffdb 	bl	8000618 <__aeabi_dmul>
 8009662:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009666:	f7f6 fe21 	bl	80002ac <__adddf3>
 800966a:	4682      	mov	sl, r0
 800966c:	468b      	mov	fp, r1
 800966e:	e770      	b.n	8009552 <_strtod_l+0xa62>
 8009670:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009674:	e7e0      	b.n	8009638 <_strtod_l+0xb48>
 8009676:	a30e      	add	r3, pc, #56	@ (adr r3, 80096b0 <_strtod_l+0xbc0>)
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f7 fa3e 	bl	8000afc <__aeabi_dcmplt>
 8009680:	e798      	b.n	80095b4 <_strtod_l+0xac4>
 8009682:	2300      	movs	r3, #0
 8009684:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009686:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	f7ff ba6d 	b.w	8008b6a <_strtod_l+0x7a>
 8009690:	2a65      	cmp	r2, #101	@ 0x65
 8009692:	f43f ab66 	beq.w	8008d62 <_strtod_l+0x272>
 8009696:	2a45      	cmp	r2, #69	@ 0x45
 8009698:	f43f ab63 	beq.w	8008d62 <_strtod_l+0x272>
 800969c:	2301      	movs	r3, #1
 800969e:	f7ff bb9e 	b.w	8008dde <_strtod_l+0x2ee>
 80096a2:	bf00      	nop
 80096a4:	f3af 8000 	nop.w
 80096a8:	ffc00000 	.word	0xffc00000
 80096ac:	41dfffff 	.word	0x41dfffff
 80096b0:	94a03595 	.word	0x94a03595
 80096b4:	3fcfffff 	.word	0x3fcfffff

080096b8 <_strtod_r>:
 80096b8:	4b01      	ldr	r3, [pc, #4]	@ (80096c0 <_strtod_r+0x8>)
 80096ba:	f7ff ba19 	b.w	8008af0 <_strtod_l>
 80096be:	bf00      	nop
 80096c0:	20000078 	.word	0x20000078

080096c4 <_strtol_l.constprop.0>:
 80096c4:	2b24      	cmp	r3, #36	@ 0x24
 80096c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096ca:	4686      	mov	lr, r0
 80096cc:	4690      	mov	r8, r2
 80096ce:	d801      	bhi.n	80096d4 <_strtol_l.constprop.0+0x10>
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d106      	bne.n	80096e2 <_strtol_l.constprop.0+0x1e>
 80096d4:	f7fd fdba 	bl	800724c <__errno>
 80096d8:	2316      	movs	r3, #22
 80096da:	6003      	str	r3, [r0, #0]
 80096dc:	2000      	movs	r0, #0
 80096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e2:	4834      	ldr	r0, [pc, #208]	@ (80097b4 <_strtol_l.constprop.0+0xf0>)
 80096e4:	460d      	mov	r5, r1
 80096e6:	462a      	mov	r2, r5
 80096e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096ec:	5d06      	ldrb	r6, [r0, r4]
 80096ee:	f016 0608 	ands.w	r6, r6, #8
 80096f2:	d1f8      	bne.n	80096e6 <_strtol_l.constprop.0+0x22>
 80096f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80096f6:	d12d      	bne.n	8009754 <_strtol_l.constprop.0+0x90>
 80096f8:	782c      	ldrb	r4, [r5, #0]
 80096fa:	2601      	movs	r6, #1
 80096fc:	1c95      	adds	r5, r2, #2
 80096fe:	f033 0210 	bics.w	r2, r3, #16
 8009702:	d109      	bne.n	8009718 <_strtol_l.constprop.0+0x54>
 8009704:	2c30      	cmp	r4, #48	@ 0x30
 8009706:	d12a      	bne.n	800975e <_strtol_l.constprop.0+0x9a>
 8009708:	782a      	ldrb	r2, [r5, #0]
 800970a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800970e:	2a58      	cmp	r2, #88	@ 0x58
 8009710:	d125      	bne.n	800975e <_strtol_l.constprop.0+0x9a>
 8009712:	786c      	ldrb	r4, [r5, #1]
 8009714:	2310      	movs	r3, #16
 8009716:	3502      	adds	r5, #2
 8009718:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800971c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009720:	2200      	movs	r2, #0
 8009722:	fbbc f9f3 	udiv	r9, ip, r3
 8009726:	4610      	mov	r0, r2
 8009728:	fb03 ca19 	mls	sl, r3, r9, ip
 800972c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009730:	2f09      	cmp	r7, #9
 8009732:	d81b      	bhi.n	800976c <_strtol_l.constprop.0+0xa8>
 8009734:	463c      	mov	r4, r7
 8009736:	42a3      	cmp	r3, r4
 8009738:	dd27      	ble.n	800978a <_strtol_l.constprop.0+0xc6>
 800973a:	1c57      	adds	r7, r2, #1
 800973c:	d007      	beq.n	800974e <_strtol_l.constprop.0+0x8a>
 800973e:	4581      	cmp	r9, r0
 8009740:	d320      	bcc.n	8009784 <_strtol_l.constprop.0+0xc0>
 8009742:	d101      	bne.n	8009748 <_strtol_l.constprop.0+0x84>
 8009744:	45a2      	cmp	sl, r4
 8009746:	db1d      	blt.n	8009784 <_strtol_l.constprop.0+0xc0>
 8009748:	fb00 4003 	mla	r0, r0, r3, r4
 800974c:	2201      	movs	r2, #1
 800974e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009752:	e7eb      	b.n	800972c <_strtol_l.constprop.0+0x68>
 8009754:	2c2b      	cmp	r4, #43	@ 0x2b
 8009756:	bf04      	itt	eq
 8009758:	782c      	ldrbeq	r4, [r5, #0]
 800975a:	1c95      	addeq	r5, r2, #2
 800975c:	e7cf      	b.n	80096fe <_strtol_l.constprop.0+0x3a>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1da      	bne.n	8009718 <_strtol_l.constprop.0+0x54>
 8009762:	2c30      	cmp	r4, #48	@ 0x30
 8009764:	bf0c      	ite	eq
 8009766:	2308      	moveq	r3, #8
 8009768:	230a      	movne	r3, #10
 800976a:	e7d5      	b.n	8009718 <_strtol_l.constprop.0+0x54>
 800976c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009770:	2f19      	cmp	r7, #25
 8009772:	d801      	bhi.n	8009778 <_strtol_l.constprop.0+0xb4>
 8009774:	3c37      	subs	r4, #55	@ 0x37
 8009776:	e7de      	b.n	8009736 <_strtol_l.constprop.0+0x72>
 8009778:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800977c:	2f19      	cmp	r7, #25
 800977e:	d804      	bhi.n	800978a <_strtol_l.constprop.0+0xc6>
 8009780:	3c57      	subs	r4, #87	@ 0x57
 8009782:	e7d8      	b.n	8009736 <_strtol_l.constprop.0+0x72>
 8009784:	f04f 32ff 	mov.w	r2, #4294967295
 8009788:	e7e1      	b.n	800974e <_strtol_l.constprop.0+0x8a>
 800978a:	1c53      	adds	r3, r2, #1
 800978c:	d108      	bne.n	80097a0 <_strtol_l.constprop.0+0xdc>
 800978e:	2322      	movs	r3, #34	@ 0x22
 8009790:	f8ce 3000 	str.w	r3, [lr]
 8009794:	4660      	mov	r0, ip
 8009796:	f1b8 0f00 	cmp.w	r8, #0
 800979a:	d0a0      	beq.n	80096de <_strtol_l.constprop.0+0x1a>
 800979c:	1e69      	subs	r1, r5, #1
 800979e:	e006      	b.n	80097ae <_strtol_l.constprop.0+0xea>
 80097a0:	b106      	cbz	r6, 80097a4 <_strtol_l.constprop.0+0xe0>
 80097a2:	4240      	negs	r0, r0
 80097a4:	f1b8 0f00 	cmp.w	r8, #0
 80097a8:	d099      	beq.n	80096de <_strtol_l.constprop.0+0x1a>
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	d1f6      	bne.n	800979c <_strtol_l.constprop.0+0xd8>
 80097ae:	f8c8 1000 	str.w	r1, [r8]
 80097b2:	e794      	b.n	80096de <_strtol_l.constprop.0+0x1a>
 80097b4:	0800cb91 	.word	0x0800cb91

080097b8 <_strtol_r>:
 80097b8:	f7ff bf84 	b.w	80096c4 <_strtol_l.constprop.0>

080097bc <__ssputs_r>:
 80097bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c0:	688e      	ldr	r6, [r1, #8]
 80097c2:	461f      	mov	r7, r3
 80097c4:	42be      	cmp	r6, r7
 80097c6:	680b      	ldr	r3, [r1, #0]
 80097c8:	4682      	mov	sl, r0
 80097ca:	460c      	mov	r4, r1
 80097cc:	4690      	mov	r8, r2
 80097ce:	d82d      	bhi.n	800982c <__ssputs_r+0x70>
 80097d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097d8:	d026      	beq.n	8009828 <__ssputs_r+0x6c>
 80097da:	6965      	ldr	r5, [r4, #20]
 80097dc:	6909      	ldr	r1, [r1, #16]
 80097de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097e2:	eba3 0901 	sub.w	r9, r3, r1
 80097e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097ea:	1c7b      	adds	r3, r7, #1
 80097ec:	444b      	add	r3, r9
 80097ee:	106d      	asrs	r5, r5, #1
 80097f0:	429d      	cmp	r5, r3
 80097f2:	bf38      	it	cc
 80097f4:	461d      	movcc	r5, r3
 80097f6:	0553      	lsls	r3, r2, #21
 80097f8:	d527      	bpl.n	800984a <__ssputs_r+0x8e>
 80097fa:	4629      	mov	r1, r5
 80097fc:	f7fe fc1c 	bl	8008038 <_malloc_r>
 8009800:	4606      	mov	r6, r0
 8009802:	b360      	cbz	r0, 800985e <__ssputs_r+0xa2>
 8009804:	6921      	ldr	r1, [r4, #16]
 8009806:	464a      	mov	r2, r9
 8009808:	f000 fbee 	bl	8009fe8 <memcpy>
 800980c:	89a3      	ldrh	r3, [r4, #12]
 800980e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009812:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	6126      	str	r6, [r4, #16]
 800981a:	6165      	str	r5, [r4, #20]
 800981c:	444e      	add	r6, r9
 800981e:	eba5 0509 	sub.w	r5, r5, r9
 8009822:	6026      	str	r6, [r4, #0]
 8009824:	60a5      	str	r5, [r4, #8]
 8009826:	463e      	mov	r6, r7
 8009828:	42be      	cmp	r6, r7
 800982a:	d900      	bls.n	800982e <__ssputs_r+0x72>
 800982c:	463e      	mov	r6, r7
 800982e:	6820      	ldr	r0, [r4, #0]
 8009830:	4632      	mov	r2, r6
 8009832:	4641      	mov	r1, r8
 8009834:	f000 fb9c 	bl	8009f70 <memmove>
 8009838:	68a3      	ldr	r3, [r4, #8]
 800983a:	1b9b      	subs	r3, r3, r6
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	4433      	add	r3, r6
 8009842:	6023      	str	r3, [r4, #0]
 8009844:	2000      	movs	r0, #0
 8009846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984a:	462a      	mov	r2, r5
 800984c:	f000 ff61 	bl	800a712 <_realloc_r>
 8009850:	4606      	mov	r6, r0
 8009852:	2800      	cmp	r0, #0
 8009854:	d1e0      	bne.n	8009818 <__ssputs_r+0x5c>
 8009856:	6921      	ldr	r1, [r4, #16]
 8009858:	4650      	mov	r0, sl
 800985a:	f7fe fb79 	bl	8007f50 <_free_r>
 800985e:	230c      	movs	r3, #12
 8009860:	f8ca 3000 	str.w	r3, [sl]
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800986a:	81a3      	strh	r3, [r4, #12]
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	e7e9      	b.n	8009846 <__ssputs_r+0x8a>
	...

08009874 <_svfiprintf_r>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	4698      	mov	r8, r3
 800987a:	898b      	ldrh	r3, [r1, #12]
 800987c:	061b      	lsls	r3, r3, #24
 800987e:	b09d      	sub	sp, #116	@ 0x74
 8009880:	4607      	mov	r7, r0
 8009882:	460d      	mov	r5, r1
 8009884:	4614      	mov	r4, r2
 8009886:	d510      	bpl.n	80098aa <_svfiprintf_r+0x36>
 8009888:	690b      	ldr	r3, [r1, #16]
 800988a:	b973      	cbnz	r3, 80098aa <_svfiprintf_r+0x36>
 800988c:	2140      	movs	r1, #64	@ 0x40
 800988e:	f7fe fbd3 	bl	8008038 <_malloc_r>
 8009892:	6028      	str	r0, [r5, #0]
 8009894:	6128      	str	r0, [r5, #16]
 8009896:	b930      	cbnz	r0, 80098a6 <_svfiprintf_r+0x32>
 8009898:	230c      	movs	r3, #12
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	f04f 30ff 	mov.w	r0, #4294967295
 80098a0:	b01d      	add	sp, #116	@ 0x74
 80098a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a6:	2340      	movs	r3, #64	@ 0x40
 80098a8:	616b      	str	r3, [r5, #20]
 80098aa:	2300      	movs	r3, #0
 80098ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ae:	2320      	movs	r3, #32
 80098b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80098b8:	2330      	movs	r3, #48	@ 0x30
 80098ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a58 <_svfiprintf_r+0x1e4>
 80098be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098c2:	f04f 0901 	mov.w	r9, #1
 80098c6:	4623      	mov	r3, r4
 80098c8:	469a      	mov	sl, r3
 80098ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ce:	b10a      	cbz	r2, 80098d4 <_svfiprintf_r+0x60>
 80098d0:	2a25      	cmp	r2, #37	@ 0x25
 80098d2:	d1f9      	bne.n	80098c8 <_svfiprintf_r+0x54>
 80098d4:	ebba 0b04 	subs.w	fp, sl, r4
 80098d8:	d00b      	beq.n	80098f2 <_svfiprintf_r+0x7e>
 80098da:	465b      	mov	r3, fp
 80098dc:	4622      	mov	r2, r4
 80098de:	4629      	mov	r1, r5
 80098e0:	4638      	mov	r0, r7
 80098e2:	f7ff ff6b 	bl	80097bc <__ssputs_r>
 80098e6:	3001      	adds	r0, #1
 80098e8:	f000 80a7 	beq.w	8009a3a <_svfiprintf_r+0x1c6>
 80098ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ee:	445a      	add	r2, fp
 80098f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80098f2:	f89a 3000 	ldrb.w	r3, [sl]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 809f 	beq.w	8009a3a <_svfiprintf_r+0x1c6>
 80098fc:	2300      	movs	r3, #0
 80098fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009906:	f10a 0a01 	add.w	sl, sl, #1
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	9307      	str	r3, [sp, #28]
 800990e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009912:	931a      	str	r3, [sp, #104]	@ 0x68
 8009914:	4654      	mov	r4, sl
 8009916:	2205      	movs	r2, #5
 8009918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800991c:	484e      	ldr	r0, [pc, #312]	@ (8009a58 <_svfiprintf_r+0x1e4>)
 800991e:	f7f6 fc67 	bl	80001f0 <memchr>
 8009922:	9a04      	ldr	r2, [sp, #16]
 8009924:	b9d8      	cbnz	r0, 800995e <_svfiprintf_r+0xea>
 8009926:	06d0      	lsls	r0, r2, #27
 8009928:	bf44      	itt	mi
 800992a:	2320      	movmi	r3, #32
 800992c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009930:	0711      	lsls	r1, r2, #28
 8009932:	bf44      	itt	mi
 8009934:	232b      	movmi	r3, #43	@ 0x2b
 8009936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800993a:	f89a 3000 	ldrb.w	r3, [sl]
 800993e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009940:	d015      	beq.n	800996e <_svfiprintf_r+0xfa>
 8009942:	9a07      	ldr	r2, [sp, #28]
 8009944:	4654      	mov	r4, sl
 8009946:	2000      	movs	r0, #0
 8009948:	f04f 0c0a 	mov.w	ip, #10
 800994c:	4621      	mov	r1, r4
 800994e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009952:	3b30      	subs	r3, #48	@ 0x30
 8009954:	2b09      	cmp	r3, #9
 8009956:	d94b      	bls.n	80099f0 <_svfiprintf_r+0x17c>
 8009958:	b1b0      	cbz	r0, 8009988 <_svfiprintf_r+0x114>
 800995a:	9207      	str	r2, [sp, #28]
 800995c:	e014      	b.n	8009988 <_svfiprintf_r+0x114>
 800995e:	eba0 0308 	sub.w	r3, r0, r8
 8009962:	fa09 f303 	lsl.w	r3, r9, r3
 8009966:	4313      	orrs	r3, r2
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	46a2      	mov	sl, r4
 800996c:	e7d2      	b.n	8009914 <_svfiprintf_r+0xa0>
 800996e:	9b03      	ldr	r3, [sp, #12]
 8009970:	1d19      	adds	r1, r3, #4
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	9103      	str	r1, [sp, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	bfbb      	ittet	lt
 800997a:	425b      	neglt	r3, r3
 800997c:	f042 0202 	orrlt.w	r2, r2, #2
 8009980:	9307      	strge	r3, [sp, #28]
 8009982:	9307      	strlt	r3, [sp, #28]
 8009984:	bfb8      	it	lt
 8009986:	9204      	strlt	r2, [sp, #16]
 8009988:	7823      	ldrb	r3, [r4, #0]
 800998a:	2b2e      	cmp	r3, #46	@ 0x2e
 800998c:	d10a      	bne.n	80099a4 <_svfiprintf_r+0x130>
 800998e:	7863      	ldrb	r3, [r4, #1]
 8009990:	2b2a      	cmp	r3, #42	@ 0x2a
 8009992:	d132      	bne.n	80099fa <_svfiprintf_r+0x186>
 8009994:	9b03      	ldr	r3, [sp, #12]
 8009996:	1d1a      	adds	r2, r3, #4
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	9203      	str	r2, [sp, #12]
 800999c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099a0:	3402      	adds	r4, #2
 80099a2:	9305      	str	r3, [sp, #20]
 80099a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a68 <_svfiprintf_r+0x1f4>
 80099a8:	7821      	ldrb	r1, [r4, #0]
 80099aa:	2203      	movs	r2, #3
 80099ac:	4650      	mov	r0, sl
 80099ae:	f7f6 fc1f 	bl	80001f0 <memchr>
 80099b2:	b138      	cbz	r0, 80099c4 <_svfiprintf_r+0x150>
 80099b4:	9b04      	ldr	r3, [sp, #16]
 80099b6:	eba0 000a 	sub.w	r0, r0, sl
 80099ba:	2240      	movs	r2, #64	@ 0x40
 80099bc:	4082      	lsls	r2, r0
 80099be:	4313      	orrs	r3, r2
 80099c0:	3401      	adds	r4, #1
 80099c2:	9304      	str	r3, [sp, #16]
 80099c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c8:	4824      	ldr	r0, [pc, #144]	@ (8009a5c <_svfiprintf_r+0x1e8>)
 80099ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099ce:	2206      	movs	r2, #6
 80099d0:	f7f6 fc0e 	bl	80001f0 <memchr>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d036      	beq.n	8009a46 <_svfiprintf_r+0x1d2>
 80099d8:	4b21      	ldr	r3, [pc, #132]	@ (8009a60 <_svfiprintf_r+0x1ec>)
 80099da:	bb1b      	cbnz	r3, 8009a24 <_svfiprintf_r+0x1b0>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	3307      	adds	r3, #7
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	3308      	adds	r3, #8
 80099e6:	9303      	str	r3, [sp, #12]
 80099e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ea:	4433      	add	r3, r6
 80099ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ee:	e76a      	b.n	80098c6 <_svfiprintf_r+0x52>
 80099f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099f4:	460c      	mov	r4, r1
 80099f6:	2001      	movs	r0, #1
 80099f8:	e7a8      	b.n	800994c <_svfiprintf_r+0xd8>
 80099fa:	2300      	movs	r3, #0
 80099fc:	3401      	adds	r4, #1
 80099fe:	9305      	str	r3, [sp, #20]
 8009a00:	4619      	mov	r1, r3
 8009a02:	f04f 0c0a 	mov.w	ip, #10
 8009a06:	4620      	mov	r0, r4
 8009a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a0c:	3a30      	subs	r2, #48	@ 0x30
 8009a0e:	2a09      	cmp	r2, #9
 8009a10:	d903      	bls.n	8009a1a <_svfiprintf_r+0x1a6>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0c6      	beq.n	80099a4 <_svfiprintf_r+0x130>
 8009a16:	9105      	str	r1, [sp, #20]
 8009a18:	e7c4      	b.n	80099a4 <_svfiprintf_r+0x130>
 8009a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a1e:	4604      	mov	r4, r0
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7f0      	b.n	8009a06 <_svfiprintf_r+0x192>
 8009a24:	ab03      	add	r3, sp, #12
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a64 <_svfiprintf_r+0x1f0>)
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f7fc fcc8 	bl	80063c4 <_printf_float>
 8009a34:	1c42      	adds	r2, r0, #1
 8009a36:	4606      	mov	r6, r0
 8009a38:	d1d6      	bne.n	80099e8 <_svfiprintf_r+0x174>
 8009a3a:	89ab      	ldrh	r3, [r5, #12]
 8009a3c:	065b      	lsls	r3, r3, #25
 8009a3e:	f53f af2d 	bmi.w	800989c <_svfiprintf_r+0x28>
 8009a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a44:	e72c      	b.n	80098a0 <_svfiprintf_r+0x2c>
 8009a46:	ab03      	add	r3, sp, #12
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	4b05      	ldr	r3, [pc, #20]	@ (8009a64 <_svfiprintf_r+0x1f0>)
 8009a4e:	a904      	add	r1, sp, #16
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7fc ff4f 	bl	80068f4 <_printf_i>
 8009a56:	e7ed      	b.n	8009a34 <_svfiprintf_r+0x1c0>
 8009a58:	0800cc91 	.word	0x0800cc91
 8009a5c:	0800cc9b 	.word	0x0800cc9b
 8009a60:	080063c5 	.word	0x080063c5
 8009a64:	080097bd 	.word	0x080097bd
 8009a68:	0800cc97 	.word	0x0800cc97

08009a6c <__sfputc_r>:
 8009a6c:	6893      	ldr	r3, [r2, #8]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	b410      	push	{r4}
 8009a74:	6093      	str	r3, [r2, #8]
 8009a76:	da08      	bge.n	8009a8a <__sfputc_r+0x1e>
 8009a78:	6994      	ldr	r4, [r2, #24]
 8009a7a:	42a3      	cmp	r3, r4
 8009a7c:	db01      	blt.n	8009a82 <__sfputc_r+0x16>
 8009a7e:	290a      	cmp	r1, #10
 8009a80:	d103      	bne.n	8009a8a <__sfputc_r+0x1e>
 8009a82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a86:	f000 b9df 	b.w	8009e48 <__swbuf_r>
 8009a8a:	6813      	ldr	r3, [r2, #0]
 8009a8c:	1c58      	adds	r0, r3, #1
 8009a8e:	6010      	str	r0, [r2, #0]
 8009a90:	7019      	strb	r1, [r3, #0]
 8009a92:	4608      	mov	r0, r1
 8009a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a98:	4770      	bx	lr

08009a9a <__sfputs_r>:
 8009a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	460f      	mov	r7, r1
 8009aa0:	4614      	mov	r4, r2
 8009aa2:	18d5      	adds	r5, r2, r3
 8009aa4:	42ac      	cmp	r4, r5
 8009aa6:	d101      	bne.n	8009aac <__sfputs_r+0x12>
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	e007      	b.n	8009abc <__sfputs_r+0x22>
 8009aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab0:	463a      	mov	r2, r7
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ffda 	bl	8009a6c <__sfputc_r>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d1f3      	bne.n	8009aa4 <__sfputs_r+0xa>
 8009abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ac0 <_vfiprintf_r>:
 8009ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	b09d      	sub	sp, #116	@ 0x74
 8009ac8:	4614      	mov	r4, r2
 8009aca:	4698      	mov	r8, r3
 8009acc:	4606      	mov	r6, r0
 8009ace:	b118      	cbz	r0, 8009ad8 <_vfiprintf_r+0x18>
 8009ad0:	6a03      	ldr	r3, [r0, #32]
 8009ad2:	b90b      	cbnz	r3, 8009ad8 <_vfiprintf_r+0x18>
 8009ad4:	f7fd face 	bl	8007074 <__sinit>
 8009ad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ada:	07d9      	lsls	r1, r3, #31
 8009adc:	d405      	bmi.n	8009aea <_vfiprintf_r+0x2a>
 8009ade:	89ab      	ldrh	r3, [r5, #12]
 8009ae0:	059a      	lsls	r2, r3, #22
 8009ae2:	d402      	bmi.n	8009aea <_vfiprintf_r+0x2a>
 8009ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ae6:	f7fd fbdc 	bl	80072a2 <__retarget_lock_acquire_recursive>
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	071b      	lsls	r3, r3, #28
 8009aee:	d501      	bpl.n	8009af4 <_vfiprintf_r+0x34>
 8009af0:	692b      	ldr	r3, [r5, #16]
 8009af2:	b99b      	cbnz	r3, 8009b1c <_vfiprintf_r+0x5c>
 8009af4:	4629      	mov	r1, r5
 8009af6:	4630      	mov	r0, r6
 8009af8:	f000 f9e4 	bl	8009ec4 <__swsetup_r>
 8009afc:	b170      	cbz	r0, 8009b1c <_vfiprintf_r+0x5c>
 8009afe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b00:	07dc      	lsls	r4, r3, #31
 8009b02:	d504      	bpl.n	8009b0e <_vfiprintf_r+0x4e>
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	b01d      	add	sp, #116	@ 0x74
 8009b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0e:	89ab      	ldrh	r3, [r5, #12]
 8009b10:	0598      	lsls	r0, r3, #22
 8009b12:	d4f7      	bmi.n	8009b04 <_vfiprintf_r+0x44>
 8009b14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b16:	f7fd fbc5 	bl	80072a4 <__retarget_lock_release_recursive>
 8009b1a:	e7f3      	b.n	8009b04 <_vfiprintf_r+0x44>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b20:	2320      	movs	r3, #32
 8009b22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b2a:	2330      	movs	r3, #48	@ 0x30
 8009b2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009cdc <_vfiprintf_r+0x21c>
 8009b30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b34:	f04f 0901 	mov.w	r9, #1
 8009b38:	4623      	mov	r3, r4
 8009b3a:	469a      	mov	sl, r3
 8009b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b40:	b10a      	cbz	r2, 8009b46 <_vfiprintf_r+0x86>
 8009b42:	2a25      	cmp	r2, #37	@ 0x25
 8009b44:	d1f9      	bne.n	8009b3a <_vfiprintf_r+0x7a>
 8009b46:	ebba 0b04 	subs.w	fp, sl, r4
 8009b4a:	d00b      	beq.n	8009b64 <_vfiprintf_r+0xa4>
 8009b4c:	465b      	mov	r3, fp
 8009b4e:	4622      	mov	r2, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7ff ffa1 	bl	8009a9a <__sfputs_r>
 8009b58:	3001      	adds	r0, #1
 8009b5a:	f000 80a7 	beq.w	8009cac <_vfiprintf_r+0x1ec>
 8009b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b60:	445a      	add	r2, fp
 8009b62:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b64:	f89a 3000 	ldrb.w	r3, [sl]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 809f 	beq.w	8009cac <_vfiprintf_r+0x1ec>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f04f 32ff 	mov.w	r2, #4294967295
 8009b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b78:	f10a 0a01 	add.w	sl, sl, #1
 8009b7c:	9304      	str	r3, [sp, #16]
 8009b7e:	9307      	str	r3, [sp, #28]
 8009b80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b84:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b86:	4654      	mov	r4, sl
 8009b88:	2205      	movs	r2, #5
 8009b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b8e:	4853      	ldr	r0, [pc, #332]	@ (8009cdc <_vfiprintf_r+0x21c>)
 8009b90:	f7f6 fb2e 	bl	80001f0 <memchr>
 8009b94:	9a04      	ldr	r2, [sp, #16]
 8009b96:	b9d8      	cbnz	r0, 8009bd0 <_vfiprintf_r+0x110>
 8009b98:	06d1      	lsls	r1, r2, #27
 8009b9a:	bf44      	itt	mi
 8009b9c:	2320      	movmi	r3, #32
 8009b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ba2:	0713      	lsls	r3, r2, #28
 8009ba4:	bf44      	itt	mi
 8009ba6:	232b      	movmi	r3, #43	@ 0x2b
 8009ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bac:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bb2:	d015      	beq.n	8009be0 <_vfiprintf_r+0x120>
 8009bb4:	9a07      	ldr	r2, [sp, #28]
 8009bb6:	4654      	mov	r4, sl
 8009bb8:	2000      	movs	r0, #0
 8009bba:	f04f 0c0a 	mov.w	ip, #10
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bc4:	3b30      	subs	r3, #48	@ 0x30
 8009bc6:	2b09      	cmp	r3, #9
 8009bc8:	d94b      	bls.n	8009c62 <_vfiprintf_r+0x1a2>
 8009bca:	b1b0      	cbz	r0, 8009bfa <_vfiprintf_r+0x13a>
 8009bcc:	9207      	str	r2, [sp, #28]
 8009bce:	e014      	b.n	8009bfa <_vfiprintf_r+0x13a>
 8009bd0:	eba0 0308 	sub.w	r3, r0, r8
 8009bd4:	fa09 f303 	lsl.w	r3, r9, r3
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	9304      	str	r3, [sp, #16]
 8009bdc:	46a2      	mov	sl, r4
 8009bde:	e7d2      	b.n	8009b86 <_vfiprintf_r+0xc6>
 8009be0:	9b03      	ldr	r3, [sp, #12]
 8009be2:	1d19      	adds	r1, r3, #4
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	9103      	str	r1, [sp, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	bfbb      	ittet	lt
 8009bec:	425b      	neglt	r3, r3
 8009bee:	f042 0202 	orrlt.w	r2, r2, #2
 8009bf2:	9307      	strge	r3, [sp, #28]
 8009bf4:	9307      	strlt	r3, [sp, #28]
 8009bf6:	bfb8      	it	lt
 8009bf8:	9204      	strlt	r2, [sp, #16]
 8009bfa:	7823      	ldrb	r3, [r4, #0]
 8009bfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bfe:	d10a      	bne.n	8009c16 <_vfiprintf_r+0x156>
 8009c00:	7863      	ldrb	r3, [r4, #1]
 8009c02:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c04:	d132      	bne.n	8009c6c <_vfiprintf_r+0x1ac>
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	1d1a      	adds	r2, r3, #4
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	9203      	str	r2, [sp, #12]
 8009c0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c12:	3402      	adds	r4, #2
 8009c14:	9305      	str	r3, [sp, #20]
 8009c16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cec <_vfiprintf_r+0x22c>
 8009c1a:	7821      	ldrb	r1, [r4, #0]
 8009c1c:	2203      	movs	r2, #3
 8009c1e:	4650      	mov	r0, sl
 8009c20:	f7f6 fae6 	bl	80001f0 <memchr>
 8009c24:	b138      	cbz	r0, 8009c36 <_vfiprintf_r+0x176>
 8009c26:	9b04      	ldr	r3, [sp, #16]
 8009c28:	eba0 000a 	sub.w	r0, r0, sl
 8009c2c:	2240      	movs	r2, #64	@ 0x40
 8009c2e:	4082      	lsls	r2, r0
 8009c30:	4313      	orrs	r3, r2
 8009c32:	3401      	adds	r4, #1
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3a:	4829      	ldr	r0, [pc, #164]	@ (8009ce0 <_vfiprintf_r+0x220>)
 8009c3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c40:	2206      	movs	r2, #6
 8009c42:	f7f6 fad5 	bl	80001f0 <memchr>
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d03f      	beq.n	8009cca <_vfiprintf_r+0x20a>
 8009c4a:	4b26      	ldr	r3, [pc, #152]	@ (8009ce4 <_vfiprintf_r+0x224>)
 8009c4c:	bb1b      	cbnz	r3, 8009c96 <_vfiprintf_r+0x1d6>
 8009c4e:	9b03      	ldr	r3, [sp, #12]
 8009c50:	3307      	adds	r3, #7
 8009c52:	f023 0307 	bic.w	r3, r3, #7
 8009c56:	3308      	adds	r3, #8
 8009c58:	9303      	str	r3, [sp, #12]
 8009c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c5c:	443b      	add	r3, r7
 8009c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c60:	e76a      	b.n	8009b38 <_vfiprintf_r+0x78>
 8009c62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c66:	460c      	mov	r4, r1
 8009c68:	2001      	movs	r0, #1
 8009c6a:	e7a8      	b.n	8009bbe <_vfiprintf_r+0xfe>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	3401      	adds	r4, #1
 8009c70:	9305      	str	r3, [sp, #20]
 8009c72:	4619      	mov	r1, r3
 8009c74:	f04f 0c0a 	mov.w	ip, #10
 8009c78:	4620      	mov	r0, r4
 8009c7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c7e:	3a30      	subs	r2, #48	@ 0x30
 8009c80:	2a09      	cmp	r2, #9
 8009c82:	d903      	bls.n	8009c8c <_vfiprintf_r+0x1cc>
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0c6      	beq.n	8009c16 <_vfiprintf_r+0x156>
 8009c88:	9105      	str	r1, [sp, #20]
 8009c8a:	e7c4      	b.n	8009c16 <_vfiprintf_r+0x156>
 8009c8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c90:	4604      	mov	r4, r0
 8009c92:	2301      	movs	r3, #1
 8009c94:	e7f0      	b.n	8009c78 <_vfiprintf_r+0x1b8>
 8009c96:	ab03      	add	r3, sp, #12
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	4b12      	ldr	r3, [pc, #72]	@ (8009ce8 <_vfiprintf_r+0x228>)
 8009c9e:	a904      	add	r1, sp, #16
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f7fc fb8f 	bl	80063c4 <_printf_float>
 8009ca6:	4607      	mov	r7, r0
 8009ca8:	1c78      	adds	r0, r7, #1
 8009caa:	d1d6      	bne.n	8009c5a <_vfiprintf_r+0x19a>
 8009cac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cae:	07d9      	lsls	r1, r3, #31
 8009cb0:	d405      	bmi.n	8009cbe <_vfiprintf_r+0x1fe>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	059a      	lsls	r2, r3, #22
 8009cb6:	d402      	bmi.n	8009cbe <_vfiprintf_r+0x1fe>
 8009cb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cba:	f7fd faf3 	bl	80072a4 <__retarget_lock_release_recursive>
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	065b      	lsls	r3, r3, #25
 8009cc2:	f53f af1f 	bmi.w	8009b04 <_vfiprintf_r+0x44>
 8009cc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cc8:	e71e      	b.n	8009b08 <_vfiprintf_r+0x48>
 8009cca:	ab03      	add	r3, sp, #12
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	462a      	mov	r2, r5
 8009cd0:	4b05      	ldr	r3, [pc, #20]	@ (8009ce8 <_vfiprintf_r+0x228>)
 8009cd2:	a904      	add	r1, sp, #16
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	f7fc fe0d 	bl	80068f4 <_printf_i>
 8009cda:	e7e4      	b.n	8009ca6 <_vfiprintf_r+0x1e6>
 8009cdc:	0800cc91 	.word	0x0800cc91
 8009ce0:	0800cc9b 	.word	0x0800cc9b
 8009ce4:	080063c5 	.word	0x080063c5
 8009ce8:	08009a9b 	.word	0x08009a9b
 8009cec:	0800cc97 	.word	0x0800cc97

08009cf0 <__sflush_r>:
 8009cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf8:	0716      	lsls	r6, r2, #28
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	460c      	mov	r4, r1
 8009cfe:	d454      	bmi.n	8009daa <__sflush_r+0xba>
 8009d00:	684b      	ldr	r3, [r1, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	dc02      	bgt.n	8009d0c <__sflush_r+0x1c>
 8009d06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dd48      	ble.n	8009d9e <__sflush_r+0xae>
 8009d0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d0e:	2e00      	cmp	r6, #0
 8009d10:	d045      	beq.n	8009d9e <__sflush_r+0xae>
 8009d12:	2300      	movs	r3, #0
 8009d14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d18:	682f      	ldr	r7, [r5, #0]
 8009d1a:	6a21      	ldr	r1, [r4, #32]
 8009d1c:	602b      	str	r3, [r5, #0]
 8009d1e:	d030      	beq.n	8009d82 <__sflush_r+0x92>
 8009d20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	0759      	lsls	r1, r3, #29
 8009d26:	d505      	bpl.n	8009d34 <__sflush_r+0x44>
 8009d28:	6863      	ldr	r3, [r4, #4]
 8009d2a:	1ad2      	subs	r2, r2, r3
 8009d2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d2e:	b10b      	cbz	r3, 8009d34 <__sflush_r+0x44>
 8009d30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	2300      	movs	r3, #0
 8009d36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d38:	6a21      	ldr	r1, [r4, #32]
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	47b0      	blx	r6
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	89a3      	ldrh	r3, [r4, #12]
 8009d42:	d106      	bne.n	8009d52 <__sflush_r+0x62>
 8009d44:	6829      	ldr	r1, [r5, #0]
 8009d46:	291d      	cmp	r1, #29
 8009d48:	d82b      	bhi.n	8009da2 <__sflush_r+0xb2>
 8009d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8009df4 <__sflush_r+0x104>)
 8009d4c:	410a      	asrs	r2, r1
 8009d4e:	07d6      	lsls	r6, r2, #31
 8009d50:	d427      	bmi.n	8009da2 <__sflush_r+0xb2>
 8009d52:	2200      	movs	r2, #0
 8009d54:	6062      	str	r2, [r4, #4]
 8009d56:	04d9      	lsls	r1, r3, #19
 8009d58:	6922      	ldr	r2, [r4, #16]
 8009d5a:	6022      	str	r2, [r4, #0]
 8009d5c:	d504      	bpl.n	8009d68 <__sflush_r+0x78>
 8009d5e:	1c42      	adds	r2, r0, #1
 8009d60:	d101      	bne.n	8009d66 <__sflush_r+0x76>
 8009d62:	682b      	ldr	r3, [r5, #0]
 8009d64:	b903      	cbnz	r3, 8009d68 <__sflush_r+0x78>
 8009d66:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d6a:	602f      	str	r7, [r5, #0]
 8009d6c:	b1b9      	cbz	r1, 8009d9e <__sflush_r+0xae>
 8009d6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d72:	4299      	cmp	r1, r3
 8009d74:	d002      	beq.n	8009d7c <__sflush_r+0x8c>
 8009d76:	4628      	mov	r0, r5
 8009d78:	f7fe f8ea 	bl	8007f50 <_free_r>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d80:	e00d      	b.n	8009d9e <__sflush_r+0xae>
 8009d82:	2301      	movs	r3, #1
 8009d84:	4628      	mov	r0, r5
 8009d86:	47b0      	blx	r6
 8009d88:	4602      	mov	r2, r0
 8009d8a:	1c50      	adds	r0, r2, #1
 8009d8c:	d1c9      	bne.n	8009d22 <__sflush_r+0x32>
 8009d8e:	682b      	ldr	r3, [r5, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d0c6      	beq.n	8009d22 <__sflush_r+0x32>
 8009d94:	2b1d      	cmp	r3, #29
 8009d96:	d001      	beq.n	8009d9c <__sflush_r+0xac>
 8009d98:	2b16      	cmp	r3, #22
 8009d9a:	d11e      	bne.n	8009dda <__sflush_r+0xea>
 8009d9c:	602f      	str	r7, [r5, #0]
 8009d9e:	2000      	movs	r0, #0
 8009da0:	e022      	b.n	8009de8 <__sflush_r+0xf8>
 8009da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009da6:	b21b      	sxth	r3, r3
 8009da8:	e01b      	b.n	8009de2 <__sflush_r+0xf2>
 8009daa:	690f      	ldr	r7, [r1, #16]
 8009dac:	2f00      	cmp	r7, #0
 8009dae:	d0f6      	beq.n	8009d9e <__sflush_r+0xae>
 8009db0:	0793      	lsls	r3, r2, #30
 8009db2:	680e      	ldr	r6, [r1, #0]
 8009db4:	bf08      	it	eq
 8009db6:	694b      	ldreq	r3, [r1, #20]
 8009db8:	600f      	str	r7, [r1, #0]
 8009dba:	bf18      	it	ne
 8009dbc:	2300      	movne	r3, #0
 8009dbe:	eba6 0807 	sub.w	r8, r6, r7
 8009dc2:	608b      	str	r3, [r1, #8]
 8009dc4:	f1b8 0f00 	cmp.w	r8, #0
 8009dc8:	dde9      	ble.n	8009d9e <__sflush_r+0xae>
 8009dca:	6a21      	ldr	r1, [r4, #32]
 8009dcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009dce:	4643      	mov	r3, r8
 8009dd0:	463a      	mov	r2, r7
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	47b0      	blx	r6
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	dc08      	bgt.n	8009dec <__sflush_r+0xfc>
 8009dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009de2:	81a3      	strh	r3, [r4, #12]
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dec:	4407      	add	r7, r0
 8009dee:	eba8 0800 	sub.w	r8, r8, r0
 8009df2:	e7e7      	b.n	8009dc4 <__sflush_r+0xd4>
 8009df4:	dfbffffe 	.word	0xdfbffffe

08009df8 <_fflush_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	690b      	ldr	r3, [r1, #16]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	b913      	cbnz	r3, 8009e08 <_fflush_r+0x10>
 8009e02:	2500      	movs	r5, #0
 8009e04:	4628      	mov	r0, r5
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	b118      	cbz	r0, 8009e12 <_fflush_r+0x1a>
 8009e0a:	6a03      	ldr	r3, [r0, #32]
 8009e0c:	b90b      	cbnz	r3, 8009e12 <_fflush_r+0x1a>
 8009e0e:	f7fd f931 	bl	8007074 <__sinit>
 8009e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0f3      	beq.n	8009e02 <_fflush_r+0xa>
 8009e1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e1c:	07d0      	lsls	r0, r2, #31
 8009e1e:	d404      	bmi.n	8009e2a <_fflush_r+0x32>
 8009e20:	0599      	lsls	r1, r3, #22
 8009e22:	d402      	bmi.n	8009e2a <_fflush_r+0x32>
 8009e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e26:	f7fd fa3c 	bl	80072a2 <__retarget_lock_acquire_recursive>
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f7ff ff5f 	bl	8009cf0 <__sflush_r>
 8009e32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e34:	07da      	lsls	r2, r3, #31
 8009e36:	4605      	mov	r5, r0
 8009e38:	d4e4      	bmi.n	8009e04 <_fflush_r+0xc>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	059b      	lsls	r3, r3, #22
 8009e3e:	d4e1      	bmi.n	8009e04 <_fflush_r+0xc>
 8009e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e42:	f7fd fa2f 	bl	80072a4 <__retarget_lock_release_recursive>
 8009e46:	e7dd      	b.n	8009e04 <_fflush_r+0xc>

08009e48 <__swbuf_r>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	460e      	mov	r6, r1
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	4605      	mov	r5, r0
 8009e50:	b118      	cbz	r0, 8009e5a <__swbuf_r+0x12>
 8009e52:	6a03      	ldr	r3, [r0, #32]
 8009e54:	b90b      	cbnz	r3, 8009e5a <__swbuf_r+0x12>
 8009e56:	f7fd f90d 	bl	8007074 <__sinit>
 8009e5a:	69a3      	ldr	r3, [r4, #24]
 8009e5c:	60a3      	str	r3, [r4, #8]
 8009e5e:	89a3      	ldrh	r3, [r4, #12]
 8009e60:	071a      	lsls	r2, r3, #28
 8009e62:	d501      	bpl.n	8009e68 <__swbuf_r+0x20>
 8009e64:	6923      	ldr	r3, [r4, #16]
 8009e66:	b943      	cbnz	r3, 8009e7a <__swbuf_r+0x32>
 8009e68:	4621      	mov	r1, r4
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f000 f82a 	bl	8009ec4 <__swsetup_r>
 8009e70:	b118      	cbz	r0, 8009e7a <__swbuf_r+0x32>
 8009e72:	f04f 37ff 	mov.w	r7, #4294967295
 8009e76:	4638      	mov	r0, r7
 8009e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7a:	6823      	ldr	r3, [r4, #0]
 8009e7c:	6922      	ldr	r2, [r4, #16]
 8009e7e:	1a98      	subs	r0, r3, r2
 8009e80:	6963      	ldr	r3, [r4, #20]
 8009e82:	b2f6      	uxtb	r6, r6
 8009e84:	4283      	cmp	r3, r0
 8009e86:	4637      	mov	r7, r6
 8009e88:	dc05      	bgt.n	8009e96 <__swbuf_r+0x4e>
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f7ff ffb3 	bl	8009df8 <_fflush_r>
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d1ed      	bne.n	8009e72 <__swbuf_r+0x2a>
 8009e96:	68a3      	ldr	r3, [r4, #8]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	60a3      	str	r3, [r4, #8]
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	6022      	str	r2, [r4, #0]
 8009ea2:	701e      	strb	r6, [r3, #0]
 8009ea4:	6962      	ldr	r2, [r4, #20]
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d004      	beq.n	8009eb6 <__swbuf_r+0x6e>
 8009eac:	89a3      	ldrh	r3, [r4, #12]
 8009eae:	07db      	lsls	r3, r3, #31
 8009eb0:	d5e1      	bpl.n	8009e76 <__swbuf_r+0x2e>
 8009eb2:	2e0a      	cmp	r6, #10
 8009eb4:	d1df      	bne.n	8009e76 <__swbuf_r+0x2e>
 8009eb6:	4621      	mov	r1, r4
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f7ff ff9d 	bl	8009df8 <_fflush_r>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d0d9      	beq.n	8009e76 <__swbuf_r+0x2e>
 8009ec2:	e7d6      	b.n	8009e72 <__swbuf_r+0x2a>

08009ec4 <__swsetup_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4b29      	ldr	r3, [pc, #164]	@ (8009f6c <__swsetup_r+0xa8>)
 8009ec8:	4605      	mov	r5, r0
 8009eca:	6818      	ldr	r0, [r3, #0]
 8009ecc:	460c      	mov	r4, r1
 8009ece:	b118      	cbz	r0, 8009ed8 <__swsetup_r+0x14>
 8009ed0:	6a03      	ldr	r3, [r0, #32]
 8009ed2:	b90b      	cbnz	r3, 8009ed8 <__swsetup_r+0x14>
 8009ed4:	f7fd f8ce 	bl	8007074 <__sinit>
 8009ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009edc:	0719      	lsls	r1, r3, #28
 8009ede:	d422      	bmi.n	8009f26 <__swsetup_r+0x62>
 8009ee0:	06da      	lsls	r2, r3, #27
 8009ee2:	d407      	bmi.n	8009ef4 <__swsetup_r+0x30>
 8009ee4:	2209      	movs	r2, #9
 8009ee6:	602a      	str	r2, [r5, #0]
 8009ee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eec:	81a3      	strh	r3, [r4, #12]
 8009eee:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef2:	e033      	b.n	8009f5c <__swsetup_r+0x98>
 8009ef4:	0758      	lsls	r0, r3, #29
 8009ef6:	d512      	bpl.n	8009f1e <__swsetup_r+0x5a>
 8009ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009efa:	b141      	cbz	r1, 8009f0e <__swsetup_r+0x4a>
 8009efc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f00:	4299      	cmp	r1, r3
 8009f02:	d002      	beq.n	8009f0a <__swsetup_r+0x46>
 8009f04:	4628      	mov	r0, r5
 8009f06:	f7fe f823 	bl	8007f50 <_free_r>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	2300      	movs	r3, #0
 8009f18:	6063      	str	r3, [r4, #4]
 8009f1a:	6923      	ldr	r3, [r4, #16]
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	89a3      	ldrh	r3, [r4, #12]
 8009f20:	f043 0308 	orr.w	r3, r3, #8
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	b94b      	cbnz	r3, 8009f3e <__swsetup_r+0x7a>
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f34:	d003      	beq.n	8009f3e <__swsetup_r+0x7a>
 8009f36:	4621      	mov	r1, r4
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f000 fc5d 	bl	800a7f8 <__smakebuf_r>
 8009f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f42:	f013 0201 	ands.w	r2, r3, #1
 8009f46:	d00a      	beq.n	8009f5e <__swsetup_r+0x9a>
 8009f48:	2200      	movs	r2, #0
 8009f4a:	60a2      	str	r2, [r4, #8]
 8009f4c:	6962      	ldr	r2, [r4, #20]
 8009f4e:	4252      	negs	r2, r2
 8009f50:	61a2      	str	r2, [r4, #24]
 8009f52:	6922      	ldr	r2, [r4, #16]
 8009f54:	b942      	cbnz	r2, 8009f68 <__swsetup_r+0xa4>
 8009f56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f5a:	d1c5      	bne.n	8009ee8 <__swsetup_r+0x24>
 8009f5c:	bd38      	pop	{r3, r4, r5, pc}
 8009f5e:	0799      	lsls	r1, r3, #30
 8009f60:	bf58      	it	pl
 8009f62:	6962      	ldrpl	r2, [r4, #20]
 8009f64:	60a2      	str	r2, [r4, #8]
 8009f66:	e7f4      	b.n	8009f52 <__swsetup_r+0x8e>
 8009f68:	2000      	movs	r0, #0
 8009f6a:	e7f7      	b.n	8009f5c <__swsetup_r+0x98>
 8009f6c:	20000028 	.word	0x20000028

08009f70 <memmove>:
 8009f70:	4288      	cmp	r0, r1
 8009f72:	b510      	push	{r4, lr}
 8009f74:	eb01 0402 	add.w	r4, r1, r2
 8009f78:	d902      	bls.n	8009f80 <memmove+0x10>
 8009f7a:	4284      	cmp	r4, r0
 8009f7c:	4623      	mov	r3, r4
 8009f7e:	d807      	bhi.n	8009f90 <memmove+0x20>
 8009f80:	1e43      	subs	r3, r0, #1
 8009f82:	42a1      	cmp	r1, r4
 8009f84:	d008      	beq.n	8009f98 <memmove+0x28>
 8009f86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f8e:	e7f8      	b.n	8009f82 <memmove+0x12>
 8009f90:	4402      	add	r2, r0
 8009f92:	4601      	mov	r1, r0
 8009f94:	428a      	cmp	r2, r1
 8009f96:	d100      	bne.n	8009f9a <memmove+0x2a>
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fa2:	e7f7      	b.n	8009f94 <memmove+0x24>

08009fa4 <strncmp>:
 8009fa4:	b510      	push	{r4, lr}
 8009fa6:	b16a      	cbz	r2, 8009fc4 <strncmp+0x20>
 8009fa8:	3901      	subs	r1, #1
 8009faa:	1884      	adds	r4, r0, r2
 8009fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d103      	bne.n	8009fc0 <strncmp+0x1c>
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d001      	beq.n	8009fc0 <strncmp+0x1c>
 8009fbc:	2a00      	cmp	r2, #0
 8009fbe:	d1f5      	bne.n	8009fac <strncmp+0x8>
 8009fc0:	1ad0      	subs	r0, r2, r3
 8009fc2:	bd10      	pop	{r4, pc}
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	e7fc      	b.n	8009fc2 <strncmp+0x1e>

08009fc8 <_sbrk_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d06      	ldr	r5, [pc, #24]	@ (8009fe4 <_sbrk_r+0x1c>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	602b      	str	r3, [r5, #0]
 8009fd4:	f7f8 f9b0 	bl	8002338 <_sbrk>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_sbrk_r+0x1a>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_sbrk_r+0x1a>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	20008568 	.word	0x20008568

08009fe8 <memcpy>:
 8009fe8:	440a      	add	r2, r1
 8009fea:	4291      	cmp	r1, r2
 8009fec:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff0:	d100      	bne.n	8009ff4 <memcpy+0xc>
 8009ff2:	4770      	bx	lr
 8009ff4:	b510      	push	{r4, lr}
 8009ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ffe:	4291      	cmp	r1, r2
 800a000:	d1f9      	bne.n	8009ff6 <memcpy+0xe>
 800a002:	bd10      	pop	{r4, pc}
 800a004:	0000      	movs	r0, r0
	...

0800a008 <nan>:
 800a008:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a010 <nan+0x8>
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	00000000 	.word	0x00000000
 800a014:	7ff80000 	.word	0x7ff80000

0800a018 <__assert_func>:
 800a018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a01a:	4614      	mov	r4, r2
 800a01c:	461a      	mov	r2, r3
 800a01e:	4b09      	ldr	r3, [pc, #36]	@ (800a044 <__assert_func+0x2c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4605      	mov	r5, r0
 800a024:	68d8      	ldr	r0, [r3, #12]
 800a026:	b954      	cbnz	r4, 800a03e <__assert_func+0x26>
 800a028:	4b07      	ldr	r3, [pc, #28]	@ (800a048 <__assert_func+0x30>)
 800a02a:	461c      	mov	r4, r3
 800a02c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a030:	9100      	str	r1, [sp, #0]
 800a032:	462b      	mov	r3, r5
 800a034:	4905      	ldr	r1, [pc, #20]	@ (800a04c <__assert_func+0x34>)
 800a036:	f000 fba7 	bl	800a788 <fiprintf>
 800a03a:	f000 fc3b 	bl	800a8b4 <abort>
 800a03e:	4b04      	ldr	r3, [pc, #16]	@ (800a050 <__assert_func+0x38>)
 800a040:	e7f4      	b.n	800a02c <__assert_func+0x14>
 800a042:	bf00      	nop
 800a044:	20000028 	.word	0x20000028
 800a048:	0800cce5 	.word	0x0800cce5
 800a04c:	0800ccb7 	.word	0x0800ccb7
 800a050:	0800ccaa 	.word	0x0800ccaa

0800a054 <_calloc_r>:
 800a054:	b570      	push	{r4, r5, r6, lr}
 800a056:	fba1 5402 	umull	r5, r4, r1, r2
 800a05a:	b93c      	cbnz	r4, 800a06c <_calloc_r+0x18>
 800a05c:	4629      	mov	r1, r5
 800a05e:	f7fd ffeb 	bl	8008038 <_malloc_r>
 800a062:	4606      	mov	r6, r0
 800a064:	b928      	cbnz	r0, 800a072 <_calloc_r+0x1e>
 800a066:	2600      	movs	r6, #0
 800a068:	4630      	mov	r0, r6
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	220c      	movs	r2, #12
 800a06e:	6002      	str	r2, [r0, #0]
 800a070:	e7f9      	b.n	800a066 <_calloc_r+0x12>
 800a072:	462a      	mov	r2, r5
 800a074:	4621      	mov	r1, r4
 800a076:	f7fd f896 	bl	80071a6 <memset>
 800a07a:	e7f5      	b.n	800a068 <_calloc_r+0x14>

0800a07c <rshift>:
 800a07c:	6903      	ldr	r3, [r0, #16]
 800a07e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a086:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a08a:	f100 0414 	add.w	r4, r0, #20
 800a08e:	dd45      	ble.n	800a11c <rshift+0xa0>
 800a090:	f011 011f 	ands.w	r1, r1, #31
 800a094:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a098:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a09c:	d10c      	bne.n	800a0b8 <rshift+0x3c>
 800a09e:	f100 0710 	add.w	r7, r0, #16
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	42b1      	cmp	r1, r6
 800a0a6:	d334      	bcc.n	800a112 <rshift+0x96>
 800a0a8:	1a9b      	subs	r3, r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	1eea      	subs	r2, r5, #3
 800a0ae:	4296      	cmp	r6, r2
 800a0b0:	bf38      	it	cc
 800a0b2:	2300      	movcc	r3, #0
 800a0b4:	4423      	add	r3, r4
 800a0b6:	e015      	b.n	800a0e4 <rshift+0x68>
 800a0b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0bc:	f1c1 0820 	rsb	r8, r1, #32
 800a0c0:	40cf      	lsrs	r7, r1
 800a0c2:	f105 0e04 	add.w	lr, r5, #4
 800a0c6:	46a1      	mov	r9, r4
 800a0c8:	4576      	cmp	r6, lr
 800a0ca:	46f4      	mov	ip, lr
 800a0cc:	d815      	bhi.n	800a0fa <rshift+0x7e>
 800a0ce:	1a9a      	subs	r2, r3, r2
 800a0d0:	0092      	lsls	r2, r2, #2
 800a0d2:	3a04      	subs	r2, #4
 800a0d4:	3501      	adds	r5, #1
 800a0d6:	42ae      	cmp	r6, r5
 800a0d8:	bf38      	it	cc
 800a0da:	2200      	movcc	r2, #0
 800a0dc:	18a3      	adds	r3, r4, r2
 800a0de:	50a7      	str	r7, [r4, r2]
 800a0e0:	b107      	cbz	r7, 800a0e4 <rshift+0x68>
 800a0e2:	3304      	adds	r3, #4
 800a0e4:	1b1a      	subs	r2, r3, r4
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0ec:	bf08      	it	eq
 800a0ee:	2300      	moveq	r3, #0
 800a0f0:	6102      	str	r2, [r0, #16]
 800a0f2:	bf08      	it	eq
 800a0f4:	6143      	streq	r3, [r0, #20]
 800a0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0fa:	f8dc c000 	ldr.w	ip, [ip]
 800a0fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800a102:	ea4c 0707 	orr.w	r7, ip, r7
 800a106:	f849 7b04 	str.w	r7, [r9], #4
 800a10a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a10e:	40cf      	lsrs	r7, r1
 800a110:	e7da      	b.n	800a0c8 <rshift+0x4c>
 800a112:	f851 cb04 	ldr.w	ip, [r1], #4
 800a116:	f847 cf04 	str.w	ip, [r7, #4]!
 800a11a:	e7c3      	b.n	800a0a4 <rshift+0x28>
 800a11c:	4623      	mov	r3, r4
 800a11e:	e7e1      	b.n	800a0e4 <rshift+0x68>

0800a120 <__hexdig_fun>:
 800a120:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a124:	2b09      	cmp	r3, #9
 800a126:	d802      	bhi.n	800a12e <__hexdig_fun+0xe>
 800a128:	3820      	subs	r0, #32
 800a12a:	b2c0      	uxtb	r0, r0
 800a12c:	4770      	bx	lr
 800a12e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a132:	2b05      	cmp	r3, #5
 800a134:	d801      	bhi.n	800a13a <__hexdig_fun+0x1a>
 800a136:	3847      	subs	r0, #71	@ 0x47
 800a138:	e7f7      	b.n	800a12a <__hexdig_fun+0xa>
 800a13a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a13e:	2b05      	cmp	r3, #5
 800a140:	d801      	bhi.n	800a146 <__hexdig_fun+0x26>
 800a142:	3827      	subs	r0, #39	@ 0x27
 800a144:	e7f1      	b.n	800a12a <__hexdig_fun+0xa>
 800a146:	2000      	movs	r0, #0
 800a148:	4770      	bx	lr
	...

0800a14c <__gethex>:
 800a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	b085      	sub	sp, #20
 800a152:	468a      	mov	sl, r1
 800a154:	9302      	str	r3, [sp, #8]
 800a156:	680b      	ldr	r3, [r1, #0]
 800a158:	9001      	str	r0, [sp, #4]
 800a15a:	4690      	mov	r8, r2
 800a15c:	1c9c      	adds	r4, r3, #2
 800a15e:	46a1      	mov	r9, r4
 800a160:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a164:	2830      	cmp	r0, #48	@ 0x30
 800a166:	d0fa      	beq.n	800a15e <__gethex+0x12>
 800a168:	eba9 0303 	sub.w	r3, r9, r3
 800a16c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a170:	f7ff ffd6 	bl	800a120 <__hexdig_fun>
 800a174:	4605      	mov	r5, r0
 800a176:	2800      	cmp	r0, #0
 800a178:	d168      	bne.n	800a24c <__gethex+0x100>
 800a17a:	49a0      	ldr	r1, [pc, #640]	@ (800a3fc <__gethex+0x2b0>)
 800a17c:	2201      	movs	r2, #1
 800a17e:	4648      	mov	r0, r9
 800a180:	f7ff ff10 	bl	8009fa4 <strncmp>
 800a184:	4607      	mov	r7, r0
 800a186:	2800      	cmp	r0, #0
 800a188:	d167      	bne.n	800a25a <__gethex+0x10e>
 800a18a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a18e:	4626      	mov	r6, r4
 800a190:	f7ff ffc6 	bl	800a120 <__hexdig_fun>
 800a194:	2800      	cmp	r0, #0
 800a196:	d062      	beq.n	800a25e <__gethex+0x112>
 800a198:	4623      	mov	r3, r4
 800a19a:	7818      	ldrb	r0, [r3, #0]
 800a19c:	2830      	cmp	r0, #48	@ 0x30
 800a19e:	4699      	mov	r9, r3
 800a1a0:	f103 0301 	add.w	r3, r3, #1
 800a1a4:	d0f9      	beq.n	800a19a <__gethex+0x4e>
 800a1a6:	f7ff ffbb 	bl	800a120 <__hexdig_fun>
 800a1aa:	fab0 f580 	clz	r5, r0
 800a1ae:	096d      	lsrs	r5, r5, #5
 800a1b0:	f04f 0b01 	mov.w	fp, #1
 800a1b4:	464a      	mov	r2, r9
 800a1b6:	4616      	mov	r6, r2
 800a1b8:	3201      	adds	r2, #1
 800a1ba:	7830      	ldrb	r0, [r6, #0]
 800a1bc:	f7ff ffb0 	bl	800a120 <__hexdig_fun>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d1f8      	bne.n	800a1b6 <__gethex+0x6a>
 800a1c4:	498d      	ldr	r1, [pc, #564]	@ (800a3fc <__gethex+0x2b0>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f7ff feeb 	bl	8009fa4 <strncmp>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d13f      	bne.n	800a252 <__gethex+0x106>
 800a1d2:	b944      	cbnz	r4, 800a1e6 <__gethex+0x9a>
 800a1d4:	1c74      	adds	r4, r6, #1
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4616      	mov	r6, r2
 800a1da:	3201      	adds	r2, #1
 800a1dc:	7830      	ldrb	r0, [r6, #0]
 800a1de:	f7ff ff9f 	bl	800a120 <__hexdig_fun>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d1f8      	bne.n	800a1d8 <__gethex+0x8c>
 800a1e6:	1ba4      	subs	r4, r4, r6
 800a1e8:	00a7      	lsls	r7, r4, #2
 800a1ea:	7833      	ldrb	r3, [r6, #0]
 800a1ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a1f0:	2b50      	cmp	r3, #80	@ 0x50
 800a1f2:	d13e      	bne.n	800a272 <__gethex+0x126>
 800a1f4:	7873      	ldrb	r3, [r6, #1]
 800a1f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1f8:	d033      	beq.n	800a262 <__gethex+0x116>
 800a1fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1fc:	d034      	beq.n	800a268 <__gethex+0x11c>
 800a1fe:	1c71      	adds	r1, r6, #1
 800a200:	2400      	movs	r4, #0
 800a202:	7808      	ldrb	r0, [r1, #0]
 800a204:	f7ff ff8c 	bl	800a120 <__hexdig_fun>
 800a208:	1e43      	subs	r3, r0, #1
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b18      	cmp	r3, #24
 800a20e:	d830      	bhi.n	800a272 <__gethex+0x126>
 800a210:	f1a0 0210 	sub.w	r2, r0, #16
 800a214:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a218:	f7ff ff82 	bl	800a120 <__hexdig_fun>
 800a21c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a220:	fa5f fc8c 	uxtb.w	ip, ip
 800a224:	f1bc 0f18 	cmp.w	ip, #24
 800a228:	f04f 030a 	mov.w	r3, #10
 800a22c:	d91e      	bls.n	800a26c <__gethex+0x120>
 800a22e:	b104      	cbz	r4, 800a232 <__gethex+0xe6>
 800a230:	4252      	negs	r2, r2
 800a232:	4417      	add	r7, r2
 800a234:	f8ca 1000 	str.w	r1, [sl]
 800a238:	b1ed      	cbz	r5, 800a276 <__gethex+0x12a>
 800a23a:	f1bb 0f00 	cmp.w	fp, #0
 800a23e:	bf0c      	ite	eq
 800a240:	2506      	moveq	r5, #6
 800a242:	2500      	movne	r5, #0
 800a244:	4628      	mov	r0, r5
 800a246:	b005      	add	sp, #20
 800a248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24c:	2500      	movs	r5, #0
 800a24e:	462c      	mov	r4, r5
 800a250:	e7b0      	b.n	800a1b4 <__gethex+0x68>
 800a252:	2c00      	cmp	r4, #0
 800a254:	d1c7      	bne.n	800a1e6 <__gethex+0x9a>
 800a256:	4627      	mov	r7, r4
 800a258:	e7c7      	b.n	800a1ea <__gethex+0x9e>
 800a25a:	464e      	mov	r6, r9
 800a25c:	462f      	mov	r7, r5
 800a25e:	2501      	movs	r5, #1
 800a260:	e7c3      	b.n	800a1ea <__gethex+0x9e>
 800a262:	2400      	movs	r4, #0
 800a264:	1cb1      	adds	r1, r6, #2
 800a266:	e7cc      	b.n	800a202 <__gethex+0xb6>
 800a268:	2401      	movs	r4, #1
 800a26a:	e7fb      	b.n	800a264 <__gethex+0x118>
 800a26c:	fb03 0002 	mla	r0, r3, r2, r0
 800a270:	e7ce      	b.n	800a210 <__gethex+0xc4>
 800a272:	4631      	mov	r1, r6
 800a274:	e7de      	b.n	800a234 <__gethex+0xe8>
 800a276:	eba6 0309 	sub.w	r3, r6, r9
 800a27a:	3b01      	subs	r3, #1
 800a27c:	4629      	mov	r1, r5
 800a27e:	2b07      	cmp	r3, #7
 800a280:	dc0a      	bgt.n	800a298 <__gethex+0x14c>
 800a282:	9801      	ldr	r0, [sp, #4]
 800a284:	f7fd ff64 	bl	8008150 <_Balloc>
 800a288:	4604      	mov	r4, r0
 800a28a:	b940      	cbnz	r0, 800a29e <__gethex+0x152>
 800a28c:	4b5c      	ldr	r3, [pc, #368]	@ (800a400 <__gethex+0x2b4>)
 800a28e:	4602      	mov	r2, r0
 800a290:	21e4      	movs	r1, #228	@ 0xe4
 800a292:	485c      	ldr	r0, [pc, #368]	@ (800a404 <__gethex+0x2b8>)
 800a294:	f7ff fec0 	bl	800a018 <__assert_func>
 800a298:	3101      	adds	r1, #1
 800a29a:	105b      	asrs	r3, r3, #1
 800a29c:	e7ef      	b.n	800a27e <__gethex+0x132>
 800a29e:	f100 0a14 	add.w	sl, r0, #20
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	4655      	mov	r5, sl
 800a2a6:	469b      	mov	fp, r3
 800a2a8:	45b1      	cmp	r9, r6
 800a2aa:	d337      	bcc.n	800a31c <__gethex+0x1d0>
 800a2ac:	f845 bb04 	str.w	fp, [r5], #4
 800a2b0:	eba5 050a 	sub.w	r5, r5, sl
 800a2b4:	10ad      	asrs	r5, r5, #2
 800a2b6:	6125      	str	r5, [r4, #16]
 800a2b8:	4658      	mov	r0, fp
 800a2ba:	f7fe f83b 	bl	8008334 <__hi0bits>
 800a2be:	016d      	lsls	r5, r5, #5
 800a2c0:	f8d8 6000 	ldr.w	r6, [r8]
 800a2c4:	1a2d      	subs	r5, r5, r0
 800a2c6:	42b5      	cmp	r5, r6
 800a2c8:	dd54      	ble.n	800a374 <__gethex+0x228>
 800a2ca:	1bad      	subs	r5, r5, r6
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f7fe fbcf 	bl	8008a72 <__any_on>
 800a2d4:	4681      	mov	r9, r0
 800a2d6:	b178      	cbz	r0, 800a2f8 <__gethex+0x1ac>
 800a2d8:	1e6b      	subs	r3, r5, #1
 800a2da:	1159      	asrs	r1, r3, #5
 800a2dc:	f003 021f 	and.w	r2, r3, #31
 800a2e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a2e4:	f04f 0901 	mov.w	r9, #1
 800a2e8:	fa09 f202 	lsl.w	r2, r9, r2
 800a2ec:	420a      	tst	r2, r1
 800a2ee:	d003      	beq.n	800a2f8 <__gethex+0x1ac>
 800a2f0:	454b      	cmp	r3, r9
 800a2f2:	dc36      	bgt.n	800a362 <__gethex+0x216>
 800a2f4:	f04f 0902 	mov.w	r9, #2
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7ff febe 	bl	800a07c <rshift>
 800a300:	442f      	add	r7, r5
 800a302:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a306:	42bb      	cmp	r3, r7
 800a308:	da42      	bge.n	800a390 <__gethex+0x244>
 800a30a:	9801      	ldr	r0, [sp, #4]
 800a30c:	4621      	mov	r1, r4
 800a30e:	f7fd ff5f 	bl	80081d0 <_Bfree>
 800a312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a314:	2300      	movs	r3, #0
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	25a3      	movs	r5, #163	@ 0xa3
 800a31a:	e793      	b.n	800a244 <__gethex+0xf8>
 800a31c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a320:	2a2e      	cmp	r2, #46	@ 0x2e
 800a322:	d012      	beq.n	800a34a <__gethex+0x1fe>
 800a324:	2b20      	cmp	r3, #32
 800a326:	d104      	bne.n	800a332 <__gethex+0x1e6>
 800a328:	f845 bb04 	str.w	fp, [r5], #4
 800a32c:	f04f 0b00 	mov.w	fp, #0
 800a330:	465b      	mov	r3, fp
 800a332:	7830      	ldrb	r0, [r6, #0]
 800a334:	9303      	str	r3, [sp, #12]
 800a336:	f7ff fef3 	bl	800a120 <__hexdig_fun>
 800a33a:	9b03      	ldr	r3, [sp, #12]
 800a33c:	f000 000f 	and.w	r0, r0, #15
 800a340:	4098      	lsls	r0, r3
 800a342:	ea4b 0b00 	orr.w	fp, fp, r0
 800a346:	3304      	adds	r3, #4
 800a348:	e7ae      	b.n	800a2a8 <__gethex+0x15c>
 800a34a:	45b1      	cmp	r9, r6
 800a34c:	d8ea      	bhi.n	800a324 <__gethex+0x1d8>
 800a34e:	492b      	ldr	r1, [pc, #172]	@ (800a3fc <__gethex+0x2b0>)
 800a350:	9303      	str	r3, [sp, #12]
 800a352:	2201      	movs	r2, #1
 800a354:	4630      	mov	r0, r6
 800a356:	f7ff fe25 	bl	8009fa4 <strncmp>
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	2800      	cmp	r0, #0
 800a35e:	d1e1      	bne.n	800a324 <__gethex+0x1d8>
 800a360:	e7a2      	b.n	800a2a8 <__gethex+0x15c>
 800a362:	1ea9      	subs	r1, r5, #2
 800a364:	4620      	mov	r0, r4
 800a366:	f7fe fb84 	bl	8008a72 <__any_on>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d0c2      	beq.n	800a2f4 <__gethex+0x1a8>
 800a36e:	f04f 0903 	mov.w	r9, #3
 800a372:	e7c1      	b.n	800a2f8 <__gethex+0x1ac>
 800a374:	da09      	bge.n	800a38a <__gethex+0x23e>
 800a376:	1b75      	subs	r5, r6, r5
 800a378:	4621      	mov	r1, r4
 800a37a:	9801      	ldr	r0, [sp, #4]
 800a37c:	462a      	mov	r2, r5
 800a37e:	f7fe f93f 	bl	8008600 <__lshift>
 800a382:	1b7f      	subs	r7, r7, r5
 800a384:	4604      	mov	r4, r0
 800a386:	f100 0a14 	add.w	sl, r0, #20
 800a38a:	f04f 0900 	mov.w	r9, #0
 800a38e:	e7b8      	b.n	800a302 <__gethex+0x1b6>
 800a390:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a394:	42bd      	cmp	r5, r7
 800a396:	dd6f      	ble.n	800a478 <__gethex+0x32c>
 800a398:	1bed      	subs	r5, r5, r7
 800a39a:	42ae      	cmp	r6, r5
 800a39c:	dc34      	bgt.n	800a408 <__gethex+0x2bc>
 800a39e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d022      	beq.n	800a3ec <__gethex+0x2a0>
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d024      	beq.n	800a3f4 <__gethex+0x2a8>
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d115      	bne.n	800a3da <__gethex+0x28e>
 800a3ae:	42ae      	cmp	r6, r5
 800a3b0:	d113      	bne.n	800a3da <__gethex+0x28e>
 800a3b2:	2e01      	cmp	r6, #1
 800a3b4:	d10b      	bne.n	800a3ce <__gethex+0x282>
 800a3b6:	9a02      	ldr	r2, [sp, #8]
 800a3b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3bc:	6013      	str	r3, [r2, #0]
 800a3be:	2301      	movs	r3, #1
 800a3c0:	6123      	str	r3, [r4, #16]
 800a3c2:	f8ca 3000 	str.w	r3, [sl]
 800a3c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3c8:	2562      	movs	r5, #98	@ 0x62
 800a3ca:	601c      	str	r4, [r3, #0]
 800a3cc:	e73a      	b.n	800a244 <__gethex+0xf8>
 800a3ce:	1e71      	subs	r1, r6, #1
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	f7fe fb4e 	bl	8008a72 <__any_on>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d1ed      	bne.n	800a3b6 <__gethex+0x26a>
 800a3da:	9801      	ldr	r0, [sp, #4]
 800a3dc:	4621      	mov	r1, r4
 800a3de:	f7fd fef7 	bl	80081d0 <_Bfree>
 800a3e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	2550      	movs	r5, #80	@ 0x50
 800a3ea:	e72b      	b.n	800a244 <__gethex+0xf8>
 800a3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1f3      	bne.n	800a3da <__gethex+0x28e>
 800a3f2:	e7e0      	b.n	800a3b6 <__gethex+0x26a>
 800a3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1dd      	bne.n	800a3b6 <__gethex+0x26a>
 800a3fa:	e7ee      	b.n	800a3da <__gethex+0x28e>
 800a3fc:	0800cb38 	.word	0x0800cb38
 800a400:	0800c9cd 	.word	0x0800c9cd
 800a404:	0800cce6 	.word	0x0800cce6
 800a408:	1e6f      	subs	r7, r5, #1
 800a40a:	f1b9 0f00 	cmp.w	r9, #0
 800a40e:	d130      	bne.n	800a472 <__gethex+0x326>
 800a410:	b127      	cbz	r7, 800a41c <__gethex+0x2d0>
 800a412:	4639      	mov	r1, r7
 800a414:	4620      	mov	r0, r4
 800a416:	f7fe fb2c 	bl	8008a72 <__any_on>
 800a41a:	4681      	mov	r9, r0
 800a41c:	117a      	asrs	r2, r7, #5
 800a41e:	2301      	movs	r3, #1
 800a420:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a424:	f007 071f 	and.w	r7, r7, #31
 800a428:	40bb      	lsls	r3, r7
 800a42a:	4213      	tst	r3, r2
 800a42c:	4629      	mov	r1, r5
 800a42e:	4620      	mov	r0, r4
 800a430:	bf18      	it	ne
 800a432:	f049 0902 	orrne.w	r9, r9, #2
 800a436:	f7ff fe21 	bl	800a07c <rshift>
 800a43a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a43e:	1b76      	subs	r6, r6, r5
 800a440:	2502      	movs	r5, #2
 800a442:	f1b9 0f00 	cmp.w	r9, #0
 800a446:	d047      	beq.n	800a4d8 <__gethex+0x38c>
 800a448:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d015      	beq.n	800a47c <__gethex+0x330>
 800a450:	2b03      	cmp	r3, #3
 800a452:	d017      	beq.n	800a484 <__gethex+0x338>
 800a454:	2b01      	cmp	r3, #1
 800a456:	d109      	bne.n	800a46c <__gethex+0x320>
 800a458:	f019 0f02 	tst.w	r9, #2
 800a45c:	d006      	beq.n	800a46c <__gethex+0x320>
 800a45e:	f8da 3000 	ldr.w	r3, [sl]
 800a462:	ea49 0903 	orr.w	r9, r9, r3
 800a466:	f019 0f01 	tst.w	r9, #1
 800a46a:	d10e      	bne.n	800a48a <__gethex+0x33e>
 800a46c:	f045 0510 	orr.w	r5, r5, #16
 800a470:	e032      	b.n	800a4d8 <__gethex+0x38c>
 800a472:	f04f 0901 	mov.w	r9, #1
 800a476:	e7d1      	b.n	800a41c <__gethex+0x2d0>
 800a478:	2501      	movs	r5, #1
 800a47a:	e7e2      	b.n	800a442 <__gethex+0x2f6>
 800a47c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a47e:	f1c3 0301 	rsb	r3, r3, #1
 800a482:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0f0      	beq.n	800a46c <__gethex+0x320>
 800a48a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a48e:	f104 0314 	add.w	r3, r4, #20
 800a492:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a496:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a49a:	f04f 0c00 	mov.w	ip, #0
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4a8:	d01b      	beq.n	800a4e2 <__gethex+0x396>
 800a4aa:	3201      	adds	r2, #1
 800a4ac:	6002      	str	r2, [r0, #0]
 800a4ae:	2d02      	cmp	r5, #2
 800a4b0:	f104 0314 	add.w	r3, r4, #20
 800a4b4:	d13c      	bne.n	800a530 <__gethex+0x3e4>
 800a4b6:	f8d8 2000 	ldr.w	r2, [r8]
 800a4ba:	3a01      	subs	r2, #1
 800a4bc:	42b2      	cmp	r2, r6
 800a4be:	d109      	bne.n	800a4d4 <__gethex+0x388>
 800a4c0:	1171      	asrs	r1, r6, #5
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4c8:	f006 061f 	and.w	r6, r6, #31
 800a4cc:	fa02 f606 	lsl.w	r6, r2, r6
 800a4d0:	421e      	tst	r6, r3
 800a4d2:	d13a      	bne.n	800a54a <__gethex+0x3fe>
 800a4d4:	f045 0520 	orr.w	r5, r5, #32
 800a4d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4da:	601c      	str	r4, [r3, #0]
 800a4dc:	9b02      	ldr	r3, [sp, #8]
 800a4de:	601f      	str	r7, [r3, #0]
 800a4e0:	e6b0      	b.n	800a244 <__gethex+0xf8>
 800a4e2:	4299      	cmp	r1, r3
 800a4e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a4e8:	d8d9      	bhi.n	800a49e <__gethex+0x352>
 800a4ea:	68a3      	ldr	r3, [r4, #8]
 800a4ec:	459b      	cmp	fp, r3
 800a4ee:	db17      	blt.n	800a520 <__gethex+0x3d4>
 800a4f0:	6861      	ldr	r1, [r4, #4]
 800a4f2:	9801      	ldr	r0, [sp, #4]
 800a4f4:	3101      	adds	r1, #1
 800a4f6:	f7fd fe2b 	bl	8008150 <_Balloc>
 800a4fa:	4681      	mov	r9, r0
 800a4fc:	b918      	cbnz	r0, 800a506 <__gethex+0x3ba>
 800a4fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a568 <__gethex+0x41c>)
 800a500:	4602      	mov	r2, r0
 800a502:	2184      	movs	r1, #132	@ 0x84
 800a504:	e6c5      	b.n	800a292 <__gethex+0x146>
 800a506:	6922      	ldr	r2, [r4, #16]
 800a508:	3202      	adds	r2, #2
 800a50a:	f104 010c 	add.w	r1, r4, #12
 800a50e:	0092      	lsls	r2, r2, #2
 800a510:	300c      	adds	r0, #12
 800a512:	f7ff fd69 	bl	8009fe8 <memcpy>
 800a516:	4621      	mov	r1, r4
 800a518:	9801      	ldr	r0, [sp, #4]
 800a51a:	f7fd fe59 	bl	80081d0 <_Bfree>
 800a51e:	464c      	mov	r4, r9
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	1c5a      	adds	r2, r3, #1
 800a524:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a528:	6122      	str	r2, [r4, #16]
 800a52a:	2201      	movs	r2, #1
 800a52c:	615a      	str	r2, [r3, #20]
 800a52e:	e7be      	b.n	800a4ae <__gethex+0x362>
 800a530:	6922      	ldr	r2, [r4, #16]
 800a532:	455a      	cmp	r2, fp
 800a534:	dd0b      	ble.n	800a54e <__gethex+0x402>
 800a536:	2101      	movs	r1, #1
 800a538:	4620      	mov	r0, r4
 800a53a:	f7ff fd9f 	bl	800a07c <rshift>
 800a53e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a542:	3701      	adds	r7, #1
 800a544:	42bb      	cmp	r3, r7
 800a546:	f6ff aee0 	blt.w	800a30a <__gethex+0x1be>
 800a54a:	2501      	movs	r5, #1
 800a54c:	e7c2      	b.n	800a4d4 <__gethex+0x388>
 800a54e:	f016 061f 	ands.w	r6, r6, #31
 800a552:	d0fa      	beq.n	800a54a <__gethex+0x3fe>
 800a554:	4453      	add	r3, sl
 800a556:	f1c6 0620 	rsb	r6, r6, #32
 800a55a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a55e:	f7fd fee9 	bl	8008334 <__hi0bits>
 800a562:	42b0      	cmp	r0, r6
 800a564:	dbe7      	blt.n	800a536 <__gethex+0x3ea>
 800a566:	e7f0      	b.n	800a54a <__gethex+0x3fe>
 800a568:	0800c9cd 	.word	0x0800c9cd

0800a56c <L_shift>:
 800a56c:	f1c2 0208 	rsb	r2, r2, #8
 800a570:	0092      	lsls	r2, r2, #2
 800a572:	b570      	push	{r4, r5, r6, lr}
 800a574:	f1c2 0620 	rsb	r6, r2, #32
 800a578:	6843      	ldr	r3, [r0, #4]
 800a57a:	6804      	ldr	r4, [r0, #0]
 800a57c:	fa03 f506 	lsl.w	r5, r3, r6
 800a580:	432c      	orrs	r4, r5
 800a582:	40d3      	lsrs	r3, r2
 800a584:	6004      	str	r4, [r0, #0]
 800a586:	f840 3f04 	str.w	r3, [r0, #4]!
 800a58a:	4288      	cmp	r0, r1
 800a58c:	d3f4      	bcc.n	800a578 <L_shift+0xc>
 800a58e:	bd70      	pop	{r4, r5, r6, pc}

0800a590 <__match>:
 800a590:	b530      	push	{r4, r5, lr}
 800a592:	6803      	ldr	r3, [r0, #0]
 800a594:	3301      	adds	r3, #1
 800a596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59a:	b914      	cbnz	r4, 800a5a2 <__match+0x12>
 800a59c:	6003      	str	r3, [r0, #0]
 800a59e:	2001      	movs	r0, #1
 800a5a0:	bd30      	pop	{r4, r5, pc}
 800a5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a5aa:	2d19      	cmp	r5, #25
 800a5ac:	bf98      	it	ls
 800a5ae:	3220      	addls	r2, #32
 800a5b0:	42a2      	cmp	r2, r4
 800a5b2:	d0f0      	beq.n	800a596 <__match+0x6>
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	e7f3      	b.n	800a5a0 <__match+0x10>

0800a5b8 <__hexnan>:
 800a5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	680b      	ldr	r3, [r1, #0]
 800a5be:	6801      	ldr	r1, [r0, #0]
 800a5c0:	115e      	asrs	r6, r3, #5
 800a5c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5c6:	f013 031f 	ands.w	r3, r3, #31
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	bf18      	it	ne
 800a5ce:	3604      	addne	r6, #4
 800a5d0:	2500      	movs	r5, #0
 800a5d2:	1f37      	subs	r7, r6, #4
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	4690      	mov	r8, r2
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5de:	46b9      	mov	r9, r7
 800a5e0:	463c      	mov	r4, r7
 800a5e2:	9502      	str	r5, [sp, #8]
 800a5e4:	46ab      	mov	fp, r5
 800a5e6:	784a      	ldrb	r2, [r1, #1]
 800a5e8:	1c4b      	adds	r3, r1, #1
 800a5ea:	9303      	str	r3, [sp, #12]
 800a5ec:	b342      	cbz	r2, 800a640 <__hexnan+0x88>
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	9105      	str	r1, [sp, #20]
 800a5f2:	9204      	str	r2, [sp, #16]
 800a5f4:	f7ff fd94 	bl	800a120 <__hexdig_fun>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	d151      	bne.n	800a6a0 <__hexnan+0xe8>
 800a5fc:	9a04      	ldr	r2, [sp, #16]
 800a5fe:	9905      	ldr	r1, [sp, #20]
 800a600:	2a20      	cmp	r2, #32
 800a602:	d818      	bhi.n	800a636 <__hexnan+0x7e>
 800a604:	9b02      	ldr	r3, [sp, #8]
 800a606:	459b      	cmp	fp, r3
 800a608:	dd13      	ble.n	800a632 <__hexnan+0x7a>
 800a60a:	454c      	cmp	r4, r9
 800a60c:	d206      	bcs.n	800a61c <__hexnan+0x64>
 800a60e:	2d07      	cmp	r5, #7
 800a610:	dc04      	bgt.n	800a61c <__hexnan+0x64>
 800a612:	462a      	mov	r2, r5
 800a614:	4649      	mov	r1, r9
 800a616:	4620      	mov	r0, r4
 800a618:	f7ff ffa8 	bl	800a56c <L_shift>
 800a61c:	4544      	cmp	r4, r8
 800a61e:	d952      	bls.n	800a6c6 <__hexnan+0x10e>
 800a620:	2300      	movs	r3, #0
 800a622:	f1a4 0904 	sub.w	r9, r4, #4
 800a626:	f844 3c04 	str.w	r3, [r4, #-4]
 800a62a:	f8cd b008 	str.w	fp, [sp, #8]
 800a62e:	464c      	mov	r4, r9
 800a630:	461d      	mov	r5, r3
 800a632:	9903      	ldr	r1, [sp, #12]
 800a634:	e7d7      	b.n	800a5e6 <__hexnan+0x2e>
 800a636:	2a29      	cmp	r2, #41	@ 0x29
 800a638:	d157      	bne.n	800a6ea <__hexnan+0x132>
 800a63a:	3102      	adds	r1, #2
 800a63c:	f8ca 1000 	str.w	r1, [sl]
 800a640:	f1bb 0f00 	cmp.w	fp, #0
 800a644:	d051      	beq.n	800a6ea <__hexnan+0x132>
 800a646:	454c      	cmp	r4, r9
 800a648:	d206      	bcs.n	800a658 <__hexnan+0xa0>
 800a64a:	2d07      	cmp	r5, #7
 800a64c:	dc04      	bgt.n	800a658 <__hexnan+0xa0>
 800a64e:	462a      	mov	r2, r5
 800a650:	4649      	mov	r1, r9
 800a652:	4620      	mov	r0, r4
 800a654:	f7ff ff8a 	bl	800a56c <L_shift>
 800a658:	4544      	cmp	r4, r8
 800a65a:	d936      	bls.n	800a6ca <__hexnan+0x112>
 800a65c:	f1a8 0204 	sub.w	r2, r8, #4
 800a660:	4623      	mov	r3, r4
 800a662:	f853 1b04 	ldr.w	r1, [r3], #4
 800a666:	f842 1f04 	str.w	r1, [r2, #4]!
 800a66a:	429f      	cmp	r7, r3
 800a66c:	d2f9      	bcs.n	800a662 <__hexnan+0xaa>
 800a66e:	1b3b      	subs	r3, r7, r4
 800a670:	f023 0303 	bic.w	r3, r3, #3
 800a674:	3304      	adds	r3, #4
 800a676:	3401      	adds	r4, #1
 800a678:	3e03      	subs	r6, #3
 800a67a:	42b4      	cmp	r4, r6
 800a67c:	bf88      	it	hi
 800a67e:	2304      	movhi	r3, #4
 800a680:	4443      	add	r3, r8
 800a682:	2200      	movs	r2, #0
 800a684:	f843 2b04 	str.w	r2, [r3], #4
 800a688:	429f      	cmp	r7, r3
 800a68a:	d2fb      	bcs.n	800a684 <__hexnan+0xcc>
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	b91b      	cbnz	r3, 800a698 <__hexnan+0xe0>
 800a690:	4547      	cmp	r7, r8
 800a692:	d128      	bne.n	800a6e6 <__hexnan+0x12e>
 800a694:	2301      	movs	r3, #1
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	2005      	movs	r0, #5
 800a69a:	b007      	add	sp, #28
 800a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a0:	3501      	adds	r5, #1
 800a6a2:	2d08      	cmp	r5, #8
 800a6a4:	f10b 0b01 	add.w	fp, fp, #1
 800a6a8:	dd06      	ble.n	800a6b8 <__hexnan+0x100>
 800a6aa:	4544      	cmp	r4, r8
 800a6ac:	d9c1      	bls.n	800a632 <__hexnan+0x7a>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6b4:	2501      	movs	r5, #1
 800a6b6:	3c04      	subs	r4, #4
 800a6b8:	6822      	ldr	r2, [r4, #0]
 800a6ba:	f000 000f 	and.w	r0, r0, #15
 800a6be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6c2:	6020      	str	r0, [r4, #0]
 800a6c4:	e7b5      	b.n	800a632 <__hexnan+0x7a>
 800a6c6:	2508      	movs	r5, #8
 800a6c8:	e7b3      	b.n	800a632 <__hexnan+0x7a>
 800a6ca:	9b01      	ldr	r3, [sp, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0dd      	beq.n	800a68c <__hexnan+0xd4>
 800a6d0:	f1c3 0320 	rsb	r3, r3, #32
 800a6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d8:	40da      	lsrs	r2, r3
 800a6da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a6de:	4013      	ands	r3, r2
 800a6e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a6e4:	e7d2      	b.n	800a68c <__hexnan+0xd4>
 800a6e6:	3f04      	subs	r7, #4
 800a6e8:	e7d0      	b.n	800a68c <__hexnan+0xd4>
 800a6ea:	2004      	movs	r0, #4
 800a6ec:	e7d5      	b.n	800a69a <__hexnan+0xe2>

0800a6ee <__ascii_mbtowc>:
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	b901      	cbnz	r1, 800a6f4 <__ascii_mbtowc+0x6>
 800a6f2:	a901      	add	r1, sp, #4
 800a6f4:	b142      	cbz	r2, 800a708 <__ascii_mbtowc+0x1a>
 800a6f6:	b14b      	cbz	r3, 800a70c <__ascii_mbtowc+0x1e>
 800a6f8:	7813      	ldrb	r3, [r2, #0]
 800a6fa:	600b      	str	r3, [r1, #0]
 800a6fc:	7812      	ldrb	r2, [r2, #0]
 800a6fe:	1e10      	subs	r0, r2, #0
 800a700:	bf18      	it	ne
 800a702:	2001      	movne	r0, #1
 800a704:	b002      	add	sp, #8
 800a706:	4770      	bx	lr
 800a708:	4610      	mov	r0, r2
 800a70a:	e7fb      	b.n	800a704 <__ascii_mbtowc+0x16>
 800a70c:	f06f 0001 	mvn.w	r0, #1
 800a710:	e7f8      	b.n	800a704 <__ascii_mbtowc+0x16>

0800a712 <_realloc_r>:
 800a712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a716:	4680      	mov	r8, r0
 800a718:	4615      	mov	r5, r2
 800a71a:	460c      	mov	r4, r1
 800a71c:	b921      	cbnz	r1, 800a728 <_realloc_r+0x16>
 800a71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a722:	4611      	mov	r1, r2
 800a724:	f7fd bc88 	b.w	8008038 <_malloc_r>
 800a728:	b92a      	cbnz	r2, 800a736 <_realloc_r+0x24>
 800a72a:	f7fd fc11 	bl	8007f50 <_free_r>
 800a72e:	2400      	movs	r4, #0
 800a730:	4620      	mov	r0, r4
 800a732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a736:	f000 f8c4 	bl	800a8c2 <_malloc_usable_size_r>
 800a73a:	4285      	cmp	r5, r0
 800a73c:	4606      	mov	r6, r0
 800a73e:	d802      	bhi.n	800a746 <_realloc_r+0x34>
 800a740:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a744:	d8f4      	bhi.n	800a730 <_realloc_r+0x1e>
 800a746:	4629      	mov	r1, r5
 800a748:	4640      	mov	r0, r8
 800a74a:	f7fd fc75 	bl	8008038 <_malloc_r>
 800a74e:	4607      	mov	r7, r0
 800a750:	2800      	cmp	r0, #0
 800a752:	d0ec      	beq.n	800a72e <_realloc_r+0x1c>
 800a754:	42b5      	cmp	r5, r6
 800a756:	462a      	mov	r2, r5
 800a758:	4621      	mov	r1, r4
 800a75a:	bf28      	it	cs
 800a75c:	4632      	movcs	r2, r6
 800a75e:	f7ff fc43 	bl	8009fe8 <memcpy>
 800a762:	4621      	mov	r1, r4
 800a764:	4640      	mov	r0, r8
 800a766:	f7fd fbf3 	bl	8007f50 <_free_r>
 800a76a:	463c      	mov	r4, r7
 800a76c:	e7e0      	b.n	800a730 <_realloc_r+0x1e>

0800a76e <__ascii_wctomb>:
 800a76e:	4603      	mov	r3, r0
 800a770:	4608      	mov	r0, r1
 800a772:	b141      	cbz	r1, 800a786 <__ascii_wctomb+0x18>
 800a774:	2aff      	cmp	r2, #255	@ 0xff
 800a776:	d904      	bls.n	800a782 <__ascii_wctomb+0x14>
 800a778:	228a      	movs	r2, #138	@ 0x8a
 800a77a:	601a      	str	r2, [r3, #0]
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	4770      	bx	lr
 800a782:	700a      	strb	r2, [r1, #0]
 800a784:	2001      	movs	r0, #1
 800a786:	4770      	bx	lr

0800a788 <fiprintf>:
 800a788:	b40e      	push	{r1, r2, r3}
 800a78a:	b503      	push	{r0, r1, lr}
 800a78c:	4601      	mov	r1, r0
 800a78e:	ab03      	add	r3, sp, #12
 800a790:	4805      	ldr	r0, [pc, #20]	@ (800a7a8 <fiprintf+0x20>)
 800a792:	f853 2b04 	ldr.w	r2, [r3], #4
 800a796:	6800      	ldr	r0, [r0, #0]
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	f7ff f991 	bl	8009ac0 <_vfiprintf_r>
 800a79e:	b002      	add	sp, #8
 800a7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7a4:	b003      	add	sp, #12
 800a7a6:	4770      	bx	lr
 800a7a8:	20000028 	.word	0x20000028

0800a7ac <__swhatbuf_r>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7b4:	2900      	cmp	r1, #0
 800a7b6:	b096      	sub	sp, #88	@ 0x58
 800a7b8:	4615      	mov	r5, r2
 800a7ba:	461e      	mov	r6, r3
 800a7bc:	da0d      	bge.n	800a7da <__swhatbuf_r+0x2e>
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7c4:	f04f 0100 	mov.w	r1, #0
 800a7c8:	bf14      	ite	ne
 800a7ca:	2340      	movne	r3, #64	@ 0x40
 800a7cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	6031      	str	r1, [r6, #0]
 800a7d4:	602b      	str	r3, [r5, #0]
 800a7d6:	b016      	add	sp, #88	@ 0x58
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	466a      	mov	r2, sp
 800a7dc:	f000 f848 	bl	800a870 <_fstat_r>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	dbec      	blt.n	800a7be <__swhatbuf_r+0x12>
 800a7e4:	9901      	ldr	r1, [sp, #4]
 800a7e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7ee:	4259      	negs	r1, r3
 800a7f0:	4159      	adcs	r1, r3
 800a7f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7f6:	e7eb      	b.n	800a7d0 <__swhatbuf_r+0x24>

0800a7f8 <__smakebuf_r>:
 800a7f8:	898b      	ldrh	r3, [r1, #12]
 800a7fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7fc:	079d      	lsls	r5, r3, #30
 800a7fe:	4606      	mov	r6, r0
 800a800:	460c      	mov	r4, r1
 800a802:	d507      	bpl.n	800a814 <__smakebuf_r+0x1c>
 800a804:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	6123      	str	r3, [r4, #16]
 800a80c:	2301      	movs	r3, #1
 800a80e:	6163      	str	r3, [r4, #20]
 800a810:	b003      	add	sp, #12
 800a812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a814:	ab01      	add	r3, sp, #4
 800a816:	466a      	mov	r2, sp
 800a818:	f7ff ffc8 	bl	800a7ac <__swhatbuf_r>
 800a81c:	9f00      	ldr	r7, [sp, #0]
 800a81e:	4605      	mov	r5, r0
 800a820:	4639      	mov	r1, r7
 800a822:	4630      	mov	r0, r6
 800a824:	f7fd fc08 	bl	8008038 <_malloc_r>
 800a828:	b948      	cbnz	r0, 800a83e <__smakebuf_r+0x46>
 800a82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a82e:	059a      	lsls	r2, r3, #22
 800a830:	d4ee      	bmi.n	800a810 <__smakebuf_r+0x18>
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	f043 0302 	orr.w	r3, r3, #2
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	e7e2      	b.n	800a804 <__smakebuf_r+0xc>
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	6020      	str	r0, [r4, #0]
 800a842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a846:	81a3      	strh	r3, [r4, #12]
 800a848:	9b01      	ldr	r3, [sp, #4]
 800a84a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a84e:	b15b      	cbz	r3, 800a868 <__smakebuf_r+0x70>
 800a850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a854:	4630      	mov	r0, r6
 800a856:	f000 f81d 	bl	800a894 <_isatty_r>
 800a85a:	b128      	cbz	r0, 800a868 <__smakebuf_r+0x70>
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	f023 0303 	bic.w	r3, r3, #3
 800a862:	f043 0301 	orr.w	r3, r3, #1
 800a866:	81a3      	strh	r3, [r4, #12]
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	431d      	orrs	r5, r3
 800a86c:	81a5      	strh	r5, [r4, #12]
 800a86e:	e7cf      	b.n	800a810 <__smakebuf_r+0x18>

0800a870 <_fstat_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d07      	ldr	r5, [pc, #28]	@ (800a890 <_fstat_r+0x20>)
 800a874:	2300      	movs	r3, #0
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	4611      	mov	r1, r2
 800a87c:	602b      	str	r3, [r5, #0]
 800a87e:	f7f7 fd33 	bl	80022e8 <_fstat>
 800a882:	1c43      	adds	r3, r0, #1
 800a884:	d102      	bne.n	800a88c <_fstat_r+0x1c>
 800a886:	682b      	ldr	r3, [r5, #0]
 800a888:	b103      	cbz	r3, 800a88c <_fstat_r+0x1c>
 800a88a:	6023      	str	r3, [r4, #0]
 800a88c:	bd38      	pop	{r3, r4, r5, pc}
 800a88e:	bf00      	nop
 800a890:	20008568 	.word	0x20008568

0800a894 <_isatty_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	4d06      	ldr	r5, [pc, #24]	@ (800a8b0 <_isatty_r+0x1c>)
 800a898:	2300      	movs	r3, #0
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	602b      	str	r3, [r5, #0]
 800a8a0:	f7f7 fd32 	bl	8002308 <_isatty>
 800a8a4:	1c43      	adds	r3, r0, #1
 800a8a6:	d102      	bne.n	800a8ae <_isatty_r+0x1a>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	b103      	cbz	r3, 800a8ae <_isatty_r+0x1a>
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	20008568 	.word	0x20008568

0800a8b4 <abort>:
 800a8b4:	b508      	push	{r3, lr}
 800a8b6:	2006      	movs	r0, #6
 800a8b8:	f000 f834 	bl	800a924 <raise>
 800a8bc:	2001      	movs	r0, #1
 800a8be:	f7f7 fcdf 	bl	8002280 <_exit>

0800a8c2 <_malloc_usable_size_r>:
 800a8c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c6:	1f18      	subs	r0, r3, #4
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bfbc      	itt	lt
 800a8cc:	580b      	ldrlt	r3, [r1, r0]
 800a8ce:	18c0      	addlt	r0, r0, r3
 800a8d0:	4770      	bx	lr

0800a8d2 <_raise_r>:
 800a8d2:	291f      	cmp	r1, #31
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	4605      	mov	r5, r0
 800a8d8:	460c      	mov	r4, r1
 800a8da:	d904      	bls.n	800a8e6 <_raise_r+0x14>
 800a8dc:	2316      	movs	r3, #22
 800a8de:	6003      	str	r3, [r0, #0]
 800a8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e4:	bd38      	pop	{r3, r4, r5, pc}
 800a8e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a8e8:	b112      	cbz	r2, 800a8f0 <_raise_r+0x1e>
 800a8ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8ee:	b94b      	cbnz	r3, 800a904 <_raise_r+0x32>
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	f000 f831 	bl	800a958 <_getpid_r>
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a900:	f000 b818 	b.w	800a934 <_kill_r>
 800a904:	2b01      	cmp	r3, #1
 800a906:	d00a      	beq.n	800a91e <_raise_r+0x4c>
 800a908:	1c59      	adds	r1, r3, #1
 800a90a:	d103      	bne.n	800a914 <_raise_r+0x42>
 800a90c:	2316      	movs	r3, #22
 800a90e:	6003      	str	r3, [r0, #0]
 800a910:	2001      	movs	r0, #1
 800a912:	e7e7      	b.n	800a8e4 <_raise_r+0x12>
 800a914:	2100      	movs	r1, #0
 800a916:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a91a:	4620      	mov	r0, r4
 800a91c:	4798      	blx	r3
 800a91e:	2000      	movs	r0, #0
 800a920:	e7e0      	b.n	800a8e4 <_raise_r+0x12>
	...

0800a924 <raise>:
 800a924:	4b02      	ldr	r3, [pc, #8]	@ (800a930 <raise+0xc>)
 800a926:	4601      	mov	r1, r0
 800a928:	6818      	ldr	r0, [r3, #0]
 800a92a:	f7ff bfd2 	b.w	800a8d2 <_raise_r>
 800a92e:	bf00      	nop
 800a930:	20000028 	.word	0x20000028

0800a934 <_kill_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d07      	ldr	r5, [pc, #28]	@ (800a954 <_kill_r+0x20>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	4611      	mov	r1, r2
 800a940:	602b      	str	r3, [r5, #0]
 800a942:	f7f7 fc8d 	bl	8002260 <_kill>
 800a946:	1c43      	adds	r3, r0, #1
 800a948:	d102      	bne.n	800a950 <_kill_r+0x1c>
 800a94a:	682b      	ldr	r3, [r5, #0]
 800a94c:	b103      	cbz	r3, 800a950 <_kill_r+0x1c>
 800a94e:	6023      	str	r3, [r4, #0]
 800a950:	bd38      	pop	{r3, r4, r5, pc}
 800a952:	bf00      	nop
 800a954:	20008568 	.word	0x20008568

0800a958 <_getpid_r>:
 800a958:	f7f7 bc7a 	b.w	8002250 <_getpid>
 800a95c:	0000      	movs	r0, r0
	...

0800a960 <log10>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	ed2d 8b02 	vpush	{d8}
 800a966:	ec55 4b10 	vmov	r4, r5, d0
 800a96a:	f000 f8c1 	bl	800aaf0 <__ieee754_log10>
 800a96e:	4622      	mov	r2, r4
 800a970:	462b      	mov	r3, r5
 800a972:	4620      	mov	r0, r4
 800a974:	4629      	mov	r1, r5
 800a976:	eeb0 8a40 	vmov.f32	s16, s0
 800a97a:	eef0 8a60 	vmov.f32	s17, s1
 800a97e:	f7f6 f8e5 	bl	8000b4c <__aeabi_dcmpun>
 800a982:	b998      	cbnz	r0, 800a9ac <log10+0x4c>
 800a984:	2200      	movs	r2, #0
 800a986:	2300      	movs	r3, #0
 800a988:	4620      	mov	r0, r4
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7f6 f8c0 	bl	8000b10 <__aeabi_dcmple>
 800a990:	b160      	cbz	r0, 800a9ac <log10+0x4c>
 800a992:	2200      	movs	r2, #0
 800a994:	2300      	movs	r3, #0
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f6 f8a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800a99e:	b160      	cbz	r0, 800a9ba <log10+0x5a>
 800a9a0:	f7fc fc54 	bl	800724c <__errno>
 800a9a4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 800a9d0 <log10+0x70>
 800a9a8:	2322      	movs	r3, #34	@ 0x22
 800a9aa:	6003      	str	r3, [r0, #0]
 800a9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a9b0:	eef0 0a68 	vmov.f32	s1, s17
 800a9b4:	ecbd 8b02 	vpop	{d8}
 800a9b8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ba:	f7fc fc47 	bl	800724c <__errno>
 800a9be:	ecbd 8b02 	vpop	{d8}
 800a9c2:	2321      	movs	r3, #33	@ 0x21
 800a9c4:	6003      	str	r3, [r0, #0]
 800a9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ca:	4803      	ldr	r0, [pc, #12]	@ (800a9d8 <log10+0x78>)
 800a9cc:	f7ff bb1c 	b.w	800a008 <nan>
 800a9d0:	00000000 	.word	0x00000000
 800a9d4:	fff00000 	.word	0xfff00000
 800a9d8:	0800cce5 	.word	0x0800cce5

0800a9dc <cabs>:
 800a9dc:	b508      	push	{r3, lr}
 800a9de:	ed2d 8b06 	vpush	{d8-d10}
 800a9e2:	eeb0 aa40 	vmov.f32	s20, s0
 800a9e6:	eef0 aa60 	vmov.f32	s21, s1
 800a9ea:	eeb0 9a41 	vmov.f32	s18, s2
 800a9ee:	eef0 9a61 	vmov.f32	s19, s3
 800a9f2:	f000 f879 	bl	800aae8 <creal>
 800a9f6:	eeb0 1a49 	vmov.f32	s2, s18
 800a9fa:	eef0 1a69 	vmov.f32	s3, s19
 800a9fe:	eeb0 8a40 	vmov.f32	s16, s0
 800aa02:	eef0 8a60 	vmov.f32	s17, s1
 800aa06:	eeb0 0a4a 	vmov.f32	s0, s20
 800aa0a:	eef0 0a6a 	vmov.f32	s1, s21
 800aa0e:	f000 f866 	bl	800aade <cimag>
 800aa12:	eeb0 1a40 	vmov.f32	s2, s0
 800aa16:	eef0 1a60 	vmov.f32	s3, s1
 800aa1a:	eeb0 0a48 	vmov.f32	s0, s16
 800aa1e:	eef0 0a68 	vmov.f32	s1, s17
 800aa22:	ecbd 8b06 	vpop	{d8-d10}
 800aa26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800aa2a:	f000 b935 	b.w	800ac98 <hypot>

0800aa2e <cexp>:
 800aa2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa32:	ed2d 8b06 	vpush	{d8-d10}
 800aa36:	eeb0 aa40 	vmov.f32	s20, s0
 800aa3a:	eef0 aa60 	vmov.f32	s21, s1
 800aa3e:	eeb0 8a41 	vmov.f32	s16, s2
 800aa42:	eef0 8a61 	vmov.f32	s17, s3
 800aa46:	f000 f84f 	bl	800aae8 <creal>
 800aa4a:	eeb0 1a48 	vmov.f32	s2, s16
 800aa4e:	eef0 1a68 	vmov.f32	s3, s17
 800aa52:	eeb0 9a40 	vmov.f32	s18, s0
 800aa56:	eef0 9a60 	vmov.f32	s19, s1
 800aa5a:	eeb0 0a4a 	vmov.f32	s0, s20
 800aa5e:	eef0 0a6a 	vmov.f32	s1, s21
 800aa62:	f000 f83c 	bl	800aade <cimag>
 800aa66:	eeb0 8a40 	vmov.f32	s16, s0
 800aa6a:	eef0 8a60 	vmov.f32	s17, s1
 800aa6e:	eeb0 0a49 	vmov.f32	s0, s18
 800aa72:	eef0 0a69 	vmov.f32	s1, s19
 800aa76:	f000 f8c7 	bl	800ac08 <exp>
 800aa7a:	ec57 6b10 	vmov	r6, r7, d0
 800aa7e:	eeb0 0a48 	vmov.f32	s0, s16
 800aa82:	eef0 0a68 	vmov.f32	s1, s17
 800aa86:	f000 f98f 	bl	800ada8 <sin>
 800aa8a:	4632      	mov	r2, r6
 800aa8c:	463b      	mov	r3, r7
 800aa8e:	ec51 0b10 	vmov	r0, r1, d0
 800aa92:	f7f5 fdc1 	bl	8000618 <__aeabi_dmul>
 800aa96:	eeb0 0a48 	vmov.f32	s0, s16
 800aa9a:	eef0 0a68 	vmov.f32	s1, s17
 800aa9e:	4604      	mov	r4, r0
 800aaa0:	460d      	mov	r5, r1
 800aaa2:	f000 f92d 	bl	800ad00 <cos>
 800aaa6:	4632      	mov	r2, r6
 800aaa8:	ec51 0b10 	vmov	r0, r1, d0
 800aaac:	463b      	mov	r3, r7
 800aaae:	f7f5 fdb3 	bl	8000618 <__aeabi_dmul>
 800aab2:	2200      	movs	r2, #0
 800aab4:	4606      	mov	r6, r0
 800aab6:	460f      	mov	r7, r1
 800aab8:	2300      	movs	r3, #0
 800aaba:	4620      	mov	r0, r4
 800aabc:	4629      	mov	r1, r5
 800aabe:	f7f5 fdab 	bl	8000618 <__aeabi_dmul>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	4630      	mov	r0, r6
 800aac8:	4639      	mov	r1, r7
 800aaca:	f7f5 fbef 	bl	80002ac <__adddf3>
 800aace:	ecbd 8b06 	vpop	{d8-d10}
 800aad2:	ec41 0b10 	vmov	d0, r0, r1
 800aad6:	ec45 4b11 	vmov	d1, r4, r5
 800aada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aade <cimag>:
 800aade:	eeb0 0a41 	vmov.f32	s0, s2
 800aae2:	eef0 0a61 	vmov.f32	s1, s3
 800aae6:	4770      	bx	lr

0800aae8 <creal>:
 800aae8:	4770      	bx	lr
 800aaea:	0000      	movs	r0, r0
 800aaec:	0000      	movs	r0, r0
	...

0800aaf0 <__ieee754_log10>:
 800aaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf4:	ec55 4b10 	vmov	r4, r5, d0
 800aaf8:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800aafc:	ed2d 8b02 	vpush	{d8}
 800ab00:	462b      	mov	r3, r5
 800ab02:	da2e      	bge.n	800ab62 <__ieee754_log10+0x72>
 800ab04:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ab08:	4322      	orrs	r2, r4
 800ab0a:	d10b      	bne.n	800ab24 <__ieee754_log10+0x34>
 800ab0c:	493a      	ldr	r1, [pc, #232]	@ (800abf8 <__ieee754_log10+0x108>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2300      	movs	r3, #0
 800ab12:	2000      	movs	r0, #0
 800ab14:	f7f5 feaa 	bl	800086c <__aeabi_ddiv>
 800ab18:	ecbd 8b02 	vpop	{d8}
 800ab1c:	ec41 0b10 	vmov	d0, r0, r1
 800ab20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab24:	2d00      	cmp	r5, #0
 800ab26:	da07      	bge.n	800ab38 <__ieee754_log10+0x48>
 800ab28:	4622      	mov	r2, r4
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 fbbb 	bl	80002a8 <__aeabi_dsub>
 800ab32:	2200      	movs	r2, #0
 800ab34:	2300      	movs	r3, #0
 800ab36:	e7ed      	b.n	800ab14 <__ieee754_log10+0x24>
 800ab38:	4b30      	ldr	r3, [pc, #192]	@ (800abfc <__ieee754_log10+0x10c>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f7f5 fd6a 	bl	8000618 <__aeabi_dmul>
 800ab44:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 800ab48:	4604      	mov	r4, r0
 800ab4a:	460d      	mov	r5, r1
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	492c      	ldr	r1, [pc, #176]	@ (800ac00 <__ieee754_log10+0x110>)
 800ab50:	428b      	cmp	r3, r1
 800ab52:	dd08      	ble.n	800ab66 <__ieee754_log10+0x76>
 800ab54:	4622      	mov	r2, r4
 800ab56:	462b      	mov	r3, r5
 800ab58:	4620      	mov	r0, r4
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	f7f5 fba6 	bl	80002ac <__adddf3>
 800ab60:	e7da      	b.n	800ab18 <__ieee754_log10+0x28>
 800ab62:	2200      	movs	r2, #0
 800ab64:	e7f3      	b.n	800ab4e <__ieee754_log10+0x5e>
 800ab66:	1518      	asrs	r0, r3, #20
 800ab68:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800ab6c:	4410      	add	r0, r2
 800ab6e:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800ab72:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800ab76:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800ab7a:	f7f5 fce3 	bl	8000544 <__aeabi_i2d>
 800ab7e:	f5c9 737f 	rsb	r3, r9, #1020	@ 0x3fc
 800ab82:	3303      	adds	r3, #3
 800ab84:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800ab88:	a315      	add	r3, pc, #84	@ (adr r3, 800abe0 <__ieee754_log10+0xf0>)
 800ab8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8e:	ec45 4b18 	vmov	d8, r4, r5
 800ab92:	4606      	mov	r6, r0
 800ab94:	460f      	mov	r7, r1
 800ab96:	f7f5 fd3f 	bl	8000618 <__aeabi_dmul>
 800ab9a:	eeb0 0a48 	vmov.f32	s0, s16
 800ab9e:	eef0 0a68 	vmov.f32	s1, s17
 800aba2:	4604      	mov	r4, r0
 800aba4:	460d      	mov	r5, r1
 800aba6:	f000 fd73 	bl	800b690 <__ieee754_log>
 800abaa:	a30f      	add	r3, pc, #60	@ (adr r3, 800abe8 <__ieee754_log10+0xf8>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	ec51 0b10 	vmov	r0, r1, d0
 800abb4:	f7f5 fd30 	bl	8000618 <__aeabi_dmul>
 800abb8:	4622      	mov	r2, r4
 800abba:	462b      	mov	r3, r5
 800abbc:	f7f5 fb76 	bl	80002ac <__adddf3>
 800abc0:	a30b      	add	r3, pc, #44	@ (adr r3, 800abf0 <__ieee754_log10+0x100>)
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	4604      	mov	r4, r0
 800abc8:	460d      	mov	r5, r1
 800abca:	4630      	mov	r0, r6
 800abcc:	4639      	mov	r1, r7
 800abce:	f7f5 fd23 	bl	8000618 <__aeabi_dmul>
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	4620      	mov	r0, r4
 800abd8:	4629      	mov	r1, r5
 800abda:	e7bf      	b.n	800ab5c <__ieee754_log10+0x6c>
 800abdc:	f3af 8000 	nop.w
 800abe0:	11f12b36 	.word	0x11f12b36
 800abe4:	3d59fef3 	.word	0x3d59fef3
 800abe8:	1526e50e 	.word	0x1526e50e
 800abec:	3fdbcb7b 	.word	0x3fdbcb7b
 800abf0:	509f6000 	.word	0x509f6000
 800abf4:	3fd34413 	.word	0x3fd34413
 800abf8:	c3500000 	.word	0xc3500000
 800abfc:	43500000 	.word	0x43500000
 800ac00:	7fefffff 	.word	0x7fefffff
 800ac04:	00000000 	.word	0x00000000

0800ac08 <exp>:
 800ac08:	b538      	push	{r3, r4, r5, lr}
 800ac0a:	ed2d 8b02 	vpush	{d8}
 800ac0e:	ec55 4b10 	vmov	r4, r5, d0
 800ac12:	f000 faad 	bl	800b170 <__ieee754_exp>
 800ac16:	eeb0 8a40 	vmov.f32	s16, s0
 800ac1a:	eef0 8a60 	vmov.f32	s17, s1
 800ac1e:	ec45 4b10 	vmov	d0, r4, r5
 800ac22:	f000 f915 	bl	800ae50 <finite>
 800ac26:	b168      	cbz	r0, 800ac44 <exp+0x3c>
 800ac28:	a317      	add	r3, pc, #92	@ (adr r3, 800ac88 <exp+0x80>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	4620      	mov	r0, r4
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7f5 ff81 	bl	8000b38 <__aeabi_dcmpgt>
 800ac36:	b160      	cbz	r0, 800ac52 <exp+0x4a>
 800ac38:	f7fc fb08 	bl	800724c <__errno>
 800ac3c:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 800ac78 <exp+0x70>
 800ac40:	2322      	movs	r3, #34	@ 0x22
 800ac42:	6003      	str	r3, [r0, #0]
 800ac44:	eeb0 0a48 	vmov.f32	s0, s16
 800ac48:	eef0 0a68 	vmov.f32	s1, s17
 800ac4c:	ecbd 8b02 	vpop	{d8}
 800ac50:	bd38      	pop	{r3, r4, r5, pc}
 800ac52:	a30f      	add	r3, pc, #60	@ (adr r3, 800ac90 <exp+0x88>)
 800ac54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac58:	4620      	mov	r0, r4
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	f7f5 ff4e 	bl	8000afc <__aeabi_dcmplt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d0ef      	beq.n	800ac44 <exp+0x3c>
 800ac64:	f7fc faf2 	bl	800724c <__errno>
 800ac68:	2322      	movs	r3, #34	@ 0x22
 800ac6a:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800ac80 <exp+0x78>
 800ac6e:	6003      	str	r3, [r0, #0]
 800ac70:	e7e8      	b.n	800ac44 <exp+0x3c>
 800ac72:	bf00      	nop
 800ac74:	f3af 8000 	nop.w
 800ac78:	00000000 	.word	0x00000000
 800ac7c:	7ff00000 	.word	0x7ff00000
	...
 800ac88:	fefa39ef 	.word	0xfefa39ef
 800ac8c:	40862e42 	.word	0x40862e42
 800ac90:	d52d3051 	.word	0xd52d3051
 800ac94:	c0874910 	.word	0xc0874910

0800ac98 <hypot>:
 800ac98:	b508      	push	{r3, lr}
 800ac9a:	ed2d 8b06 	vpush	{d8-d10}
 800ac9e:	eeb0 aa40 	vmov.f32	s20, s0
 800aca2:	eef0 aa60 	vmov.f32	s21, s1
 800aca6:	eeb0 9a41 	vmov.f32	s18, s2
 800acaa:	eef0 9a61 	vmov.f32	s19, s3
 800acae:	f000 fbd9 	bl	800b464 <__ieee754_hypot>
 800acb2:	eeb0 8a40 	vmov.f32	s16, s0
 800acb6:	eef0 8a60 	vmov.f32	s17, s1
 800acba:	f000 f8c9 	bl	800ae50 <finite>
 800acbe:	b998      	cbnz	r0, 800ace8 <hypot+0x50>
 800acc0:	eeb0 0a4a 	vmov.f32	s0, s20
 800acc4:	eef0 0a6a 	vmov.f32	s1, s21
 800acc8:	f000 f8c2 	bl	800ae50 <finite>
 800accc:	b160      	cbz	r0, 800ace8 <hypot+0x50>
 800acce:	eeb0 0a49 	vmov.f32	s0, s18
 800acd2:	eef0 0a69 	vmov.f32	s1, s19
 800acd6:	f000 f8bb 	bl	800ae50 <finite>
 800acda:	b128      	cbz	r0, 800ace8 <hypot+0x50>
 800acdc:	f7fc fab6 	bl	800724c <__errno>
 800ace0:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800acf8 <hypot+0x60>
 800ace4:	2322      	movs	r3, #34	@ 0x22
 800ace6:	6003      	str	r3, [r0, #0]
 800ace8:	eeb0 0a48 	vmov.f32	s0, s16
 800acec:	eef0 0a68 	vmov.f32	s1, s17
 800acf0:	ecbd 8b06 	vpop	{d8-d10}
 800acf4:	bd08      	pop	{r3, pc}
 800acf6:	bf00      	nop
 800acf8:	00000000 	.word	0x00000000
 800acfc:	7ff00000 	.word	0x7ff00000

0800ad00 <cos>:
 800ad00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad02:	ec53 2b10 	vmov	r2, r3, d0
 800ad06:	4826      	ldr	r0, [pc, #152]	@ (800ada0 <cos+0xa0>)
 800ad08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ad0c:	4281      	cmp	r1, r0
 800ad0e:	d806      	bhi.n	800ad1e <cos+0x1e>
 800ad10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ad98 <cos+0x98>
 800ad14:	b005      	add	sp, #20
 800ad16:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad1a:	f000 b8a5 	b.w	800ae68 <__kernel_cos>
 800ad1e:	4821      	ldr	r0, [pc, #132]	@ (800ada4 <cos+0xa4>)
 800ad20:	4281      	cmp	r1, r0
 800ad22:	d908      	bls.n	800ad36 <cos+0x36>
 800ad24:	4610      	mov	r0, r2
 800ad26:	4619      	mov	r1, r3
 800ad28:	f7f5 fabe 	bl	80002a8 <__aeabi_dsub>
 800ad2c:	ec41 0b10 	vmov	d0, r0, r1
 800ad30:	b005      	add	sp, #20
 800ad32:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad36:	4668      	mov	r0, sp
 800ad38:	f000 fe62 	bl	800ba00 <__ieee754_rem_pio2>
 800ad3c:	f000 0003 	and.w	r0, r0, #3
 800ad40:	2801      	cmp	r0, #1
 800ad42:	d00b      	beq.n	800ad5c <cos+0x5c>
 800ad44:	2802      	cmp	r0, #2
 800ad46:	d015      	beq.n	800ad74 <cos+0x74>
 800ad48:	b9d8      	cbnz	r0, 800ad82 <cos+0x82>
 800ad4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad4e:	ed9d 0b00 	vldr	d0, [sp]
 800ad52:	f000 f889 	bl	800ae68 <__kernel_cos>
 800ad56:	ec51 0b10 	vmov	r0, r1, d0
 800ad5a:	e7e7      	b.n	800ad2c <cos+0x2c>
 800ad5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad60:	ed9d 0b00 	vldr	d0, [sp]
 800ad64:	f000 f948 	bl	800aff8 <__kernel_sin>
 800ad68:	ec53 2b10 	vmov	r2, r3, d0
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ad72:	e7db      	b.n	800ad2c <cos+0x2c>
 800ad74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad78:	ed9d 0b00 	vldr	d0, [sp]
 800ad7c:	f000 f874 	bl	800ae68 <__kernel_cos>
 800ad80:	e7f2      	b.n	800ad68 <cos+0x68>
 800ad82:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad86:	ed9d 0b00 	vldr	d0, [sp]
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	f000 f934 	bl	800aff8 <__kernel_sin>
 800ad90:	e7e1      	b.n	800ad56 <cos+0x56>
 800ad92:	bf00      	nop
 800ad94:	f3af 8000 	nop.w
	...
 800ada0:	3fe921fb 	.word	0x3fe921fb
 800ada4:	7fefffff 	.word	0x7fefffff

0800ada8 <sin>:
 800ada8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adaa:	ec53 2b10 	vmov	r2, r3, d0
 800adae:	4826      	ldr	r0, [pc, #152]	@ (800ae48 <sin+0xa0>)
 800adb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800adb4:	4281      	cmp	r1, r0
 800adb6:	d807      	bhi.n	800adc8 <sin+0x20>
 800adb8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ae40 <sin+0x98>
 800adbc:	2000      	movs	r0, #0
 800adbe:	b005      	add	sp, #20
 800adc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800adc4:	f000 b918 	b.w	800aff8 <__kernel_sin>
 800adc8:	4820      	ldr	r0, [pc, #128]	@ (800ae4c <sin+0xa4>)
 800adca:	4281      	cmp	r1, r0
 800adcc:	d908      	bls.n	800ade0 <sin+0x38>
 800adce:	4610      	mov	r0, r2
 800add0:	4619      	mov	r1, r3
 800add2:	f7f5 fa69 	bl	80002a8 <__aeabi_dsub>
 800add6:	ec41 0b10 	vmov	d0, r0, r1
 800adda:	b005      	add	sp, #20
 800addc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ade0:	4668      	mov	r0, sp
 800ade2:	f000 fe0d 	bl	800ba00 <__ieee754_rem_pio2>
 800ade6:	f000 0003 	and.w	r0, r0, #3
 800adea:	2801      	cmp	r0, #1
 800adec:	d00c      	beq.n	800ae08 <sin+0x60>
 800adee:	2802      	cmp	r0, #2
 800adf0:	d011      	beq.n	800ae16 <sin+0x6e>
 800adf2:	b9e8      	cbnz	r0, 800ae30 <sin+0x88>
 800adf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800adf8:	ed9d 0b00 	vldr	d0, [sp]
 800adfc:	2001      	movs	r0, #1
 800adfe:	f000 f8fb 	bl	800aff8 <__kernel_sin>
 800ae02:	ec51 0b10 	vmov	r0, r1, d0
 800ae06:	e7e6      	b.n	800add6 <sin+0x2e>
 800ae08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae0c:	ed9d 0b00 	vldr	d0, [sp]
 800ae10:	f000 f82a 	bl	800ae68 <__kernel_cos>
 800ae14:	e7f5      	b.n	800ae02 <sin+0x5a>
 800ae16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae1a:	ed9d 0b00 	vldr	d0, [sp]
 800ae1e:	2001      	movs	r0, #1
 800ae20:	f000 f8ea 	bl	800aff8 <__kernel_sin>
 800ae24:	ec53 2b10 	vmov	r2, r3, d0
 800ae28:	4610      	mov	r0, r2
 800ae2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ae2e:	e7d2      	b.n	800add6 <sin+0x2e>
 800ae30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae34:	ed9d 0b00 	vldr	d0, [sp]
 800ae38:	f000 f816 	bl	800ae68 <__kernel_cos>
 800ae3c:	e7f2      	b.n	800ae24 <sin+0x7c>
 800ae3e:	bf00      	nop
	...
 800ae48:	3fe921fb 	.word	0x3fe921fb
 800ae4c:	7fefffff 	.word	0x7fefffff

0800ae50 <finite>:
 800ae50:	b082      	sub	sp, #8
 800ae52:	ed8d 0b00 	vstr	d0, [sp]
 800ae56:	9801      	ldr	r0, [sp, #4]
 800ae58:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ae5c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ae60:	0fc0      	lsrs	r0, r0, #31
 800ae62:	b002      	add	sp, #8
 800ae64:	4770      	bx	lr
	...

0800ae68 <__kernel_cos>:
 800ae68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	ec57 6b10 	vmov	r6, r7, d0
 800ae70:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ae74:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800ae78:	ed8d 1b00 	vstr	d1, [sp]
 800ae7c:	d206      	bcs.n	800ae8c <__kernel_cos+0x24>
 800ae7e:	4630      	mov	r0, r6
 800ae80:	4639      	mov	r1, r7
 800ae82:	f7f5 fe79 	bl	8000b78 <__aeabi_d2iz>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	f000 8088 	beq.w	800af9c <__kernel_cos+0x134>
 800ae8c:	4632      	mov	r2, r6
 800ae8e:	463b      	mov	r3, r7
 800ae90:	4630      	mov	r0, r6
 800ae92:	4639      	mov	r1, r7
 800ae94:	f7f5 fbc0 	bl	8000618 <__aeabi_dmul>
 800ae98:	4b51      	ldr	r3, [pc, #324]	@ (800afe0 <__kernel_cos+0x178>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	460d      	mov	r5, r1
 800aea0:	f7f5 fbba 	bl	8000618 <__aeabi_dmul>
 800aea4:	a340      	add	r3, pc, #256	@ (adr r3, 800afa8 <__kernel_cos+0x140>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	4682      	mov	sl, r0
 800aeac:	468b      	mov	fp, r1
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f7f5 fbb1 	bl	8000618 <__aeabi_dmul>
 800aeb6:	a33e      	add	r3, pc, #248	@ (adr r3, 800afb0 <__kernel_cos+0x148>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f7f5 f9f6 	bl	80002ac <__adddf3>
 800aec0:	4622      	mov	r2, r4
 800aec2:	462b      	mov	r3, r5
 800aec4:	f7f5 fba8 	bl	8000618 <__aeabi_dmul>
 800aec8:	a33b      	add	r3, pc, #236	@ (adr r3, 800afb8 <__kernel_cos+0x150>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 f9eb 	bl	80002a8 <__aeabi_dsub>
 800aed2:	4622      	mov	r2, r4
 800aed4:	462b      	mov	r3, r5
 800aed6:	f7f5 fb9f 	bl	8000618 <__aeabi_dmul>
 800aeda:	a339      	add	r3, pc, #228	@ (adr r3, 800afc0 <__kernel_cos+0x158>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f7f5 f9e4 	bl	80002ac <__adddf3>
 800aee4:	4622      	mov	r2, r4
 800aee6:	462b      	mov	r3, r5
 800aee8:	f7f5 fb96 	bl	8000618 <__aeabi_dmul>
 800aeec:	a336      	add	r3, pc, #216	@ (adr r3, 800afc8 <__kernel_cos+0x160>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	f7f5 f9d9 	bl	80002a8 <__aeabi_dsub>
 800aef6:	4622      	mov	r2, r4
 800aef8:	462b      	mov	r3, r5
 800aefa:	f7f5 fb8d 	bl	8000618 <__aeabi_dmul>
 800aefe:	a334      	add	r3, pc, #208	@ (adr r3, 800afd0 <__kernel_cos+0x168>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 f9d2 	bl	80002ac <__adddf3>
 800af08:	4622      	mov	r2, r4
 800af0a:	462b      	mov	r3, r5
 800af0c:	f7f5 fb84 	bl	8000618 <__aeabi_dmul>
 800af10:	4622      	mov	r2, r4
 800af12:	462b      	mov	r3, r5
 800af14:	f7f5 fb80 	bl	8000618 <__aeabi_dmul>
 800af18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af1c:	4604      	mov	r4, r0
 800af1e:	460d      	mov	r5, r1
 800af20:	4630      	mov	r0, r6
 800af22:	4639      	mov	r1, r7
 800af24:	f7f5 fb78 	bl	8000618 <__aeabi_dmul>
 800af28:	460b      	mov	r3, r1
 800af2a:	4602      	mov	r2, r0
 800af2c:	4629      	mov	r1, r5
 800af2e:	4620      	mov	r0, r4
 800af30:	f7f5 f9ba 	bl	80002a8 <__aeabi_dsub>
 800af34:	4b2b      	ldr	r3, [pc, #172]	@ (800afe4 <__kernel_cos+0x17c>)
 800af36:	4598      	cmp	r8, r3
 800af38:	4606      	mov	r6, r0
 800af3a:	460f      	mov	r7, r1
 800af3c:	d810      	bhi.n	800af60 <__kernel_cos+0xf8>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	4650      	mov	r0, sl
 800af44:	4659      	mov	r1, fp
 800af46:	f7f5 f9af 	bl	80002a8 <__aeabi_dsub>
 800af4a:	460b      	mov	r3, r1
 800af4c:	4926      	ldr	r1, [pc, #152]	@ (800afe8 <__kernel_cos+0x180>)
 800af4e:	4602      	mov	r2, r0
 800af50:	2000      	movs	r0, #0
 800af52:	f7f5 f9a9 	bl	80002a8 <__aeabi_dsub>
 800af56:	ec41 0b10 	vmov	d0, r0, r1
 800af5a:	b003      	add	sp, #12
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	4b22      	ldr	r3, [pc, #136]	@ (800afec <__kernel_cos+0x184>)
 800af62:	4921      	ldr	r1, [pc, #132]	@ (800afe8 <__kernel_cos+0x180>)
 800af64:	4598      	cmp	r8, r3
 800af66:	bf8c      	ite	hi
 800af68:	4d21      	ldrhi	r5, [pc, #132]	@ (800aff0 <__kernel_cos+0x188>)
 800af6a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800af6e:	2400      	movs	r4, #0
 800af70:	4622      	mov	r2, r4
 800af72:	462b      	mov	r3, r5
 800af74:	2000      	movs	r0, #0
 800af76:	f7f5 f997 	bl	80002a8 <__aeabi_dsub>
 800af7a:	4622      	mov	r2, r4
 800af7c:	4680      	mov	r8, r0
 800af7e:	4689      	mov	r9, r1
 800af80:	462b      	mov	r3, r5
 800af82:	4650      	mov	r0, sl
 800af84:	4659      	mov	r1, fp
 800af86:	f7f5 f98f 	bl	80002a8 <__aeabi_dsub>
 800af8a:	4632      	mov	r2, r6
 800af8c:	463b      	mov	r3, r7
 800af8e:	f7f5 f98b 	bl	80002a8 <__aeabi_dsub>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	e7da      	b.n	800af52 <__kernel_cos+0xea>
 800af9c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800afd8 <__kernel_cos+0x170>
 800afa0:	e7db      	b.n	800af5a <__kernel_cos+0xf2>
 800afa2:	bf00      	nop
 800afa4:	f3af 8000 	nop.w
 800afa8:	be8838d4 	.word	0xbe8838d4
 800afac:	bda8fae9 	.word	0xbda8fae9
 800afb0:	bdb4b1c4 	.word	0xbdb4b1c4
 800afb4:	3e21ee9e 	.word	0x3e21ee9e
 800afb8:	809c52ad 	.word	0x809c52ad
 800afbc:	3e927e4f 	.word	0x3e927e4f
 800afc0:	19cb1590 	.word	0x19cb1590
 800afc4:	3efa01a0 	.word	0x3efa01a0
 800afc8:	16c15177 	.word	0x16c15177
 800afcc:	3f56c16c 	.word	0x3f56c16c
 800afd0:	5555554c 	.word	0x5555554c
 800afd4:	3fa55555 	.word	0x3fa55555
 800afd8:	00000000 	.word	0x00000000
 800afdc:	3ff00000 	.word	0x3ff00000
 800afe0:	3fe00000 	.word	0x3fe00000
 800afe4:	3fd33332 	.word	0x3fd33332
 800afe8:	3ff00000 	.word	0x3ff00000
 800afec:	3fe90000 	.word	0x3fe90000
 800aff0:	3fd20000 	.word	0x3fd20000
 800aff4:	00000000 	.word	0x00000000

0800aff8 <__kernel_sin>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	ec55 4b10 	vmov	r4, r5, d0
 800b000:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b004:	b085      	sub	sp, #20
 800b006:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b00a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b00e:	4680      	mov	r8, r0
 800b010:	d205      	bcs.n	800b01e <__kernel_sin+0x26>
 800b012:	4620      	mov	r0, r4
 800b014:	4629      	mov	r1, r5
 800b016:	f7f5 fdaf 	bl	8000b78 <__aeabi_d2iz>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d052      	beq.n	800b0c4 <__kernel_sin+0xcc>
 800b01e:	4622      	mov	r2, r4
 800b020:	462b      	mov	r3, r5
 800b022:	4620      	mov	r0, r4
 800b024:	4629      	mov	r1, r5
 800b026:	f7f5 faf7 	bl	8000618 <__aeabi_dmul>
 800b02a:	4682      	mov	sl, r0
 800b02c:	468b      	mov	fp, r1
 800b02e:	4602      	mov	r2, r0
 800b030:	460b      	mov	r3, r1
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f7f5 faef 	bl	8000618 <__aeabi_dmul>
 800b03a:	a342      	add	r3, pc, #264	@ (adr r3, 800b144 <__kernel_sin+0x14c>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	e9cd 0100 	strd	r0, r1, [sp]
 800b044:	4650      	mov	r0, sl
 800b046:	4659      	mov	r1, fp
 800b048:	f7f5 fae6 	bl	8000618 <__aeabi_dmul>
 800b04c:	a33f      	add	r3, pc, #252	@ (adr r3, 800b14c <__kernel_sin+0x154>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f7f5 f929 	bl	80002a8 <__aeabi_dsub>
 800b056:	4652      	mov	r2, sl
 800b058:	465b      	mov	r3, fp
 800b05a:	f7f5 fadd 	bl	8000618 <__aeabi_dmul>
 800b05e:	a33d      	add	r3, pc, #244	@ (adr r3, 800b154 <__kernel_sin+0x15c>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 f922 	bl	80002ac <__adddf3>
 800b068:	4652      	mov	r2, sl
 800b06a:	465b      	mov	r3, fp
 800b06c:	f7f5 fad4 	bl	8000618 <__aeabi_dmul>
 800b070:	a33a      	add	r3, pc, #232	@ (adr r3, 800b15c <__kernel_sin+0x164>)
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	f7f5 f917 	bl	80002a8 <__aeabi_dsub>
 800b07a:	4652      	mov	r2, sl
 800b07c:	465b      	mov	r3, fp
 800b07e:	f7f5 facb 	bl	8000618 <__aeabi_dmul>
 800b082:	a338      	add	r3, pc, #224	@ (adr r3, 800b164 <__kernel_sin+0x16c>)
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	f7f5 f910 	bl	80002ac <__adddf3>
 800b08c:	4606      	mov	r6, r0
 800b08e:	460f      	mov	r7, r1
 800b090:	f1b8 0f00 	cmp.w	r8, #0
 800b094:	d11b      	bne.n	800b0ce <__kernel_sin+0xd6>
 800b096:	4602      	mov	r2, r0
 800b098:	460b      	mov	r3, r1
 800b09a:	4650      	mov	r0, sl
 800b09c:	4659      	mov	r1, fp
 800b09e:	f7f5 fabb 	bl	8000618 <__aeabi_dmul>
 800b0a2:	a325      	add	r3, pc, #148	@ (adr r3, 800b138 <__kernel_sin+0x140>)
 800b0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a8:	f7f5 f8fe 	bl	80002a8 <__aeabi_dsub>
 800b0ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0b0:	f7f5 fab2 	bl	8000618 <__aeabi_dmul>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f7f5 f8f6 	bl	80002ac <__adddf3>
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	460d      	mov	r5, r1
 800b0c4:	ec45 4b10 	vmov	d0, r4, r5
 800b0c8:	b005      	add	sp, #20
 800b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0d2:	4b1b      	ldr	r3, [pc, #108]	@ (800b140 <__kernel_sin+0x148>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f7f5 fa9f 	bl	8000618 <__aeabi_dmul>
 800b0da:	4632      	mov	r2, r6
 800b0dc:	4680      	mov	r8, r0
 800b0de:	4689      	mov	r9, r1
 800b0e0:	463b      	mov	r3, r7
 800b0e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0e6:	f7f5 fa97 	bl	8000618 <__aeabi_dmul>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	f7f5 f8d9 	bl	80002a8 <__aeabi_dsub>
 800b0f6:	4652      	mov	r2, sl
 800b0f8:	465b      	mov	r3, fp
 800b0fa:	f7f5 fa8d 	bl	8000618 <__aeabi_dmul>
 800b0fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b102:	f7f5 f8d1 	bl	80002a8 <__aeabi_dsub>
 800b106:	a30c      	add	r3, pc, #48	@ (adr r3, 800b138 <__kernel_sin+0x140>)
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	4606      	mov	r6, r0
 800b10e:	460f      	mov	r7, r1
 800b110:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b114:	f7f5 fa80 	bl	8000618 <__aeabi_dmul>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4630      	mov	r0, r6
 800b11e:	4639      	mov	r1, r7
 800b120:	f7f5 f8c4 	bl	80002ac <__adddf3>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4620      	mov	r0, r4
 800b12a:	4629      	mov	r1, r5
 800b12c:	f7f5 f8bc 	bl	80002a8 <__aeabi_dsub>
 800b130:	e7c6      	b.n	800b0c0 <__kernel_sin+0xc8>
 800b132:	bf00      	nop
 800b134:	f3af 8000 	nop.w
 800b138:	55555549 	.word	0x55555549
 800b13c:	3fc55555 	.word	0x3fc55555
 800b140:	3fe00000 	.word	0x3fe00000
 800b144:	5acfd57c 	.word	0x5acfd57c
 800b148:	3de5d93a 	.word	0x3de5d93a
 800b14c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b150:	3e5ae5e6 	.word	0x3e5ae5e6
 800b154:	57b1fe7d 	.word	0x57b1fe7d
 800b158:	3ec71de3 	.word	0x3ec71de3
 800b15c:	19c161d5 	.word	0x19c161d5
 800b160:	3f2a01a0 	.word	0x3f2a01a0
 800b164:	1110f8a6 	.word	0x1110f8a6
 800b168:	3f811111 	.word	0x3f811111
 800b16c:	00000000 	.word	0x00000000

0800b170 <__ieee754_exp>:
 800b170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b174:	ec55 4b10 	vmov	r4, r5, d0
 800b178:	49b1      	ldr	r1, [pc, #708]	@ (800b440 <__ieee754_exp+0x2d0>)
 800b17a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b17e:	428a      	cmp	r2, r1
 800b180:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800b184:	d936      	bls.n	800b1f4 <__ieee754_exp+0x84>
 800b186:	49af      	ldr	r1, [pc, #700]	@ (800b444 <__ieee754_exp+0x2d4>)
 800b188:	428a      	cmp	r2, r1
 800b18a:	d914      	bls.n	800b1b6 <__ieee754_exp+0x46>
 800b18c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b190:	4323      	orrs	r3, r4
 800b192:	4622      	mov	r2, r4
 800b194:	d007      	beq.n	800b1a6 <__ieee754_exp+0x36>
 800b196:	462b      	mov	r3, r5
 800b198:	4620      	mov	r0, r4
 800b19a:	4629      	mov	r1, r5
 800b19c:	f7f5 f886 	bl	80002ac <__adddf3>
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	460d      	mov	r5, r1
 800b1a4:	e002      	b.n	800b1ac <__ieee754_exp+0x3c>
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	f040 8118 	bne.w	800b3dc <__ieee754_exp+0x26c>
 800b1ac:	ec45 4b10 	vmov	d0, r4, r5
 800b1b0:	b004      	add	sp, #16
 800b1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b6:	a38c      	add	r3, pc, #560	@ (adr r3, 800b3e8 <__ieee754_exp+0x278>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	4620      	mov	r0, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 fcba 	bl	8000b38 <__aeabi_dcmpgt>
 800b1c4:	4607      	mov	r7, r0
 800b1c6:	b128      	cbz	r0, 800b1d4 <__ieee754_exp+0x64>
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	b004      	add	sp, #16
 800b1cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d0:	f000 be4e 	b.w	800be70 <__math_oflow>
 800b1d4:	a386      	add	r3, pc, #536	@ (adr r3, 800b3f0 <__ieee754_exp+0x280>)
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	4620      	mov	r0, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	f7f5 fc8d 	bl	8000afc <__aeabi_dcmplt>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	f000 8087 	beq.w	800b2f6 <__ieee754_exp+0x186>
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	b004      	add	sp, #16
 800b1ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f0:	f000 be36 	b.w	800be60 <__math_uflow>
 800b1f4:	4b94      	ldr	r3, [pc, #592]	@ (800b448 <__ieee754_exp+0x2d8>)
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	f240 80a9 	bls.w	800b34e <__ieee754_exp+0x1de>
 800b1fc:	4b93      	ldr	r3, [pc, #588]	@ (800b44c <__ieee754_exp+0x2dc>)
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d879      	bhi.n	800b2f6 <__ieee754_exp+0x186>
 800b202:	4b93      	ldr	r3, [pc, #588]	@ (800b450 <__ieee754_exp+0x2e0>)
 800b204:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 f84a 	bl	80002a8 <__aeabi_dsub>
 800b214:	4b8f      	ldr	r3, [pc, #572]	@ (800b454 <__ieee754_exp+0x2e4>)
 800b216:	00f7      	lsls	r7, r6, #3
 800b218:	443b      	add	r3, r7
 800b21a:	ed93 7b00 	vldr	d7, [r3]
 800b21e:	ed8d 7b00 	vstr	d7, [sp]
 800b222:	f1c6 0a01 	rsb	sl, r6, #1
 800b226:	4680      	mov	r8, r0
 800b228:	4689      	mov	r9, r1
 800b22a:	ebaa 0a06 	sub.w	sl, sl, r6
 800b22e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b232:	4640      	mov	r0, r8
 800b234:	4649      	mov	r1, r9
 800b236:	f7f5 f837 	bl	80002a8 <__aeabi_dsub>
 800b23a:	4604      	mov	r4, r0
 800b23c:	460d      	mov	r5, r1
 800b23e:	4622      	mov	r2, r4
 800b240:	462b      	mov	r3, r5
 800b242:	4620      	mov	r0, r4
 800b244:	4629      	mov	r1, r5
 800b246:	f7f5 f9e7 	bl	8000618 <__aeabi_dmul>
 800b24a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b3f8 <__ieee754_exp+0x288>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	4606      	mov	r6, r0
 800b252:	460f      	mov	r7, r1
 800b254:	f7f5 f9e0 	bl	8000618 <__aeabi_dmul>
 800b258:	a369      	add	r3, pc, #420	@ (adr r3, 800b400 <__ieee754_exp+0x290>)
 800b25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25e:	f7f5 f823 	bl	80002a8 <__aeabi_dsub>
 800b262:	4632      	mov	r2, r6
 800b264:	463b      	mov	r3, r7
 800b266:	f7f5 f9d7 	bl	8000618 <__aeabi_dmul>
 800b26a:	a367      	add	r3, pc, #412	@ (adr r3, 800b408 <__ieee754_exp+0x298>)
 800b26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b270:	f7f5 f81c 	bl	80002ac <__adddf3>
 800b274:	4632      	mov	r2, r6
 800b276:	463b      	mov	r3, r7
 800b278:	f7f5 f9ce 	bl	8000618 <__aeabi_dmul>
 800b27c:	a364      	add	r3, pc, #400	@ (adr r3, 800b410 <__ieee754_exp+0x2a0>)
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	f7f5 f811 	bl	80002a8 <__aeabi_dsub>
 800b286:	4632      	mov	r2, r6
 800b288:	463b      	mov	r3, r7
 800b28a:	f7f5 f9c5 	bl	8000618 <__aeabi_dmul>
 800b28e:	a362      	add	r3, pc, #392	@ (adr r3, 800b418 <__ieee754_exp+0x2a8>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f5 f80a 	bl	80002ac <__adddf3>
 800b298:	4632      	mov	r2, r6
 800b29a:	463b      	mov	r3, r7
 800b29c:	f7f5 f9bc 	bl	8000618 <__aeabi_dmul>
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	f7f4 fffe 	bl	80002a8 <__aeabi_dsub>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4606      	mov	r6, r0
 800b2b2:	460f      	mov	r7, r1
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	f7f5 f9ae 	bl	8000618 <__aeabi_dmul>
 800b2bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2c0:	f1ba 0f00 	cmp.w	sl, #0
 800b2c4:	d15c      	bne.n	800b380 <__ieee754_exp+0x210>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	f7f4 ffea 	bl	80002a8 <__aeabi_dsub>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2dc:	f7f5 fac6 	bl	800086c <__aeabi_ddiv>
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	462b      	mov	r3, r5
 800b2e4:	f7f4 ffe0 	bl	80002a8 <__aeabi_dsub>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	495a      	ldr	r1, [pc, #360]	@ (800b458 <__ieee754_exp+0x2e8>)
 800b2f0:	f7f4 ffda 	bl	80002a8 <__aeabi_dsub>
 800b2f4:	e754      	b.n	800b1a0 <__ieee754_exp+0x30>
 800b2f6:	4b59      	ldr	r3, [pc, #356]	@ (800b45c <__ieee754_exp+0x2ec>)
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b2fe:	4629      	mov	r1, r5
 800b300:	a347      	add	r3, pc, #284	@ (adr r3, 800b420 <__ieee754_exp+0x2b0>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	f7f5 f987 	bl	8000618 <__aeabi_dmul>
 800b30a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b30e:	f7f4 ffcd 	bl	80002ac <__adddf3>
 800b312:	f7f5 fc31 	bl	8000b78 <__aeabi_d2iz>
 800b316:	4682      	mov	sl, r0
 800b318:	f7f5 f914 	bl	8000544 <__aeabi_i2d>
 800b31c:	a342      	add	r3, pc, #264	@ (adr r3, 800b428 <__ieee754_exp+0x2b8>)
 800b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	f7f5 f977 	bl	8000618 <__aeabi_dmul>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4620      	mov	r0, r4
 800b330:	4629      	mov	r1, r5
 800b332:	f7f4 ffb9 	bl	80002a8 <__aeabi_dsub>
 800b336:	a33e      	add	r3, pc, #248	@ (adr r3, 800b430 <__ieee754_exp+0x2c0>)
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	4680      	mov	r8, r0
 800b33e:	4689      	mov	r9, r1
 800b340:	4630      	mov	r0, r6
 800b342:	4639      	mov	r1, r7
 800b344:	f7f5 f968 	bl	8000618 <__aeabi_dmul>
 800b348:	e9cd 0100 	strd	r0, r1, [sp]
 800b34c:	e76f      	b.n	800b22e <__ieee754_exp+0xbe>
 800b34e:	4b44      	ldr	r3, [pc, #272]	@ (800b460 <__ieee754_exp+0x2f0>)
 800b350:	429a      	cmp	r2, r3
 800b352:	d810      	bhi.n	800b376 <__ieee754_exp+0x206>
 800b354:	a338      	add	r3, pc, #224	@ (adr r3, 800b438 <__ieee754_exp+0x2c8>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	4620      	mov	r0, r4
 800b35c:	4629      	mov	r1, r5
 800b35e:	f7f4 ffa5 	bl	80002ac <__adddf3>
 800b362:	4b3d      	ldr	r3, [pc, #244]	@ (800b458 <__ieee754_exp+0x2e8>)
 800b364:	2200      	movs	r2, #0
 800b366:	f7f5 fbe7 	bl	8000b38 <__aeabi_dcmpgt>
 800b36a:	b138      	cbz	r0, 800b37c <__ieee754_exp+0x20c>
 800b36c:	4b3a      	ldr	r3, [pc, #232]	@ (800b458 <__ieee754_exp+0x2e8>)
 800b36e:	2200      	movs	r2, #0
 800b370:	4620      	mov	r0, r4
 800b372:	4629      	mov	r1, r5
 800b374:	e712      	b.n	800b19c <__ieee754_exp+0x2c>
 800b376:	f04f 0a00 	mov.w	sl, #0
 800b37a:	e760      	b.n	800b23e <__ieee754_exp+0xce>
 800b37c:	4682      	mov	sl, r0
 800b37e:	e75e      	b.n	800b23e <__ieee754_exp+0xce>
 800b380:	4632      	mov	r2, r6
 800b382:	463b      	mov	r3, r7
 800b384:	2000      	movs	r0, #0
 800b386:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b38a:	f7f4 ff8d 	bl	80002a8 <__aeabi_dsub>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b396:	f7f5 fa69 	bl	800086c <__aeabi_ddiv>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3a2:	f7f4 ff81 	bl	80002a8 <__aeabi_dsub>
 800b3a6:	4642      	mov	r2, r8
 800b3a8:	464b      	mov	r3, r9
 800b3aa:	f7f4 ff7d 	bl	80002a8 <__aeabi_dsub>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	4928      	ldr	r1, [pc, #160]	@ (800b458 <__ieee754_exp+0x2e8>)
 800b3b6:	f7f4 ff77 	bl	80002a8 <__aeabi_dsub>
 800b3ba:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 800b3be:	4592      	cmp	sl, r2
 800b3c0:	db02      	blt.n	800b3c8 <__ieee754_exp+0x258>
 800b3c2:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b3c6:	e6eb      	b.n	800b1a0 <__ieee754_exp+0x30>
 800b3c8:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 800b3cc:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800b3d6:	f7f5 f91f 	bl	8000618 <__aeabi_dmul>
 800b3da:	e6e1      	b.n	800b1a0 <__ieee754_exp+0x30>
 800b3dc:	2400      	movs	r4, #0
 800b3de:	2500      	movs	r5, #0
 800b3e0:	e6e4      	b.n	800b1ac <__ieee754_exp+0x3c>
 800b3e2:	bf00      	nop
 800b3e4:	f3af 8000 	nop.w
 800b3e8:	fefa39ef 	.word	0xfefa39ef
 800b3ec:	40862e42 	.word	0x40862e42
 800b3f0:	d52d3051 	.word	0xd52d3051
 800b3f4:	c0874910 	.word	0xc0874910
 800b3f8:	72bea4d0 	.word	0x72bea4d0
 800b3fc:	3e663769 	.word	0x3e663769
 800b400:	c5d26bf1 	.word	0xc5d26bf1
 800b404:	3ebbbd41 	.word	0x3ebbbd41
 800b408:	af25de2c 	.word	0xaf25de2c
 800b40c:	3f11566a 	.word	0x3f11566a
 800b410:	16bebd93 	.word	0x16bebd93
 800b414:	3f66c16c 	.word	0x3f66c16c
 800b418:	5555553e 	.word	0x5555553e
 800b41c:	3fc55555 	.word	0x3fc55555
 800b420:	652b82fe 	.word	0x652b82fe
 800b424:	3ff71547 	.word	0x3ff71547
 800b428:	fee00000 	.word	0xfee00000
 800b42c:	3fe62e42 	.word	0x3fe62e42
 800b430:	35793c76 	.word	0x35793c76
 800b434:	3dea39ef 	.word	0x3dea39ef
 800b438:	8800759c 	.word	0x8800759c
 800b43c:	7e37e43c 	.word	0x7e37e43c
 800b440:	40862e41 	.word	0x40862e41
 800b444:	7fefffff 	.word	0x7fefffff
 800b448:	3fd62e42 	.word	0x3fd62e42
 800b44c:	3ff0a2b1 	.word	0x3ff0a2b1
 800b450:	0800cd58 	.word	0x0800cd58
 800b454:	0800cd48 	.word	0x0800cd48
 800b458:	3ff00000 	.word	0x3ff00000
 800b45c:	0800cd68 	.word	0x0800cd68
 800b460:	3defffff 	.word	0x3defffff

0800b464 <__ieee754_hypot>:
 800b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b468:	ec51 0b10 	vmov	r0, r1, d0
 800b46c:	ec53 2b11 	vmov	r2, r3, d1
 800b470:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800b474:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800b478:	42a5      	cmp	r5, r4
 800b47a:	b087      	sub	sp, #28
 800b47c:	da05      	bge.n	800b48a <__ieee754_hypot+0x26>
 800b47e:	462e      	mov	r6, r5
 800b480:	4625      	mov	r5, r4
 800b482:	4634      	mov	r4, r6
 800b484:	4606      	mov	r6, r0
 800b486:	4610      	mov	r0, r2
 800b488:	4632      	mov	r2, r6
 800b48a:	1b2b      	subs	r3, r5, r4
 800b48c:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800b490:	4629      	mov	r1, r5
 800b492:	4682      	mov	sl, r0
 800b494:	46ab      	mov	fp, r5
 800b496:	4616      	mov	r6, r2
 800b498:	4627      	mov	r7, r4
 800b49a:	dd05      	ble.n	800b4a8 <__ieee754_hypot+0x44>
 800b49c:	4623      	mov	r3, r4
 800b49e:	f7f4 ff05 	bl	80002ac <__adddf3>
 800b4a2:	4682      	mov	sl, r0
 800b4a4:	468b      	mov	fp, r1
 800b4a6:	e016      	b.n	800b4d6 <__ieee754_hypot+0x72>
 800b4a8:	4b75      	ldr	r3, [pc, #468]	@ (800b680 <__ieee754_hypot+0x21c>)
 800b4aa:	429d      	cmp	r5, r3
 800b4ac:	f340 8096 	ble.w	800b5dc <__ieee754_hypot+0x178>
 800b4b0:	4b74      	ldr	r3, [pc, #464]	@ (800b684 <__ieee754_hypot+0x220>)
 800b4b2:	429d      	cmp	r5, r3
 800b4b4:	dd14      	ble.n	800b4e0 <__ieee754_hypot+0x7c>
 800b4b6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b4ba:	4305      	orrs	r5, r0
 800b4bc:	d004      	beq.n	800b4c8 <__ieee754_hypot+0x64>
 800b4be:	4623      	mov	r3, r4
 800b4c0:	f7f4 fef4 	bl	80002ac <__adddf3>
 800b4c4:	4682      	mov	sl, r0
 800b4c6:	468b      	mov	fp, r1
 800b4c8:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800b4cc:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800b4d0:	4334      	orrs	r4, r6
 800b4d2:	f000 80d2 	beq.w	800b67a <__ieee754_hypot+0x216>
 800b4d6:	ec4b ab10 	vmov	d0, sl, fp
 800b4da:	b007      	add	sp, #28
 800b4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e0:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800b4e4:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800b4e8:	46ab      	mov	fp, r5
 800b4ea:	4627      	mov	r7, r4
 800b4ec:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	4b65      	ldr	r3, [pc, #404]	@ (800b688 <__ieee754_hypot+0x224>)
 800b4f4:	429c      	cmp	r4, r3
 800b4f6:	dc19      	bgt.n	800b52c <__ieee754_hypot+0xc8>
 800b4f8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b4fc:	da70      	bge.n	800b5e0 <__ieee754_hypot+0x17c>
 800b4fe:	4633      	mov	r3, r6
 800b500:	4323      	orrs	r3, r4
 800b502:	d0e8      	beq.n	800b4d6 <__ieee754_hypot+0x72>
 800b504:	4b61      	ldr	r3, [pc, #388]	@ (800b68c <__ieee754_hypot+0x228>)
 800b506:	2200      	movs	r2, #0
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f5 f884 	bl	8000618 <__aeabi_dmul>
 800b510:	4b5e      	ldr	r3, [pc, #376]	@ (800b68c <__ieee754_hypot+0x228>)
 800b512:	4606      	mov	r6, r0
 800b514:	460f      	mov	r7, r1
 800b516:	4650      	mov	r0, sl
 800b518:	4659      	mov	r1, fp
 800b51a:	2200      	movs	r2, #0
 800b51c:	f7f5 f87c 	bl	8000618 <__aeabi_dmul>
 800b520:	9b01      	ldr	r3, [sp, #4]
 800b522:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800b526:	4682      	mov	sl, r0
 800b528:	468b      	mov	fp, r1
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	4632      	mov	r2, r6
 800b52e:	463b      	mov	r3, r7
 800b530:	4650      	mov	r0, sl
 800b532:	4659      	mov	r1, fp
 800b534:	f7f4 feb8 	bl	80002a8 <__aeabi_dsub>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4680      	mov	r8, r0
 800b53e:	4689      	mov	r9, r1
 800b540:	4630      	mov	r0, r6
 800b542:	4639      	mov	r1, r7
 800b544:	f7f5 fada 	bl	8000afc <__aeabi_dcmplt>
 800b548:	2200      	movs	r2, #0
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d053      	beq.n	800b5f6 <__ieee754_hypot+0x192>
 800b54e:	462b      	mov	r3, r5
 800b550:	4610      	mov	r0, r2
 800b552:	4629      	mov	r1, r5
 800b554:	4614      	mov	r4, r2
 800b556:	f7f5 f85f 	bl	8000618 <__aeabi_dmul>
 800b55a:	4632      	mov	r2, r6
 800b55c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b560:	463b      	mov	r3, r7
 800b562:	4630      	mov	r0, r6
 800b564:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800b568:	f7f5 f856 	bl	8000618 <__aeabi_dmul>
 800b56c:	4622      	mov	r2, r4
 800b56e:	4606      	mov	r6, r0
 800b570:	460f      	mov	r7, r1
 800b572:	462b      	mov	r3, r5
 800b574:	4650      	mov	r0, sl
 800b576:	4659      	mov	r1, fp
 800b578:	f7f4 fe98 	bl	80002ac <__adddf3>
 800b57c:	4622      	mov	r2, r4
 800b57e:	4680      	mov	r8, r0
 800b580:	4689      	mov	r9, r1
 800b582:	462b      	mov	r3, r5
 800b584:	4650      	mov	r0, sl
 800b586:	4659      	mov	r1, fp
 800b588:	f7f4 fe8e 	bl	80002a8 <__aeabi_dsub>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	4640      	mov	r0, r8
 800b592:	4649      	mov	r1, r9
 800b594:	f7f5 f840 	bl	8000618 <__aeabi_dmul>
 800b598:	4602      	mov	r2, r0
 800b59a:	460b      	mov	r3, r1
 800b59c:	4630      	mov	r0, r6
 800b59e:	4639      	mov	r1, r7
 800b5a0:	f7f4 fe82 	bl	80002a8 <__aeabi_dsub>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ac:	f7f4 fe7c 	bl	80002a8 <__aeabi_dsub>
 800b5b0:	ec41 0b10 	vmov	d0, r0, r1
 800b5b4:	f000 fc64 	bl	800be80 <__ieee754_sqrt>
 800b5b8:	9b01      	ldr	r3, [sp, #4]
 800b5ba:	ec5b ab10 	vmov	sl, fp, d0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d089      	beq.n	800b4d6 <__ieee754_hypot+0x72>
 800b5c2:	051b      	lsls	r3, r3, #20
 800b5c4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	4650      	mov	r0, sl
 800b5d4:	4659      	mov	r1, fp
 800b5d6:	f7f5 f81f 	bl	8000618 <__aeabi_dmul>
 800b5da:	e762      	b.n	800b4a2 <__ieee754_hypot+0x3e>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e787      	b.n	800b4f0 <__ieee754_hypot+0x8c>
 800b5e0:	9b01      	ldr	r3, [sp, #4]
 800b5e2:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800b5e6:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800b5ea:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	46ab      	mov	fp, r5
 800b5f2:	4627      	mov	r7, r4
 800b5f4:	e79a      	b.n	800b52c <__ieee754_hypot+0xc8>
 800b5f6:	4623      	mov	r3, r4
 800b5f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b600:	2200      	movs	r2, #0
 800b602:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800b606:	4614      	mov	r4, r2
 800b608:	461d      	mov	r5, r3
 800b60a:	f7f5 f805 	bl	8000618 <__aeabi_dmul>
 800b60e:	4642      	mov	r2, r8
 800b610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b614:	464b      	mov	r3, r9
 800b616:	4640      	mov	r0, r8
 800b618:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800b61c:	f7f4 fffc 	bl	8000618 <__aeabi_dmul>
 800b620:	4652      	mov	r2, sl
 800b622:	465b      	mov	r3, fp
 800b624:	4680      	mov	r8, r0
 800b626:	4689      	mov	r9, r1
 800b628:	4650      	mov	r0, sl
 800b62a:	4659      	mov	r1, fp
 800b62c:	f7f4 fe3e 	bl	80002ac <__adddf3>
 800b630:	4622      	mov	r2, r4
 800b632:	462b      	mov	r3, r5
 800b634:	f7f4 fe38 	bl	80002a8 <__aeabi_dsub>
 800b638:	4632      	mov	r2, r6
 800b63a:	463b      	mov	r3, r7
 800b63c:	f7f4 ffec 	bl	8000618 <__aeabi_dmul>
 800b640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b644:	4682      	mov	sl, r0
 800b646:	468b      	mov	fp, r1
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f4 fe2c 	bl	80002a8 <__aeabi_dsub>
 800b650:	4622      	mov	r2, r4
 800b652:	462b      	mov	r3, r5
 800b654:	f7f4 ffe0 	bl	8000618 <__aeabi_dmul>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4650      	mov	r0, sl
 800b65e:	4659      	mov	r1, fp
 800b660:	f7f4 fe24 	bl	80002ac <__adddf3>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4640      	mov	r0, r8
 800b66a:	4649      	mov	r1, r9
 800b66c:	f7f4 fe1c 	bl	80002a8 <__aeabi_dsub>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b678:	e798      	b.n	800b5ac <__ieee754_hypot+0x148>
 800b67a:	46b2      	mov	sl, r6
 800b67c:	46bb      	mov	fp, r7
 800b67e:	e72a      	b.n	800b4d6 <__ieee754_hypot+0x72>
 800b680:	5f300000 	.word	0x5f300000
 800b684:	7fefffff 	.word	0x7fefffff
 800b688:	20afffff 	.word	0x20afffff
 800b68c:	7fd00000 	.word	0x7fd00000

0800b690 <__ieee754_log>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	ec51 0b10 	vmov	r0, r1, d0
 800b698:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800b69c:	b087      	sub	sp, #28
 800b69e:	460d      	mov	r5, r1
 800b6a0:	da26      	bge.n	800b6f0 <__ieee754_log+0x60>
 800b6a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b6a6:	4303      	orrs	r3, r0
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	d10a      	bne.n	800b6c2 <__ieee754_log+0x32>
 800b6ac:	49ce      	ldr	r1, [pc, #824]	@ (800b9e8 <__ieee754_log+0x358>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2000      	movs	r0, #0
 800b6b4:	f7f5 f8da 	bl	800086c <__aeabi_ddiv>
 800b6b8:	ec41 0b10 	vmov	d0, r0, r1
 800b6bc:	b007      	add	sp, #28
 800b6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c2:	2900      	cmp	r1, #0
 800b6c4:	da05      	bge.n	800b6d2 <__ieee754_log+0x42>
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	f7f4 fdee 	bl	80002a8 <__aeabi_dsub>
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e7f0      	b.n	800b6b4 <__ieee754_log+0x24>
 800b6d2:	4bc6      	ldr	r3, [pc, #792]	@ (800b9ec <__ieee754_log+0x35c>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f7f4 ff9f 	bl	8000618 <__aeabi_dmul>
 800b6da:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800b6de:	460d      	mov	r5, r1
 800b6e0:	4ac3      	ldr	r2, [pc, #780]	@ (800b9f0 <__ieee754_log+0x360>)
 800b6e2:	4295      	cmp	r5, r2
 800b6e4:	dd06      	ble.n	800b6f4 <__ieee754_log+0x64>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	f7f4 fddf 	bl	80002ac <__adddf3>
 800b6ee:	e7e3      	b.n	800b6b8 <__ieee754_log+0x28>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	e7f5      	b.n	800b6e0 <__ieee754_log+0x50>
 800b6f4:	152c      	asrs	r4, r5, #20
 800b6f6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800b6fa:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b6fe:	441c      	add	r4, r3
 800b700:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 800b704:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 800b708:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b70c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 800b710:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 800b714:	ea42 0105 	orr.w	r1, r2, r5
 800b718:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b71c:	2200      	movs	r2, #0
 800b71e:	4bb5      	ldr	r3, [pc, #724]	@ (800b9f4 <__ieee754_log+0x364>)
 800b720:	f7f4 fdc2 	bl	80002a8 <__aeabi_dsub>
 800b724:	1cab      	adds	r3, r5, #2
 800b726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	4682      	mov	sl, r0
 800b72e:	468b      	mov	fp, r1
 800b730:	f04f 0200 	mov.w	r2, #0
 800b734:	dc53      	bgt.n	800b7de <__ieee754_log+0x14e>
 800b736:	2300      	movs	r3, #0
 800b738:	f7f5 f9d6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b73c:	b1d0      	cbz	r0, 800b774 <__ieee754_log+0xe4>
 800b73e:	2c00      	cmp	r4, #0
 800b740:	f000 8120 	beq.w	800b984 <__ieee754_log+0x2f4>
 800b744:	4620      	mov	r0, r4
 800b746:	f7f4 fefd 	bl	8000544 <__aeabi_i2d>
 800b74a:	a391      	add	r3, pc, #580	@ (adr r3, 800b990 <__ieee754_log+0x300>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	4606      	mov	r6, r0
 800b752:	460f      	mov	r7, r1
 800b754:	f7f4 ff60 	bl	8000618 <__aeabi_dmul>
 800b758:	a38f      	add	r3, pc, #572	@ (adr r3, 800b998 <__ieee754_log+0x308>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	4604      	mov	r4, r0
 800b760:	460d      	mov	r5, r1
 800b762:	4630      	mov	r0, r6
 800b764:	4639      	mov	r1, r7
 800b766:	f7f4 ff57 	bl	8000618 <__aeabi_dmul>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	4620      	mov	r0, r4
 800b770:	4629      	mov	r1, r5
 800b772:	e7ba      	b.n	800b6ea <__ieee754_log+0x5a>
 800b774:	a38a      	add	r3, pc, #552	@ (adr r3, 800b9a0 <__ieee754_log+0x310>)
 800b776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77a:	4650      	mov	r0, sl
 800b77c:	4659      	mov	r1, fp
 800b77e:	f7f4 ff4b 	bl	8000618 <__aeabi_dmul>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	2000      	movs	r0, #0
 800b788:	499b      	ldr	r1, [pc, #620]	@ (800b9f8 <__ieee754_log+0x368>)
 800b78a:	f7f4 fd8d 	bl	80002a8 <__aeabi_dsub>
 800b78e:	4652      	mov	r2, sl
 800b790:	4606      	mov	r6, r0
 800b792:	460f      	mov	r7, r1
 800b794:	465b      	mov	r3, fp
 800b796:	4650      	mov	r0, sl
 800b798:	4659      	mov	r1, fp
 800b79a:	f7f4 ff3d 	bl	8000618 <__aeabi_dmul>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	f7f4 ff37 	bl	8000618 <__aeabi_dmul>
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	b914      	cbnz	r4, 800b7b6 <__ieee754_log+0x126>
 800b7b0:	4632      	mov	r2, r6
 800b7b2:	463b      	mov	r3, r7
 800b7b4:	e0a0      	b.n	800b8f8 <__ieee754_log+0x268>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7f4 fec4 	bl	8000544 <__aeabi_i2d>
 800b7bc:	a374      	add	r3, pc, #464	@ (adr r3, 800b990 <__ieee754_log+0x300>)
 800b7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	4689      	mov	r9, r1
 800b7c6:	f7f4 ff27 	bl	8000618 <__aeabi_dmul>
 800b7ca:	a373      	add	r3, pc, #460	@ (adr r3, 800b998 <__ieee754_log+0x308>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	460d      	mov	r5, r1
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	f7f4 ff1e 	bl	8000618 <__aeabi_dmul>
 800b7dc:	e0a5      	b.n	800b92a <__ieee754_log+0x29a>
 800b7de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b7e2:	f7f4 fd63 	bl	80002ac <__adddf3>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4650      	mov	r0, sl
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	f7f5 f83d 	bl	800086c <__aeabi_ddiv>
 800b7f2:	e9cd 0100 	strd	r0, r1, [sp]
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f7f4 fea4 	bl	8000544 <__aeabi_i2d>
 800b7fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b804:	4610      	mov	r0, r2
 800b806:	4619      	mov	r1, r3
 800b808:	f7f4 ff06 	bl	8000618 <__aeabi_dmul>
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b814:	f7f4 ff00 	bl	8000618 <__aeabi_dmul>
 800b818:	a363      	add	r3, pc, #396	@ (adr r3, 800b9a8 <__ieee754_log+0x318>)
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	4680      	mov	r8, r0
 800b820:	4689      	mov	r9, r1
 800b822:	f7f4 fef9 	bl	8000618 <__aeabi_dmul>
 800b826:	a362      	add	r3, pc, #392	@ (adr r3, 800b9b0 <__ieee754_log+0x320>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7f4 fd3e 	bl	80002ac <__adddf3>
 800b830:	4642      	mov	r2, r8
 800b832:	464b      	mov	r3, r9
 800b834:	f7f4 fef0 	bl	8000618 <__aeabi_dmul>
 800b838:	a35f      	add	r3, pc, #380	@ (adr r3, 800b9b8 <__ieee754_log+0x328>)
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f7f4 fd35 	bl	80002ac <__adddf3>
 800b842:	4642      	mov	r2, r8
 800b844:	464b      	mov	r3, r9
 800b846:	f7f4 fee7 	bl	8000618 <__aeabi_dmul>
 800b84a:	a35d      	add	r3, pc, #372	@ (adr r3, 800b9c0 <__ieee754_log+0x330>)
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	f7f4 fd2c 	bl	80002ac <__adddf3>
 800b854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b858:	f7f4 fede 	bl	8000618 <__aeabi_dmul>
 800b85c:	a35a      	add	r3, pc, #360	@ (adr r3, 800b9c8 <__ieee754_log+0x338>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b866:	4640      	mov	r0, r8
 800b868:	4649      	mov	r1, r9
 800b86a:	f7f4 fed5 	bl	8000618 <__aeabi_dmul>
 800b86e:	a358      	add	r3, pc, #352	@ (adr r3, 800b9d0 <__ieee754_log+0x340>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f7f4 fd1a 	bl	80002ac <__adddf3>
 800b878:	4642      	mov	r2, r8
 800b87a:	464b      	mov	r3, r9
 800b87c:	f7f4 fecc 	bl	8000618 <__aeabi_dmul>
 800b880:	a355      	add	r3, pc, #340	@ (adr r3, 800b9d8 <__ieee754_log+0x348>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f7f4 fd11 	bl	80002ac <__adddf3>
 800b88a:	4642      	mov	r2, r8
 800b88c:	464b      	mov	r3, r9
 800b88e:	f7f4 fec3 	bl	8000618 <__aeabi_dmul>
 800b892:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800b896:	4602      	mov	r2, r0
 800b898:	460b      	mov	r3, r1
 800b89a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800b89e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8a2:	f7f4 fd03 	bl	80002ac <__adddf3>
 800b8a6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800b8aa:	3551      	adds	r5, #81	@ 0x51
 800b8ac:	4335      	orrs	r5, r6
 800b8ae:	2d00      	cmp	r5, #0
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4689      	mov	r9, r1
 800b8b4:	dd48      	ble.n	800b948 <__ieee754_log+0x2b8>
 800b8b6:	4b50      	ldr	r3, [pc, #320]	@ (800b9f8 <__ieee754_log+0x368>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	4650      	mov	r0, sl
 800b8bc:	4659      	mov	r1, fp
 800b8be:	f7f4 feab 	bl	8000618 <__aeabi_dmul>
 800b8c2:	4652      	mov	r2, sl
 800b8c4:	465b      	mov	r3, fp
 800b8c6:	f7f4 fea7 	bl	8000618 <__aeabi_dmul>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	460f      	mov	r7, r1
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	f7f4 fce9 	bl	80002ac <__adddf3>
 800b8da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8de:	f7f4 fe9b 	bl	8000618 <__aeabi_dmul>
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	4689      	mov	r9, r1
 800b8e6:	b964      	cbnz	r4, 800b902 <__ieee754_log+0x272>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	4639      	mov	r1, r7
 800b8f0:	f7f4 fcda 	bl	80002a8 <__aeabi_dsub>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	4650      	mov	r0, sl
 800b8fa:	4659      	mov	r1, fp
 800b8fc:	f7f4 fcd4 	bl	80002a8 <__aeabi_dsub>
 800b900:	e6da      	b.n	800b6b8 <__ieee754_log+0x28>
 800b902:	a323      	add	r3, pc, #140	@ (adr r3, 800b990 <__ieee754_log+0x300>)
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b90c:	f7f4 fe84 	bl	8000618 <__aeabi_dmul>
 800b910:	a321      	add	r3, pc, #132	@ (adr r3, 800b998 <__ieee754_log+0x308>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	4604      	mov	r4, r0
 800b918:	460d      	mov	r5, r1
 800b91a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b91e:	f7f4 fe7b 	bl	8000618 <__aeabi_dmul>
 800b922:	4642      	mov	r2, r8
 800b924:	464b      	mov	r3, r9
 800b926:	f7f4 fcc1 	bl	80002ac <__adddf3>
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	4630      	mov	r0, r6
 800b930:	4639      	mov	r1, r7
 800b932:	f7f4 fcb9 	bl	80002a8 <__aeabi_dsub>
 800b936:	4652      	mov	r2, sl
 800b938:	465b      	mov	r3, fp
 800b93a:	f7f4 fcb5 	bl	80002a8 <__aeabi_dsub>
 800b93e:	4602      	mov	r2, r0
 800b940:	460b      	mov	r3, r1
 800b942:	4620      	mov	r0, r4
 800b944:	4629      	mov	r1, r5
 800b946:	e7d9      	b.n	800b8fc <__ieee754_log+0x26c>
 800b948:	4602      	mov	r2, r0
 800b94a:	460b      	mov	r3, r1
 800b94c:	4650      	mov	r0, sl
 800b94e:	4659      	mov	r1, fp
 800b950:	f7f4 fcaa 	bl	80002a8 <__aeabi_dsub>
 800b954:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b958:	f7f4 fe5e 	bl	8000618 <__aeabi_dmul>
 800b95c:	4606      	mov	r6, r0
 800b95e:	460f      	mov	r7, r1
 800b960:	2c00      	cmp	r4, #0
 800b962:	f43f af25 	beq.w	800b7b0 <__ieee754_log+0x120>
 800b966:	a30a      	add	r3, pc, #40	@ (adr r3, 800b990 <__ieee754_log+0x300>)
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b970:	f7f4 fe52 	bl	8000618 <__aeabi_dmul>
 800b974:	a308      	add	r3, pc, #32	@ (adr r3, 800b998 <__ieee754_log+0x308>)
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	4604      	mov	r4, r0
 800b97c:	460d      	mov	r5, r1
 800b97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b982:	e729      	b.n	800b7d8 <__ieee754_log+0x148>
 800b984:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b9e0 <__ieee754_log+0x350>
 800b988:	e698      	b.n	800b6bc <__ieee754_log+0x2c>
 800b98a:	bf00      	nop
 800b98c:	f3af 8000 	nop.w
 800b990:	fee00000 	.word	0xfee00000
 800b994:	3fe62e42 	.word	0x3fe62e42
 800b998:	35793c76 	.word	0x35793c76
 800b99c:	3dea39ef 	.word	0x3dea39ef
 800b9a0:	55555555 	.word	0x55555555
 800b9a4:	3fd55555 	.word	0x3fd55555
 800b9a8:	df3e5244 	.word	0xdf3e5244
 800b9ac:	3fc2f112 	.word	0x3fc2f112
 800b9b0:	96cb03de 	.word	0x96cb03de
 800b9b4:	3fc74664 	.word	0x3fc74664
 800b9b8:	94229359 	.word	0x94229359
 800b9bc:	3fd24924 	.word	0x3fd24924
 800b9c0:	55555593 	.word	0x55555593
 800b9c4:	3fe55555 	.word	0x3fe55555
 800b9c8:	d078c69f 	.word	0xd078c69f
 800b9cc:	3fc39a09 	.word	0x3fc39a09
 800b9d0:	1d8e78af 	.word	0x1d8e78af
 800b9d4:	3fcc71c5 	.word	0x3fcc71c5
 800b9d8:	9997fa04 	.word	0x9997fa04
 800b9dc:	3fd99999 	.word	0x3fd99999
	...
 800b9e8:	c3500000 	.word	0xc3500000
 800b9ec:	43500000 	.word	0x43500000
 800b9f0:	7fefffff 	.word	0x7fefffff
 800b9f4:	3ff00000 	.word	0x3ff00000
 800b9f8:	3fe00000 	.word	0x3fe00000
 800b9fc:	00000000 	.word	0x00000000

0800ba00 <__ieee754_rem_pio2>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	ec57 6b10 	vmov	r6, r7, d0
 800ba08:	4bc5      	ldr	r3, [pc, #788]	@ (800bd20 <__ieee754_rem_pio2+0x320>)
 800ba0a:	b08d      	sub	sp, #52	@ 0x34
 800ba0c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ba10:	4598      	cmp	r8, r3
 800ba12:	4604      	mov	r4, r0
 800ba14:	9704      	str	r7, [sp, #16]
 800ba16:	d807      	bhi.n	800ba28 <__ieee754_rem_pio2+0x28>
 800ba18:	2200      	movs	r2, #0
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	ed80 0b00 	vstr	d0, [r0]
 800ba20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ba24:	2500      	movs	r5, #0
 800ba26:	e028      	b.n	800ba7a <__ieee754_rem_pio2+0x7a>
 800ba28:	4bbe      	ldr	r3, [pc, #760]	@ (800bd24 <__ieee754_rem_pio2+0x324>)
 800ba2a:	4598      	cmp	r8, r3
 800ba2c:	d878      	bhi.n	800bb20 <__ieee754_rem_pio2+0x120>
 800ba2e:	9b04      	ldr	r3, [sp, #16]
 800ba30:	4dbd      	ldr	r5, [pc, #756]	@ (800bd28 <__ieee754_rem_pio2+0x328>)
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	4630      	mov	r0, r6
 800ba36:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bce8 <__ieee754_rem_pio2+0x2e8>)
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	dd38      	ble.n	800bab2 <__ieee754_rem_pio2+0xb2>
 800ba40:	f7f4 fc32 	bl	80002a8 <__aeabi_dsub>
 800ba44:	45a8      	cmp	r8, r5
 800ba46:	4606      	mov	r6, r0
 800ba48:	460f      	mov	r7, r1
 800ba4a:	d01a      	beq.n	800ba82 <__ieee754_rem_pio2+0x82>
 800ba4c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bcf0 <__ieee754_rem_pio2+0x2f0>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fc29 	bl	80002a8 <__aeabi_dsub>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4680      	mov	r8, r0
 800ba5c:	4689      	mov	r9, r1
 800ba5e:	4630      	mov	r0, r6
 800ba60:	4639      	mov	r1, r7
 800ba62:	f7f4 fc21 	bl	80002a8 <__aeabi_dsub>
 800ba66:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bcf0 <__ieee754_rem_pio2+0x2f0>)
 800ba68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6c:	f7f4 fc1c 	bl	80002a8 <__aeabi_dsub>
 800ba70:	e9c4 8900 	strd	r8, r9, [r4]
 800ba74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba78:	2501      	movs	r5, #1
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	b00d      	add	sp, #52	@ 0x34
 800ba7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba82:	a39d      	add	r3, pc, #628	@ (adr r3, 800bcf8 <__ieee754_rem_pio2+0x2f8>)
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	f7f4 fc0e 	bl	80002a8 <__aeabi_dsub>
 800ba8c:	a39c      	add	r3, pc, #624	@ (adr r3, 800bd00 <__ieee754_rem_pio2+0x300>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	4606      	mov	r6, r0
 800ba94:	460f      	mov	r7, r1
 800ba96:	f7f4 fc07 	bl	80002a8 <__aeabi_dsub>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4680      	mov	r8, r0
 800baa0:	4689      	mov	r9, r1
 800baa2:	4630      	mov	r0, r6
 800baa4:	4639      	mov	r1, r7
 800baa6:	f7f4 fbff 	bl	80002a8 <__aeabi_dsub>
 800baaa:	a395      	add	r3, pc, #596	@ (adr r3, 800bd00 <__ieee754_rem_pio2+0x300>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	e7dc      	b.n	800ba6c <__ieee754_rem_pio2+0x6c>
 800bab2:	f7f4 fbfb 	bl	80002ac <__adddf3>
 800bab6:	45a8      	cmp	r8, r5
 800bab8:	4606      	mov	r6, r0
 800baba:	460f      	mov	r7, r1
 800babc:	d018      	beq.n	800baf0 <__ieee754_rem_pio2+0xf0>
 800babe:	a38c      	add	r3, pc, #560	@ (adr r3, 800bcf0 <__ieee754_rem_pio2+0x2f0>)
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	f7f4 fbf2 	bl	80002ac <__adddf3>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	4680      	mov	r8, r0
 800bace:	4689      	mov	r9, r1
 800bad0:	4630      	mov	r0, r6
 800bad2:	4639      	mov	r1, r7
 800bad4:	f7f4 fbe8 	bl	80002a8 <__aeabi_dsub>
 800bad8:	a385      	add	r3, pc, #532	@ (adr r3, 800bcf0 <__ieee754_rem_pio2+0x2f0>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f7f4 fbe5 	bl	80002ac <__adddf3>
 800bae2:	f04f 35ff 	mov.w	r5, #4294967295
 800bae6:	e9c4 8900 	strd	r8, r9, [r4]
 800baea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800baee:	e7c4      	b.n	800ba7a <__ieee754_rem_pio2+0x7a>
 800baf0:	a381      	add	r3, pc, #516	@ (adr r3, 800bcf8 <__ieee754_rem_pio2+0x2f8>)
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f7f4 fbd9 	bl	80002ac <__adddf3>
 800bafa:	a381      	add	r3, pc, #516	@ (adr r3, 800bd00 <__ieee754_rem_pio2+0x300>)
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	4606      	mov	r6, r0
 800bb02:	460f      	mov	r7, r1
 800bb04:	f7f4 fbd2 	bl	80002ac <__adddf3>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	4680      	mov	r8, r0
 800bb0e:	4689      	mov	r9, r1
 800bb10:	4630      	mov	r0, r6
 800bb12:	4639      	mov	r1, r7
 800bb14:	f7f4 fbc8 	bl	80002a8 <__aeabi_dsub>
 800bb18:	a379      	add	r3, pc, #484	@ (adr r3, 800bd00 <__ieee754_rem_pio2+0x300>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	e7de      	b.n	800bade <__ieee754_rem_pio2+0xde>
 800bb20:	4b82      	ldr	r3, [pc, #520]	@ (800bd2c <__ieee754_rem_pio2+0x32c>)
 800bb22:	4598      	cmp	r8, r3
 800bb24:	f200 80d1 	bhi.w	800bcca <__ieee754_rem_pio2+0x2ca>
 800bb28:	f000 f966 	bl	800bdf8 <fabs>
 800bb2c:	ec57 6b10 	vmov	r6, r7, d0
 800bb30:	a375      	add	r3, pc, #468	@ (adr r3, 800bd08 <__ieee754_rem_pio2+0x308>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	f7f4 fd6d 	bl	8000618 <__aeabi_dmul>
 800bb3e:	4b7c      	ldr	r3, [pc, #496]	@ (800bd30 <__ieee754_rem_pio2+0x330>)
 800bb40:	2200      	movs	r2, #0
 800bb42:	f7f4 fbb3 	bl	80002ac <__adddf3>
 800bb46:	f7f5 f817 	bl	8000b78 <__aeabi_d2iz>
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	f7f4 fcfa 	bl	8000544 <__aeabi_i2d>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb58:	a363      	add	r3, pc, #396	@ (adr r3, 800bce8 <__ieee754_rem_pio2+0x2e8>)
 800bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5e:	f7f4 fd5b 	bl	8000618 <__aeabi_dmul>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 fb9d 	bl	80002a8 <__aeabi_dsub>
 800bb6e:	a360      	add	r3, pc, #384	@ (adr r3, 800bcf0 <__ieee754_rem_pio2+0x2f0>)
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	4682      	mov	sl, r0
 800bb76:	468b      	mov	fp, r1
 800bb78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb7c:	f7f4 fd4c 	bl	8000618 <__aeabi_dmul>
 800bb80:	2d1f      	cmp	r5, #31
 800bb82:	4606      	mov	r6, r0
 800bb84:	460f      	mov	r7, r1
 800bb86:	dc0c      	bgt.n	800bba2 <__ieee754_rem_pio2+0x1a2>
 800bb88:	4b6a      	ldr	r3, [pc, #424]	@ (800bd34 <__ieee754_rem_pio2+0x334>)
 800bb8a:	1e6a      	subs	r2, r5, #1
 800bb8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb90:	4543      	cmp	r3, r8
 800bb92:	d006      	beq.n	800bba2 <__ieee754_rem_pio2+0x1a2>
 800bb94:	4632      	mov	r2, r6
 800bb96:	463b      	mov	r3, r7
 800bb98:	4650      	mov	r0, sl
 800bb9a:	4659      	mov	r1, fp
 800bb9c:	f7f4 fb84 	bl	80002a8 <__aeabi_dsub>
 800bba0:	e00e      	b.n	800bbc0 <__ieee754_rem_pio2+0x1c0>
 800bba2:	463b      	mov	r3, r7
 800bba4:	4632      	mov	r2, r6
 800bba6:	4650      	mov	r0, sl
 800bba8:	4659      	mov	r1, fp
 800bbaa:	f7f4 fb7d 	bl	80002a8 <__aeabi_dsub>
 800bbae:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bbb2:	9305      	str	r3, [sp, #20]
 800bbb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbb8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bbbc:	2b10      	cmp	r3, #16
 800bbbe:	dc02      	bgt.n	800bbc6 <__ieee754_rem_pio2+0x1c6>
 800bbc0:	e9c4 0100 	strd	r0, r1, [r4]
 800bbc4:	e039      	b.n	800bc3a <__ieee754_rem_pio2+0x23a>
 800bbc6:	a34c      	add	r3, pc, #304	@ (adr r3, 800bcf8 <__ieee754_rem_pio2+0x2f8>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd0:	f7f4 fd22 	bl	8000618 <__aeabi_dmul>
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	460f      	mov	r7, r1
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4650      	mov	r0, sl
 800bbde:	4659      	mov	r1, fp
 800bbe0:	f7f4 fb62 	bl	80002a8 <__aeabi_dsub>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4689      	mov	r9, r1
 800bbec:	4650      	mov	r0, sl
 800bbee:	4659      	mov	r1, fp
 800bbf0:	f7f4 fb5a 	bl	80002a8 <__aeabi_dsub>
 800bbf4:	4632      	mov	r2, r6
 800bbf6:	463b      	mov	r3, r7
 800bbf8:	f7f4 fb56 	bl	80002a8 <__aeabi_dsub>
 800bbfc:	a340      	add	r3, pc, #256	@ (adr r3, 800bd00 <__ieee754_rem_pio2+0x300>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	4606      	mov	r6, r0
 800bc04:	460f      	mov	r7, r1
 800bc06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc0a:	f7f4 fd05 	bl	8000618 <__aeabi_dmul>
 800bc0e:	4632      	mov	r2, r6
 800bc10:	463b      	mov	r3, r7
 800bc12:	f7f4 fb49 	bl	80002a8 <__aeabi_dsub>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	4640      	mov	r0, r8
 800bc20:	4649      	mov	r1, r9
 800bc22:	f7f4 fb41 	bl	80002a8 <__aeabi_dsub>
 800bc26:	9a05      	ldr	r2, [sp, #20]
 800bc28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	2b31      	cmp	r3, #49	@ 0x31
 800bc30:	dc20      	bgt.n	800bc74 <__ieee754_rem_pio2+0x274>
 800bc32:	e9c4 0100 	strd	r0, r1, [r4]
 800bc36:	46c2      	mov	sl, r8
 800bc38:	46cb      	mov	fp, r9
 800bc3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bc3e:	4650      	mov	r0, sl
 800bc40:	4642      	mov	r2, r8
 800bc42:	464b      	mov	r3, r9
 800bc44:	4659      	mov	r1, fp
 800bc46:	f7f4 fb2f 	bl	80002a8 <__aeabi_dsub>
 800bc4a:	463b      	mov	r3, r7
 800bc4c:	4632      	mov	r2, r6
 800bc4e:	f7f4 fb2b 	bl	80002a8 <__aeabi_dsub>
 800bc52:	9b04      	ldr	r3, [sp, #16]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc5a:	f6bf af0e 	bge.w	800ba7a <__ieee754_rem_pio2+0x7a>
 800bc5e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800bc62:	6063      	str	r3, [r4, #4]
 800bc64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc68:	f8c4 8000 	str.w	r8, [r4]
 800bc6c:	60a0      	str	r0, [r4, #8]
 800bc6e:	60e3      	str	r3, [r4, #12]
 800bc70:	426d      	negs	r5, r5
 800bc72:	e702      	b.n	800ba7a <__ieee754_rem_pio2+0x7a>
 800bc74:	a326      	add	r3, pc, #152	@ (adr r3, 800bd10 <__ieee754_rem_pio2+0x310>)
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7e:	f7f4 fccb 	bl	8000618 <__aeabi_dmul>
 800bc82:	4606      	mov	r6, r0
 800bc84:	460f      	mov	r7, r1
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 fb0b 	bl	80002a8 <__aeabi_dsub>
 800bc92:	4602      	mov	r2, r0
 800bc94:	460b      	mov	r3, r1
 800bc96:	4682      	mov	sl, r0
 800bc98:	468b      	mov	fp, r1
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	f7f4 fb03 	bl	80002a8 <__aeabi_dsub>
 800bca2:	4632      	mov	r2, r6
 800bca4:	463b      	mov	r3, r7
 800bca6:	f7f4 faff 	bl	80002a8 <__aeabi_dsub>
 800bcaa:	a31b      	add	r3, pc, #108	@ (adr r3, 800bd18 <__ieee754_rem_pio2+0x318>)
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	4606      	mov	r6, r0
 800bcb2:	460f      	mov	r7, r1
 800bcb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb8:	f7f4 fcae 	bl	8000618 <__aeabi_dmul>
 800bcbc:	4632      	mov	r2, r6
 800bcbe:	463b      	mov	r3, r7
 800bcc0:	f7f4 faf2 	bl	80002a8 <__aeabi_dsub>
 800bcc4:	4606      	mov	r6, r0
 800bcc6:	460f      	mov	r7, r1
 800bcc8:	e764      	b.n	800bb94 <__ieee754_rem_pio2+0x194>
 800bcca:	4b1b      	ldr	r3, [pc, #108]	@ (800bd38 <__ieee754_rem_pio2+0x338>)
 800bccc:	4598      	cmp	r8, r3
 800bcce:	d935      	bls.n	800bd3c <__ieee754_rem_pio2+0x33c>
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	f7f4 fae6 	bl	80002a8 <__aeabi_dsub>
 800bcdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bce0:	e9c4 0100 	strd	r0, r1, [r4]
 800bce4:	e69e      	b.n	800ba24 <__ieee754_rem_pio2+0x24>
 800bce6:	bf00      	nop
 800bce8:	54400000 	.word	0x54400000
 800bcec:	3ff921fb 	.word	0x3ff921fb
 800bcf0:	1a626331 	.word	0x1a626331
 800bcf4:	3dd0b461 	.word	0x3dd0b461
 800bcf8:	1a600000 	.word	0x1a600000
 800bcfc:	3dd0b461 	.word	0x3dd0b461
 800bd00:	2e037073 	.word	0x2e037073
 800bd04:	3ba3198a 	.word	0x3ba3198a
 800bd08:	6dc9c883 	.word	0x6dc9c883
 800bd0c:	3fe45f30 	.word	0x3fe45f30
 800bd10:	2e000000 	.word	0x2e000000
 800bd14:	3ba3198a 	.word	0x3ba3198a
 800bd18:	252049c1 	.word	0x252049c1
 800bd1c:	397b839a 	.word	0x397b839a
 800bd20:	3fe921fb 	.word	0x3fe921fb
 800bd24:	4002d97b 	.word	0x4002d97b
 800bd28:	3ff921fb 	.word	0x3ff921fb
 800bd2c:	413921fb 	.word	0x413921fb
 800bd30:	3fe00000 	.word	0x3fe00000
 800bd34:	0800cd78 	.word	0x0800cd78
 800bd38:	7fefffff 	.word	0x7fefffff
 800bd3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bd40:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bd44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bd48:	4630      	mov	r0, r6
 800bd4a:	460f      	mov	r7, r1
 800bd4c:	f7f4 ff14 	bl	8000b78 <__aeabi_d2iz>
 800bd50:	f7f4 fbf8 	bl	8000544 <__aeabi_i2d>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	4630      	mov	r0, r6
 800bd5a:	4639      	mov	r1, r7
 800bd5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd60:	f7f4 faa2 	bl	80002a8 <__aeabi_dsub>
 800bd64:	4b22      	ldr	r3, [pc, #136]	@ (800bdf0 <__ieee754_rem_pio2+0x3f0>)
 800bd66:	2200      	movs	r2, #0
 800bd68:	f7f4 fc56 	bl	8000618 <__aeabi_dmul>
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	4606      	mov	r6, r0
 800bd70:	f7f4 ff02 	bl	8000b78 <__aeabi_d2iz>
 800bd74:	f7f4 fbe6 	bl	8000544 <__aeabi_i2d>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	4639      	mov	r1, r7
 800bd80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bd84:	f7f4 fa90 	bl	80002a8 <__aeabi_dsub>
 800bd88:	4b19      	ldr	r3, [pc, #100]	@ (800bdf0 <__ieee754_rem_pio2+0x3f0>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f7f4 fc44 	bl	8000618 <__aeabi_dmul>
 800bd90:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bd94:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bd98:	f04f 0803 	mov.w	r8, #3
 800bd9c:	2600      	movs	r6, #0
 800bd9e:	2700      	movs	r7, #0
 800bda0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bda4:	4632      	mov	r2, r6
 800bda6:	463b      	mov	r3, r7
 800bda8:	46c2      	mov	sl, r8
 800bdaa:	f108 38ff 	add.w	r8, r8, #4294967295
 800bdae:	f7f4 fe9b 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d1f4      	bne.n	800bda0 <__ieee754_rem_pio2+0x3a0>
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	@ (800bdf4 <__ieee754_rem_pio2+0x3f4>)
 800bdb8:	9301      	str	r3, [sp, #4]
 800bdba:	2302      	movs	r3, #2
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	462a      	mov	r2, r5
 800bdc0:	4653      	mov	r3, sl
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	a806      	add	r0, sp, #24
 800bdc6:	f000 f937 	bl	800c038 <__kernel_rem_pio2>
 800bdca:	9b04      	ldr	r3, [sp, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	4605      	mov	r5, r0
 800bdd0:	f6bf ae53 	bge.w	800ba7a <__ieee754_rem_pio2+0x7a>
 800bdd4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bdd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bddc:	e9c4 2300 	strd	r2, r3, [r4]
 800bde0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bde4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bde8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bdec:	e740      	b.n	800bc70 <__ieee754_rem_pio2+0x270>
 800bdee:	bf00      	nop
 800bdf0:	41700000 	.word	0x41700000
 800bdf4:	0800cdf8 	.word	0x0800cdf8

0800bdf8 <fabs>:
 800bdf8:	ec51 0b10 	vmov	r0, r1, d0
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800be02:	ec43 2b10 	vmov	d0, r2, r3
 800be06:	4770      	bx	lr

0800be08 <with_errno>:
 800be08:	b510      	push	{r4, lr}
 800be0a:	ed2d 8b02 	vpush	{d8}
 800be0e:	eeb0 8a40 	vmov.f32	s16, s0
 800be12:	eef0 8a60 	vmov.f32	s17, s1
 800be16:	4604      	mov	r4, r0
 800be18:	f7fb fa18 	bl	800724c <__errno>
 800be1c:	eeb0 0a48 	vmov.f32	s0, s16
 800be20:	eef0 0a68 	vmov.f32	s1, s17
 800be24:	ecbd 8b02 	vpop	{d8}
 800be28:	6004      	str	r4, [r0, #0]
 800be2a:	bd10      	pop	{r4, pc}

0800be2c <xflow>:
 800be2c:	4603      	mov	r3, r0
 800be2e:	b507      	push	{r0, r1, r2, lr}
 800be30:	ec51 0b10 	vmov	r0, r1, d0
 800be34:	b183      	cbz	r3, 800be58 <xflow+0x2c>
 800be36:	4602      	mov	r2, r0
 800be38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be3c:	e9cd 2300 	strd	r2, r3, [sp]
 800be40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be44:	f7f4 fbe8 	bl	8000618 <__aeabi_dmul>
 800be48:	ec41 0b10 	vmov	d0, r0, r1
 800be4c:	2022      	movs	r0, #34	@ 0x22
 800be4e:	b003      	add	sp, #12
 800be50:	f85d eb04 	ldr.w	lr, [sp], #4
 800be54:	f7ff bfd8 	b.w	800be08 <with_errno>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	e7ee      	b.n	800be3c <xflow+0x10>
	...

0800be60 <__math_uflow>:
 800be60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be68 <__math_uflow+0x8>
 800be64:	f7ff bfe2 	b.w	800be2c <xflow>
 800be68:	00000000 	.word	0x00000000
 800be6c:	10000000 	.word	0x10000000

0800be70 <__math_oflow>:
 800be70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be78 <__math_oflow+0x8>
 800be74:	f7ff bfda 	b.w	800be2c <xflow>
 800be78:	00000000 	.word	0x00000000
 800be7c:	70000000 	.word	0x70000000

0800be80 <__ieee754_sqrt>:
 800be80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	4a68      	ldr	r2, [pc, #416]	@ (800c028 <__ieee754_sqrt+0x1a8>)
 800be86:	ec55 4b10 	vmov	r4, r5, d0
 800be8a:	43aa      	bics	r2, r5
 800be8c:	462b      	mov	r3, r5
 800be8e:	4621      	mov	r1, r4
 800be90:	d110      	bne.n	800beb4 <__ieee754_sqrt+0x34>
 800be92:	4622      	mov	r2, r4
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	f7f4 fbbe 	bl	8000618 <__aeabi_dmul>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4620      	mov	r0, r4
 800bea2:	4629      	mov	r1, r5
 800bea4:	f7f4 fa02 	bl	80002ac <__adddf3>
 800bea8:	4604      	mov	r4, r0
 800beaa:	460d      	mov	r5, r1
 800beac:	ec45 4b10 	vmov	d0, r4, r5
 800beb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb4:	2d00      	cmp	r5, #0
 800beb6:	dc0e      	bgt.n	800bed6 <__ieee754_sqrt+0x56>
 800beb8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bebc:	4322      	orrs	r2, r4
 800bebe:	d0f5      	beq.n	800beac <__ieee754_sqrt+0x2c>
 800bec0:	b19d      	cbz	r5, 800beea <__ieee754_sqrt+0x6a>
 800bec2:	4622      	mov	r2, r4
 800bec4:	4620      	mov	r0, r4
 800bec6:	4629      	mov	r1, r5
 800bec8:	f7f4 f9ee 	bl	80002a8 <__aeabi_dsub>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	f7f4 fccc 	bl	800086c <__aeabi_ddiv>
 800bed4:	e7e8      	b.n	800bea8 <__ieee754_sqrt+0x28>
 800bed6:	152a      	asrs	r2, r5, #20
 800bed8:	d115      	bne.n	800bf06 <__ieee754_sqrt+0x86>
 800beda:	2000      	movs	r0, #0
 800bedc:	e009      	b.n	800bef2 <__ieee754_sqrt+0x72>
 800bede:	0acb      	lsrs	r3, r1, #11
 800bee0:	3a15      	subs	r2, #21
 800bee2:	0549      	lsls	r1, r1, #21
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0fa      	beq.n	800bede <__ieee754_sqrt+0x5e>
 800bee8:	e7f7      	b.n	800beda <__ieee754_sqrt+0x5a>
 800beea:	462a      	mov	r2, r5
 800beec:	e7fa      	b.n	800bee4 <__ieee754_sqrt+0x64>
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	3001      	adds	r0, #1
 800bef2:	02dc      	lsls	r4, r3, #11
 800bef4:	d5fb      	bpl.n	800beee <__ieee754_sqrt+0x6e>
 800bef6:	1e44      	subs	r4, r0, #1
 800bef8:	1b12      	subs	r2, r2, r4
 800befa:	f1c0 0420 	rsb	r4, r0, #32
 800befe:	fa21 f404 	lsr.w	r4, r1, r4
 800bf02:	4323      	orrs	r3, r4
 800bf04:	4081      	lsls	r1, r0
 800bf06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bf0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bf12:	07d2      	lsls	r2, r2, #31
 800bf14:	bf5c      	itt	pl
 800bf16:	005b      	lslpl	r3, r3, #1
 800bf18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bf1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf20:	bf58      	it	pl
 800bf22:	0049      	lslpl	r1, r1, #1
 800bf24:	2600      	movs	r6, #0
 800bf26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bf2a:	106d      	asrs	r5, r5, #1
 800bf2c:	0049      	lsls	r1, r1, #1
 800bf2e:	2016      	movs	r0, #22
 800bf30:	4632      	mov	r2, r6
 800bf32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bf36:	1917      	adds	r7, r2, r4
 800bf38:	429f      	cmp	r7, r3
 800bf3a:	bfde      	ittt	le
 800bf3c:	193a      	addle	r2, r7, r4
 800bf3e:	1bdb      	suble	r3, r3, r7
 800bf40:	1936      	addle	r6, r6, r4
 800bf42:	0fcf      	lsrs	r7, r1, #31
 800bf44:	3801      	subs	r0, #1
 800bf46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bf4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bf52:	d1f0      	bne.n	800bf36 <__ieee754_sqrt+0xb6>
 800bf54:	4604      	mov	r4, r0
 800bf56:	2720      	movs	r7, #32
 800bf58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	eb00 0e0c 	add.w	lr, r0, ip
 800bf62:	db02      	blt.n	800bf6a <__ieee754_sqrt+0xea>
 800bf64:	d113      	bne.n	800bf8e <__ieee754_sqrt+0x10e>
 800bf66:	458e      	cmp	lr, r1
 800bf68:	d811      	bhi.n	800bf8e <__ieee754_sqrt+0x10e>
 800bf6a:	f1be 0f00 	cmp.w	lr, #0
 800bf6e:	eb0e 000c 	add.w	r0, lr, ip
 800bf72:	da42      	bge.n	800bffa <__ieee754_sqrt+0x17a>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	db40      	blt.n	800bffa <__ieee754_sqrt+0x17a>
 800bf78:	f102 0801 	add.w	r8, r2, #1
 800bf7c:	1a9b      	subs	r3, r3, r2
 800bf7e:	458e      	cmp	lr, r1
 800bf80:	bf88      	it	hi
 800bf82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bf86:	eba1 010e 	sub.w	r1, r1, lr
 800bf8a:	4464      	add	r4, ip
 800bf8c:	4642      	mov	r2, r8
 800bf8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bf92:	3f01      	subs	r7, #1
 800bf94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bf98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bf9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bfa0:	d1dc      	bne.n	800bf5c <__ieee754_sqrt+0xdc>
 800bfa2:	4319      	orrs	r1, r3
 800bfa4:	d01b      	beq.n	800bfde <__ieee754_sqrt+0x15e>
 800bfa6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c02c <__ieee754_sqrt+0x1ac>
 800bfaa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c030 <__ieee754_sqrt+0x1b0>
 800bfae:	e9da 0100 	ldrd	r0, r1, [sl]
 800bfb2:	e9db 2300 	ldrd	r2, r3, [fp]
 800bfb6:	f7f4 f977 	bl	80002a8 <__aeabi_dsub>
 800bfba:	e9da 8900 	ldrd	r8, r9, [sl]
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	4649      	mov	r1, r9
 800bfc6:	f7f4 fda3 	bl	8000b10 <__aeabi_dcmple>
 800bfca:	b140      	cbz	r0, 800bfde <__ieee754_sqrt+0x15e>
 800bfcc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bfd0:	e9da 0100 	ldrd	r0, r1, [sl]
 800bfd4:	e9db 2300 	ldrd	r2, r3, [fp]
 800bfd8:	d111      	bne.n	800bffe <__ieee754_sqrt+0x17e>
 800bfda:	3601      	adds	r6, #1
 800bfdc:	463c      	mov	r4, r7
 800bfde:	1072      	asrs	r2, r6, #1
 800bfe0:	0863      	lsrs	r3, r4, #1
 800bfe2:	07f1      	lsls	r1, r6, #31
 800bfe4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bfe8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bfec:	bf48      	it	mi
 800bfee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bff2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bff6:	4618      	mov	r0, r3
 800bff8:	e756      	b.n	800bea8 <__ieee754_sqrt+0x28>
 800bffa:	4690      	mov	r8, r2
 800bffc:	e7be      	b.n	800bf7c <__ieee754_sqrt+0xfc>
 800bffe:	f7f4 f955 	bl	80002ac <__adddf3>
 800c002:	e9da 8900 	ldrd	r8, r9, [sl]
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	4640      	mov	r0, r8
 800c00c:	4649      	mov	r1, r9
 800c00e:	f7f4 fd75 	bl	8000afc <__aeabi_dcmplt>
 800c012:	b120      	cbz	r0, 800c01e <__ieee754_sqrt+0x19e>
 800c014:	1ca0      	adds	r0, r4, #2
 800c016:	bf08      	it	eq
 800c018:	3601      	addeq	r6, #1
 800c01a:	3402      	adds	r4, #2
 800c01c:	e7df      	b.n	800bfde <__ieee754_sqrt+0x15e>
 800c01e:	1c63      	adds	r3, r4, #1
 800c020:	f023 0401 	bic.w	r4, r3, #1
 800c024:	e7db      	b.n	800bfde <__ieee754_sqrt+0x15e>
 800c026:	bf00      	nop
 800c028:	7ff00000 	.word	0x7ff00000
 800c02c:	200001f0 	.word	0x200001f0
 800c030:	200001e8 	.word	0x200001e8
 800c034:	00000000 	.word	0x00000000

0800c038 <__kernel_rem_pio2>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	ed2d 8b02 	vpush	{d8}
 800c040:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c044:	f112 0f14 	cmn.w	r2, #20
 800c048:	9306      	str	r3, [sp, #24]
 800c04a:	9104      	str	r1, [sp, #16]
 800c04c:	4bbe      	ldr	r3, [pc, #760]	@ (800c348 <__kernel_rem_pio2+0x310>)
 800c04e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c050:	9008      	str	r0, [sp, #32]
 800c052:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	9b06      	ldr	r3, [sp, #24]
 800c05a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c05e:	bfa8      	it	ge
 800c060:	1ed4      	subge	r4, r2, #3
 800c062:	9305      	str	r3, [sp, #20]
 800c064:	bfb2      	itee	lt
 800c066:	2400      	movlt	r4, #0
 800c068:	2318      	movge	r3, #24
 800c06a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c06e:	f06f 0317 	mvn.w	r3, #23
 800c072:	fb04 3303 	mla	r3, r4, r3, r3
 800c076:	eb03 0b02 	add.w	fp, r3, r2
 800c07a:	9b00      	ldr	r3, [sp, #0]
 800c07c:	9a05      	ldr	r2, [sp, #20]
 800c07e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c338 <__kernel_rem_pio2+0x300>
 800c082:	eb03 0802 	add.w	r8, r3, r2
 800c086:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c088:	1aa7      	subs	r7, r4, r2
 800c08a:	ae20      	add	r6, sp, #128	@ 0x80
 800c08c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c090:	2500      	movs	r5, #0
 800c092:	4545      	cmp	r5, r8
 800c094:	dd13      	ble.n	800c0be <__kernel_rem_pio2+0x86>
 800c096:	9b06      	ldr	r3, [sp, #24]
 800c098:	aa20      	add	r2, sp, #128	@ 0x80
 800c09a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c09e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c0a2:	f04f 0800 	mov.w	r8, #0
 800c0a6:	9b00      	ldr	r3, [sp, #0]
 800c0a8:	4598      	cmp	r8, r3
 800c0aa:	dc31      	bgt.n	800c110 <__kernel_rem_pio2+0xd8>
 800c0ac:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c338 <__kernel_rem_pio2+0x300>
 800c0b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0b8:	462f      	mov	r7, r5
 800c0ba:	2600      	movs	r6, #0
 800c0bc:	e01b      	b.n	800c0f6 <__kernel_rem_pio2+0xbe>
 800c0be:	42ef      	cmn	r7, r5
 800c0c0:	d407      	bmi.n	800c0d2 <__kernel_rem_pio2+0x9a>
 800c0c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c0c6:	f7f4 fa3d 	bl	8000544 <__aeabi_i2d>
 800c0ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0ce:	3501      	adds	r5, #1
 800c0d0:	e7df      	b.n	800c092 <__kernel_rem_pio2+0x5a>
 800c0d2:	ec51 0b18 	vmov	r0, r1, d8
 800c0d6:	e7f8      	b.n	800c0ca <__kernel_rem_pio2+0x92>
 800c0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c0e0:	f7f4 fa9a 	bl	8000618 <__aeabi_dmul>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ec:	f7f4 f8de 	bl	80002ac <__adddf3>
 800c0f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f4:	3601      	adds	r6, #1
 800c0f6:	9b05      	ldr	r3, [sp, #20]
 800c0f8:	429e      	cmp	r6, r3
 800c0fa:	f1a7 0708 	sub.w	r7, r7, #8
 800c0fe:	ddeb      	ble.n	800c0d8 <__kernel_rem_pio2+0xa0>
 800c100:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c104:	f108 0801 	add.w	r8, r8, #1
 800c108:	ecaa 7b02 	vstmia	sl!, {d7}
 800c10c:	3508      	adds	r5, #8
 800c10e:	e7ca      	b.n	800c0a6 <__kernel_rem_pio2+0x6e>
 800c110:	9b00      	ldr	r3, [sp, #0]
 800c112:	f8dd 8000 	ldr.w	r8, [sp]
 800c116:	aa0c      	add	r2, sp, #48	@ 0x30
 800c118:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c11c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c11e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c120:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c124:	9309      	str	r3, [sp, #36]	@ 0x24
 800c126:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800c12a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c12c:	ab98      	add	r3, sp, #608	@ 0x260
 800c12e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c132:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800c136:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c13a:	ac0c      	add	r4, sp, #48	@ 0x30
 800c13c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c13e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800c142:	46a1      	mov	r9, r4
 800c144:	46c2      	mov	sl, r8
 800c146:	f1ba 0f00 	cmp.w	sl, #0
 800c14a:	f1a5 0508 	sub.w	r5, r5, #8
 800c14e:	dc77      	bgt.n	800c240 <__kernel_rem_pio2+0x208>
 800c150:	4658      	mov	r0, fp
 800c152:	ed9d 0b02 	vldr	d0, [sp, #8]
 800c156:	f000 fac7 	bl	800c6e8 <scalbn>
 800c15a:	ec57 6b10 	vmov	r6, r7, d0
 800c15e:	2200      	movs	r2, #0
 800c160:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c164:	4630      	mov	r0, r6
 800c166:	4639      	mov	r1, r7
 800c168:	f7f4 fa56 	bl	8000618 <__aeabi_dmul>
 800c16c:	ec41 0b10 	vmov	d0, r0, r1
 800c170:	f000 fb3a 	bl	800c7e8 <floor>
 800c174:	4b75      	ldr	r3, [pc, #468]	@ (800c34c <__kernel_rem_pio2+0x314>)
 800c176:	ec51 0b10 	vmov	r0, r1, d0
 800c17a:	2200      	movs	r2, #0
 800c17c:	f7f4 fa4c 	bl	8000618 <__aeabi_dmul>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4630      	mov	r0, r6
 800c186:	4639      	mov	r1, r7
 800c188:	f7f4 f88e 	bl	80002a8 <__aeabi_dsub>
 800c18c:	460f      	mov	r7, r1
 800c18e:	4606      	mov	r6, r0
 800c190:	f7f4 fcf2 	bl	8000b78 <__aeabi_d2iz>
 800c194:	9002      	str	r0, [sp, #8]
 800c196:	f7f4 f9d5 	bl	8000544 <__aeabi_i2d>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4630      	mov	r0, r6
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	f7f4 f881 	bl	80002a8 <__aeabi_dsub>
 800c1a6:	f1bb 0f00 	cmp.w	fp, #0
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	460f      	mov	r7, r1
 800c1ae:	dd6c      	ble.n	800c28a <__kernel_rem_pio2+0x252>
 800c1b0:	f108 31ff 	add.w	r1, r8, #4294967295
 800c1b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1b6:	9d02      	ldr	r5, [sp, #8]
 800c1b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1bc:	f1cb 0018 	rsb	r0, fp, #24
 800c1c0:	fa43 f200 	asr.w	r2, r3, r0
 800c1c4:	4415      	add	r5, r2
 800c1c6:	4082      	lsls	r2, r0
 800c1c8:	1a9b      	subs	r3, r3, r2
 800c1ca:	aa0c      	add	r2, sp, #48	@ 0x30
 800c1cc:	9502      	str	r5, [sp, #8]
 800c1ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c1d2:	f1cb 0217 	rsb	r2, fp, #23
 800c1d6:	fa43 f902 	asr.w	r9, r3, r2
 800c1da:	f1b9 0f00 	cmp.w	r9, #0
 800c1de:	dd64      	ble.n	800c2aa <__kernel_rem_pio2+0x272>
 800c1e0:	9b02      	ldr	r3, [sp, #8]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	9302      	str	r3, [sp, #8]
 800c1e8:	4615      	mov	r5, r2
 800c1ea:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c1ee:	4590      	cmp	r8, r2
 800c1f0:	f300 80b8 	bgt.w	800c364 <__kernel_rem_pio2+0x32c>
 800c1f4:	f1bb 0f00 	cmp.w	fp, #0
 800c1f8:	dd07      	ble.n	800c20a <__kernel_rem_pio2+0x1d2>
 800c1fa:	f1bb 0f01 	cmp.w	fp, #1
 800c1fe:	f000 80bf 	beq.w	800c380 <__kernel_rem_pio2+0x348>
 800c202:	f1bb 0f02 	cmp.w	fp, #2
 800c206:	f000 80c6 	beq.w	800c396 <__kernel_rem_pio2+0x35e>
 800c20a:	f1b9 0f02 	cmp.w	r9, #2
 800c20e:	d14c      	bne.n	800c2aa <__kernel_rem_pio2+0x272>
 800c210:	4632      	mov	r2, r6
 800c212:	463b      	mov	r3, r7
 800c214:	494e      	ldr	r1, [pc, #312]	@ (800c350 <__kernel_rem_pio2+0x318>)
 800c216:	2000      	movs	r0, #0
 800c218:	f7f4 f846 	bl	80002a8 <__aeabi_dsub>
 800c21c:	4606      	mov	r6, r0
 800c21e:	460f      	mov	r7, r1
 800c220:	2d00      	cmp	r5, #0
 800c222:	d042      	beq.n	800c2aa <__kernel_rem_pio2+0x272>
 800c224:	4658      	mov	r0, fp
 800c226:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c340 <__kernel_rem_pio2+0x308>
 800c22a:	f000 fa5d 	bl	800c6e8 <scalbn>
 800c22e:	4630      	mov	r0, r6
 800c230:	4639      	mov	r1, r7
 800c232:	ec53 2b10 	vmov	r2, r3, d0
 800c236:	f7f4 f837 	bl	80002a8 <__aeabi_dsub>
 800c23a:	4606      	mov	r6, r0
 800c23c:	460f      	mov	r7, r1
 800c23e:	e034      	b.n	800c2aa <__kernel_rem_pio2+0x272>
 800c240:	4b44      	ldr	r3, [pc, #272]	@ (800c354 <__kernel_rem_pio2+0x31c>)
 800c242:	2200      	movs	r2, #0
 800c244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c248:	f7f4 f9e6 	bl	8000618 <__aeabi_dmul>
 800c24c:	f7f4 fc94 	bl	8000b78 <__aeabi_d2iz>
 800c250:	f7f4 f978 	bl	8000544 <__aeabi_i2d>
 800c254:	4b40      	ldr	r3, [pc, #256]	@ (800c358 <__kernel_rem_pio2+0x320>)
 800c256:	2200      	movs	r2, #0
 800c258:	4606      	mov	r6, r0
 800c25a:	460f      	mov	r7, r1
 800c25c:	f7f4 f9dc 	bl	8000618 <__aeabi_dmul>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c268:	f7f4 f81e 	bl	80002a8 <__aeabi_dsub>
 800c26c:	f7f4 fc84 	bl	8000b78 <__aeabi_d2iz>
 800c270:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c274:	f849 0b04 	str.w	r0, [r9], #4
 800c278:	4639      	mov	r1, r7
 800c27a:	4630      	mov	r0, r6
 800c27c:	f7f4 f816 	bl	80002ac <__adddf3>
 800c280:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c288:	e75d      	b.n	800c146 <__kernel_rem_pio2+0x10e>
 800c28a:	d107      	bne.n	800c29c <__kernel_rem_pio2+0x264>
 800c28c:	f108 33ff 	add.w	r3, r8, #4294967295
 800c290:	aa0c      	add	r2, sp, #48	@ 0x30
 800c292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c296:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c29a:	e79e      	b.n	800c1da <__kernel_rem_pio2+0x1a2>
 800c29c:	4b2f      	ldr	r3, [pc, #188]	@ (800c35c <__kernel_rem_pio2+0x324>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f7f4 fc40 	bl	8000b24 <__aeabi_dcmpge>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d143      	bne.n	800c330 <__kernel_rem_pio2+0x2f8>
 800c2a8:	4681      	mov	r9, r0
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	f7f4 fc19 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f000 80bf 	beq.w	800c43a <__kernel_rem_pio2+0x402>
 800c2bc:	f108 33ff 	add.w	r3, r8, #4294967295
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	9900      	ldr	r1, [sp, #0]
 800c2c4:	428b      	cmp	r3, r1
 800c2c6:	da6e      	bge.n	800c3a6 <__kernel_rem_pio2+0x36e>
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	f000 8089 	beq.w	800c3e0 <__kernel_rem_pio2+0x3a8>
 800c2ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800c2d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c2d4:	f1ab 0b18 	sub.w	fp, fp, #24
 800c2d8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d0f6      	beq.n	800c2ce <__kernel_rem_pio2+0x296>
 800c2e0:	4658      	mov	r0, fp
 800c2e2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c340 <__kernel_rem_pio2+0x308>
 800c2e6:	f000 f9ff 	bl	800c6e8 <scalbn>
 800c2ea:	f108 0301 	add.w	r3, r8, #1
 800c2ee:	00da      	lsls	r2, r3, #3
 800c2f0:	9205      	str	r2, [sp, #20]
 800c2f2:	ec55 4b10 	vmov	r4, r5, d0
 800c2f6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c2f8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c354 <__kernel_rem_pio2+0x31c>
 800c2fc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c300:	4646      	mov	r6, r8
 800c302:	f04f 0a00 	mov.w	sl, #0
 800c306:	2e00      	cmp	r6, #0
 800c308:	f280 80cf 	bge.w	800c4aa <__kernel_rem_pio2+0x472>
 800c30c:	4644      	mov	r4, r8
 800c30e:	2c00      	cmp	r4, #0
 800c310:	f2c0 80fd 	blt.w	800c50e <__kernel_rem_pio2+0x4d6>
 800c314:	4b12      	ldr	r3, [pc, #72]	@ (800c360 <__kernel_rem_pio2+0x328>)
 800c316:	461f      	mov	r7, r3
 800c318:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c31a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c31e:	9306      	str	r3, [sp, #24]
 800c320:	f04f 0a00 	mov.w	sl, #0
 800c324:	f04f 0b00 	mov.w	fp, #0
 800c328:	2600      	movs	r6, #0
 800c32a:	eba8 0504 	sub.w	r5, r8, r4
 800c32e:	e0e2      	b.n	800c4f6 <__kernel_rem_pio2+0x4be>
 800c330:	f04f 0902 	mov.w	r9, #2
 800c334:	e754      	b.n	800c1e0 <__kernel_rem_pio2+0x1a8>
 800c336:	bf00      	nop
	...
 800c344:	3ff00000 	.word	0x3ff00000
 800c348:	0800cf40 	.word	0x0800cf40
 800c34c:	40200000 	.word	0x40200000
 800c350:	3ff00000 	.word	0x3ff00000
 800c354:	3e700000 	.word	0x3e700000
 800c358:	41700000 	.word	0x41700000
 800c35c:	3fe00000 	.word	0x3fe00000
 800c360:	0800cf00 	.word	0x0800cf00
 800c364:	f854 3b04 	ldr.w	r3, [r4], #4
 800c368:	b945      	cbnz	r5, 800c37c <__kernel_rem_pio2+0x344>
 800c36a:	b123      	cbz	r3, 800c376 <__kernel_rem_pio2+0x33e>
 800c36c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c370:	f844 3c04 	str.w	r3, [r4, #-4]
 800c374:	2301      	movs	r3, #1
 800c376:	3201      	adds	r2, #1
 800c378:	461d      	mov	r5, r3
 800c37a:	e738      	b.n	800c1ee <__kernel_rem_pio2+0x1b6>
 800c37c:	1acb      	subs	r3, r1, r3
 800c37e:	e7f7      	b.n	800c370 <__kernel_rem_pio2+0x338>
 800c380:	f108 32ff 	add.w	r2, r8, #4294967295
 800c384:	ab0c      	add	r3, sp, #48	@ 0x30
 800c386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c38e:	a90c      	add	r1, sp, #48	@ 0x30
 800c390:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c394:	e739      	b.n	800c20a <__kernel_rem_pio2+0x1d2>
 800c396:	f108 32ff 	add.w	r2, r8, #4294967295
 800c39a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c3a4:	e7f3      	b.n	800c38e <__kernel_rem_pio2+0x356>
 800c3a6:	a90c      	add	r1, sp, #48	@ 0x30
 800c3a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	e787      	b.n	800c2c2 <__kernel_rem_pio2+0x28a>
 800c3b2:	3401      	adds	r4, #1
 800c3b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c3b8:	2a00      	cmp	r2, #0
 800c3ba:	d0fa      	beq.n	800c3b2 <__kernel_rem_pio2+0x37a>
 800c3bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c3c2:	eb0d 0503 	add.w	r5, sp, r3
 800c3c6:	9b06      	ldr	r3, [sp, #24]
 800c3c8:	aa20      	add	r2, sp, #128	@ 0x80
 800c3ca:	4443      	add	r3, r8
 800c3cc:	f108 0701 	add.w	r7, r8, #1
 800c3d0:	3d98      	subs	r5, #152	@ 0x98
 800c3d2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c3d6:	4444      	add	r4, r8
 800c3d8:	42bc      	cmp	r4, r7
 800c3da:	da04      	bge.n	800c3e6 <__kernel_rem_pio2+0x3ae>
 800c3dc:	46a0      	mov	r8, r4
 800c3de:	e6a2      	b.n	800c126 <__kernel_rem_pio2+0xee>
 800c3e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3e2:	2401      	movs	r4, #1
 800c3e4:	e7e6      	b.n	800c3b4 <__kernel_rem_pio2+0x37c>
 800c3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3e8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c3ec:	f7f4 f8aa 	bl	8000544 <__aeabi_i2d>
 800c3f0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c6b8 <__kernel_rem_pio2+0x680>
 800c3f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c3fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c400:	46b2      	mov	sl, r6
 800c402:	f04f 0800 	mov.w	r8, #0
 800c406:	9b05      	ldr	r3, [sp, #20]
 800c408:	4598      	cmp	r8, r3
 800c40a:	dd05      	ble.n	800c418 <__kernel_rem_pio2+0x3e0>
 800c40c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c410:	3701      	adds	r7, #1
 800c412:	eca5 7b02 	vstmia	r5!, {d7}
 800c416:	e7df      	b.n	800c3d8 <__kernel_rem_pio2+0x3a0>
 800c418:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c41c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c420:	f7f4 f8fa 	bl	8000618 <__aeabi_dmul>
 800c424:	4602      	mov	r2, r0
 800c426:	460b      	mov	r3, r1
 800c428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42c:	f7f3 ff3e 	bl	80002ac <__adddf3>
 800c430:	f108 0801 	add.w	r8, r8, #1
 800c434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c438:	e7e5      	b.n	800c406 <__kernel_rem_pio2+0x3ce>
 800c43a:	f1cb 0000 	rsb	r0, fp, #0
 800c43e:	ec47 6b10 	vmov	d0, r6, r7
 800c442:	f000 f951 	bl	800c6e8 <scalbn>
 800c446:	ec55 4b10 	vmov	r4, r5, d0
 800c44a:	4b9d      	ldr	r3, [pc, #628]	@ (800c6c0 <__kernel_rem_pio2+0x688>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	4620      	mov	r0, r4
 800c450:	4629      	mov	r1, r5
 800c452:	f7f4 fb67 	bl	8000b24 <__aeabi_dcmpge>
 800c456:	b300      	cbz	r0, 800c49a <__kernel_rem_pio2+0x462>
 800c458:	4b9a      	ldr	r3, [pc, #616]	@ (800c6c4 <__kernel_rem_pio2+0x68c>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	4620      	mov	r0, r4
 800c45e:	4629      	mov	r1, r5
 800c460:	f7f4 f8da 	bl	8000618 <__aeabi_dmul>
 800c464:	f7f4 fb88 	bl	8000b78 <__aeabi_d2iz>
 800c468:	4606      	mov	r6, r0
 800c46a:	f7f4 f86b 	bl	8000544 <__aeabi_i2d>
 800c46e:	4b94      	ldr	r3, [pc, #592]	@ (800c6c0 <__kernel_rem_pio2+0x688>)
 800c470:	2200      	movs	r2, #0
 800c472:	f7f4 f8d1 	bl	8000618 <__aeabi_dmul>
 800c476:	460b      	mov	r3, r1
 800c478:	4602      	mov	r2, r0
 800c47a:	4629      	mov	r1, r5
 800c47c:	4620      	mov	r0, r4
 800c47e:	f7f3 ff13 	bl	80002a8 <__aeabi_dsub>
 800c482:	f7f4 fb79 	bl	8000b78 <__aeabi_d2iz>
 800c486:	ab0c      	add	r3, sp, #48	@ 0x30
 800c488:	f10b 0b18 	add.w	fp, fp, #24
 800c48c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c490:	f108 0801 	add.w	r8, r8, #1
 800c494:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c498:	e722      	b.n	800c2e0 <__kernel_rem_pio2+0x2a8>
 800c49a:	4620      	mov	r0, r4
 800c49c:	4629      	mov	r1, r5
 800c49e:	f7f4 fb6b 	bl	8000b78 <__aeabi_d2iz>
 800c4a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c4a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c4a8:	e71a      	b.n	800c2e0 <__kernel_rem_pio2+0x2a8>
 800c4aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800c4ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c4b0:	f7f4 f848 	bl	8000544 <__aeabi_i2d>
 800c4b4:	4622      	mov	r2, r4
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	f7f4 f8ae 	bl	8000618 <__aeabi_dmul>
 800c4bc:	4652      	mov	r2, sl
 800c4be:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c4c2:	465b      	mov	r3, fp
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f4 f8a6 	bl	8000618 <__aeabi_dmul>
 800c4cc:	3e01      	subs	r6, #1
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	460d      	mov	r5, r1
 800c4d2:	e718      	b.n	800c306 <__kernel_rem_pio2+0x2ce>
 800c4d4:	9906      	ldr	r1, [sp, #24]
 800c4d6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c4da:	9106      	str	r1, [sp, #24]
 800c4dc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c4e0:	f7f4 f89a 	bl	8000618 <__aeabi_dmul>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	4650      	mov	r0, sl
 800c4ea:	4659      	mov	r1, fp
 800c4ec:	f7f3 fede 	bl	80002ac <__adddf3>
 800c4f0:	3601      	adds	r6, #1
 800c4f2:	4682      	mov	sl, r0
 800c4f4:	468b      	mov	fp, r1
 800c4f6:	9b00      	ldr	r3, [sp, #0]
 800c4f8:	429e      	cmp	r6, r3
 800c4fa:	dc01      	bgt.n	800c500 <__kernel_rem_pio2+0x4c8>
 800c4fc:	42b5      	cmp	r5, r6
 800c4fe:	dae9      	bge.n	800c4d4 <__kernel_rem_pio2+0x49c>
 800c500:	ab48      	add	r3, sp, #288	@ 0x120
 800c502:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c506:	e9c5 ab00 	strd	sl, fp, [r5]
 800c50a:	3c01      	subs	r4, #1
 800c50c:	e6ff      	b.n	800c30e <__kernel_rem_pio2+0x2d6>
 800c50e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c510:	2b02      	cmp	r3, #2
 800c512:	dc0b      	bgt.n	800c52c <__kernel_rem_pio2+0x4f4>
 800c514:	2b00      	cmp	r3, #0
 800c516:	dc39      	bgt.n	800c58c <__kernel_rem_pio2+0x554>
 800c518:	d05d      	beq.n	800c5d6 <__kernel_rem_pio2+0x59e>
 800c51a:	9b02      	ldr	r3, [sp, #8]
 800c51c:	f003 0007 	and.w	r0, r3, #7
 800c520:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c524:	ecbd 8b02 	vpop	{d8}
 800c528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c52e:	2b03      	cmp	r3, #3
 800c530:	d1f3      	bne.n	800c51a <__kernel_rem_pio2+0x4e2>
 800c532:	9b05      	ldr	r3, [sp, #20]
 800c534:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c538:	eb0d 0403 	add.w	r4, sp, r3
 800c53c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c540:	4625      	mov	r5, r4
 800c542:	46c2      	mov	sl, r8
 800c544:	f1ba 0f00 	cmp.w	sl, #0
 800c548:	f1a5 0508 	sub.w	r5, r5, #8
 800c54c:	dc6b      	bgt.n	800c626 <__kernel_rem_pio2+0x5ee>
 800c54e:	4645      	mov	r5, r8
 800c550:	2d01      	cmp	r5, #1
 800c552:	f1a4 0408 	sub.w	r4, r4, #8
 800c556:	f300 8087 	bgt.w	800c668 <__kernel_rem_pio2+0x630>
 800c55a:	9c05      	ldr	r4, [sp, #20]
 800c55c:	ab48      	add	r3, sp, #288	@ 0x120
 800c55e:	441c      	add	r4, r3
 800c560:	2000      	movs	r0, #0
 800c562:	2100      	movs	r1, #0
 800c564:	f1b8 0f01 	cmp.w	r8, #1
 800c568:	f300 809c 	bgt.w	800c6a4 <__kernel_rem_pio2+0x66c>
 800c56c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c570:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c574:	f1b9 0f00 	cmp.w	r9, #0
 800c578:	f040 80a6 	bne.w	800c6c8 <__kernel_rem_pio2+0x690>
 800c57c:	9b04      	ldr	r3, [sp, #16]
 800c57e:	e9c3 7800 	strd	r7, r8, [r3]
 800c582:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c586:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c58a:	e7c6      	b.n	800c51a <__kernel_rem_pio2+0x4e2>
 800c58c:	9d05      	ldr	r5, [sp, #20]
 800c58e:	ab48      	add	r3, sp, #288	@ 0x120
 800c590:	441d      	add	r5, r3
 800c592:	4644      	mov	r4, r8
 800c594:	2000      	movs	r0, #0
 800c596:	2100      	movs	r1, #0
 800c598:	2c00      	cmp	r4, #0
 800c59a:	da35      	bge.n	800c608 <__kernel_rem_pio2+0x5d0>
 800c59c:	f1b9 0f00 	cmp.w	r9, #0
 800c5a0:	d038      	beq.n	800c614 <__kernel_rem_pio2+0x5dc>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5a8:	9c04      	ldr	r4, [sp, #16]
 800c5aa:	e9c4 2300 	strd	r2, r3, [r4]
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c5b6:	f7f3 fe77 	bl	80002a8 <__aeabi_dsub>
 800c5ba:	ad4a      	add	r5, sp, #296	@ 0x128
 800c5bc:	2401      	movs	r4, #1
 800c5be:	45a0      	cmp	r8, r4
 800c5c0:	da2b      	bge.n	800c61a <__kernel_rem_pio2+0x5e2>
 800c5c2:	f1b9 0f00 	cmp.w	r9, #0
 800c5c6:	d002      	beq.n	800c5ce <__kernel_rem_pio2+0x596>
 800c5c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	9b04      	ldr	r3, [sp, #16]
 800c5d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c5d4:	e7a1      	b.n	800c51a <__kernel_rem_pio2+0x4e2>
 800c5d6:	9c05      	ldr	r4, [sp, #20]
 800c5d8:	ab48      	add	r3, sp, #288	@ 0x120
 800c5da:	441c      	add	r4, r3
 800c5dc:	2000      	movs	r0, #0
 800c5de:	2100      	movs	r1, #0
 800c5e0:	f1b8 0f00 	cmp.w	r8, #0
 800c5e4:	da09      	bge.n	800c5fa <__kernel_rem_pio2+0x5c2>
 800c5e6:	f1b9 0f00 	cmp.w	r9, #0
 800c5ea:	d002      	beq.n	800c5f2 <__kernel_rem_pio2+0x5ba>
 800c5ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	9b04      	ldr	r3, [sp, #16]
 800c5f4:	e9c3 0100 	strd	r0, r1, [r3]
 800c5f8:	e78f      	b.n	800c51a <__kernel_rem_pio2+0x4e2>
 800c5fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c5fe:	f7f3 fe55 	bl	80002ac <__adddf3>
 800c602:	f108 38ff 	add.w	r8, r8, #4294967295
 800c606:	e7eb      	b.n	800c5e0 <__kernel_rem_pio2+0x5a8>
 800c608:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c60c:	f7f3 fe4e 	bl	80002ac <__adddf3>
 800c610:	3c01      	subs	r4, #1
 800c612:	e7c1      	b.n	800c598 <__kernel_rem_pio2+0x560>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	e7c6      	b.n	800c5a8 <__kernel_rem_pio2+0x570>
 800c61a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c61e:	f7f3 fe45 	bl	80002ac <__adddf3>
 800c622:	3401      	adds	r4, #1
 800c624:	e7cb      	b.n	800c5be <__kernel_rem_pio2+0x586>
 800c626:	ed95 7b00 	vldr	d7, [r5]
 800c62a:	ed8d 7b00 	vstr	d7, [sp]
 800c62e:	ed95 7b02 	vldr	d7, [r5, #8]
 800c632:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c636:	ec53 2b17 	vmov	r2, r3, d7
 800c63a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c63e:	f7f3 fe35 	bl	80002ac <__adddf3>
 800c642:	4602      	mov	r2, r0
 800c644:	460b      	mov	r3, r1
 800c646:	4606      	mov	r6, r0
 800c648:	460f      	mov	r7, r1
 800c64a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c64e:	f7f3 fe2b 	bl	80002a8 <__aeabi_dsub>
 800c652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c656:	f7f3 fe29 	bl	80002ac <__adddf3>
 800c65a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c65e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c662:	e9c5 6700 	strd	r6, r7, [r5]
 800c666:	e76d      	b.n	800c544 <__kernel_rem_pio2+0x50c>
 800c668:	ed94 7b00 	vldr	d7, [r4]
 800c66c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c670:	ec51 0b17 	vmov	r0, r1, d7
 800c674:	4652      	mov	r2, sl
 800c676:	465b      	mov	r3, fp
 800c678:	ed8d 7b00 	vstr	d7, [sp]
 800c67c:	f7f3 fe16 	bl	80002ac <__adddf3>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	4606      	mov	r6, r0
 800c686:	460f      	mov	r7, r1
 800c688:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c68c:	f7f3 fe0c 	bl	80002a8 <__aeabi_dsub>
 800c690:	4652      	mov	r2, sl
 800c692:	465b      	mov	r3, fp
 800c694:	f7f3 fe0a 	bl	80002ac <__adddf3>
 800c698:	3d01      	subs	r5, #1
 800c69a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c69e:	e9c4 6700 	strd	r6, r7, [r4]
 800c6a2:	e755      	b.n	800c550 <__kernel_rem_pio2+0x518>
 800c6a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c6a8:	f7f3 fe00 	bl	80002ac <__adddf3>
 800c6ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6b0:	e758      	b.n	800c564 <__kernel_rem_pio2+0x52c>
 800c6b2:	bf00      	nop
 800c6b4:	f3af 8000 	nop.w
	...
 800c6c0:	41700000 	.word	0x41700000
 800c6c4:	3e700000 	.word	0x3e700000
 800c6c8:	9b04      	ldr	r3, [sp, #16]
 800c6ca:	9a04      	ldr	r2, [sp, #16]
 800c6cc:	601f      	str	r7, [r3, #0]
 800c6ce:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c6d2:	605c      	str	r4, [r3, #4]
 800c6d4:	609d      	str	r5, [r3, #8]
 800c6d6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c6da:	60d3      	str	r3, [r2, #12]
 800c6dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c6e0:	6110      	str	r0, [r2, #16]
 800c6e2:	6153      	str	r3, [r2, #20]
 800c6e4:	e719      	b.n	800c51a <__kernel_rem_pio2+0x4e2>
 800c6e6:	bf00      	nop

0800c6e8 <scalbn>:
 800c6e8:	b570      	push	{r4, r5, r6, lr}
 800c6ea:	ec55 4b10 	vmov	r4, r5, d0
 800c6ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c6f2:	4606      	mov	r6, r0
 800c6f4:	462b      	mov	r3, r5
 800c6f6:	b991      	cbnz	r1, 800c71e <scalbn+0x36>
 800c6f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c6fc:	4323      	orrs	r3, r4
 800c6fe:	d03d      	beq.n	800c77c <scalbn+0x94>
 800c700:	4b35      	ldr	r3, [pc, #212]	@ (800c7d8 <scalbn+0xf0>)
 800c702:	4620      	mov	r0, r4
 800c704:	4629      	mov	r1, r5
 800c706:	2200      	movs	r2, #0
 800c708:	f7f3 ff86 	bl	8000618 <__aeabi_dmul>
 800c70c:	4b33      	ldr	r3, [pc, #204]	@ (800c7dc <scalbn+0xf4>)
 800c70e:	429e      	cmp	r6, r3
 800c710:	4604      	mov	r4, r0
 800c712:	460d      	mov	r5, r1
 800c714:	da0f      	bge.n	800c736 <scalbn+0x4e>
 800c716:	a328      	add	r3, pc, #160	@ (adr r3, 800c7b8 <scalbn+0xd0>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	e01e      	b.n	800c75c <scalbn+0x74>
 800c71e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c722:	4291      	cmp	r1, r2
 800c724:	d10b      	bne.n	800c73e <scalbn+0x56>
 800c726:	4622      	mov	r2, r4
 800c728:	4620      	mov	r0, r4
 800c72a:	4629      	mov	r1, r5
 800c72c:	f7f3 fdbe 	bl	80002ac <__adddf3>
 800c730:	4604      	mov	r4, r0
 800c732:	460d      	mov	r5, r1
 800c734:	e022      	b.n	800c77c <scalbn+0x94>
 800c736:	460b      	mov	r3, r1
 800c738:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c73c:	3936      	subs	r1, #54	@ 0x36
 800c73e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c742:	4296      	cmp	r6, r2
 800c744:	dd0d      	ble.n	800c762 <scalbn+0x7a>
 800c746:	2d00      	cmp	r5, #0
 800c748:	a11d      	add	r1, pc, #116	@ (adr r1, 800c7c0 <scalbn+0xd8>)
 800c74a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c74e:	da02      	bge.n	800c756 <scalbn+0x6e>
 800c750:	a11d      	add	r1, pc, #116	@ (adr r1, 800c7c8 <scalbn+0xe0>)
 800c752:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c756:	a31a      	add	r3, pc, #104	@ (adr r3, 800c7c0 <scalbn+0xd8>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7f3 ff5c 	bl	8000618 <__aeabi_dmul>
 800c760:	e7e6      	b.n	800c730 <scalbn+0x48>
 800c762:	1872      	adds	r2, r6, r1
 800c764:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c768:	428a      	cmp	r2, r1
 800c76a:	dcec      	bgt.n	800c746 <scalbn+0x5e>
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	dd08      	ble.n	800c782 <scalbn+0x9a>
 800c770:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c774:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c778:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c77c:	ec45 4b10 	vmov	d0, r4, r5
 800c780:	bd70      	pop	{r4, r5, r6, pc}
 800c782:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c786:	da08      	bge.n	800c79a <scalbn+0xb2>
 800c788:	2d00      	cmp	r5, #0
 800c78a:	a10b      	add	r1, pc, #44	@ (adr r1, 800c7b8 <scalbn+0xd0>)
 800c78c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c790:	dac1      	bge.n	800c716 <scalbn+0x2e>
 800c792:	a10f      	add	r1, pc, #60	@ (adr r1, 800c7d0 <scalbn+0xe8>)
 800c794:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c798:	e7bd      	b.n	800c716 <scalbn+0x2e>
 800c79a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c79e:	3236      	adds	r2, #54	@ 0x36
 800c7a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c7a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c7e0 <scalbn+0xf8>)
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	e7d4      	b.n	800c75c <scalbn+0x74>
 800c7b2:	bf00      	nop
 800c7b4:	f3af 8000 	nop.w
 800c7b8:	c2f8f359 	.word	0xc2f8f359
 800c7bc:	01a56e1f 	.word	0x01a56e1f
 800c7c0:	8800759c 	.word	0x8800759c
 800c7c4:	7e37e43c 	.word	0x7e37e43c
 800c7c8:	8800759c 	.word	0x8800759c
 800c7cc:	fe37e43c 	.word	0xfe37e43c
 800c7d0:	c2f8f359 	.word	0xc2f8f359
 800c7d4:	81a56e1f 	.word	0x81a56e1f
 800c7d8:	43500000 	.word	0x43500000
 800c7dc:	ffff3cb0 	.word	0xffff3cb0
 800c7e0:	3c900000 	.word	0x3c900000
 800c7e4:	00000000 	.word	0x00000000

0800c7e8 <floor>:
 800c7e8:	ec51 0b10 	vmov	r0, r1, d0
 800c7ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c7f8:	2e13      	cmp	r6, #19
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	4680      	mov	r8, r0
 800c800:	dc34      	bgt.n	800c86c <floor+0x84>
 800c802:	2e00      	cmp	r6, #0
 800c804:	da17      	bge.n	800c836 <floor+0x4e>
 800c806:	a332      	add	r3, pc, #200	@ (adr r3, 800c8d0 <floor+0xe8>)
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	f7f3 fd4e 	bl	80002ac <__adddf3>
 800c810:	2200      	movs	r2, #0
 800c812:	2300      	movs	r3, #0
 800c814:	f7f4 f990 	bl	8000b38 <__aeabi_dcmpgt>
 800c818:	b150      	cbz	r0, 800c830 <floor+0x48>
 800c81a:	2c00      	cmp	r4, #0
 800c81c:	da55      	bge.n	800c8ca <floor+0xe2>
 800c81e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c822:	432c      	orrs	r4, r5
 800c824:	2500      	movs	r5, #0
 800c826:	42ac      	cmp	r4, r5
 800c828:	4c2b      	ldr	r4, [pc, #172]	@ (800c8d8 <floor+0xf0>)
 800c82a:	bf08      	it	eq
 800c82c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c830:	4621      	mov	r1, r4
 800c832:	4628      	mov	r0, r5
 800c834:	e023      	b.n	800c87e <floor+0x96>
 800c836:	4f29      	ldr	r7, [pc, #164]	@ (800c8dc <floor+0xf4>)
 800c838:	4137      	asrs	r7, r6
 800c83a:	ea01 0307 	and.w	r3, r1, r7
 800c83e:	4303      	orrs	r3, r0
 800c840:	d01d      	beq.n	800c87e <floor+0x96>
 800c842:	a323      	add	r3, pc, #140	@ (adr r3, 800c8d0 <floor+0xe8>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f7f3 fd30 	bl	80002ac <__adddf3>
 800c84c:	2200      	movs	r2, #0
 800c84e:	2300      	movs	r3, #0
 800c850:	f7f4 f972 	bl	8000b38 <__aeabi_dcmpgt>
 800c854:	2800      	cmp	r0, #0
 800c856:	d0eb      	beq.n	800c830 <floor+0x48>
 800c858:	2c00      	cmp	r4, #0
 800c85a:	bfbe      	ittt	lt
 800c85c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c860:	4133      	asrlt	r3, r6
 800c862:	18e4      	addlt	r4, r4, r3
 800c864:	ea24 0407 	bic.w	r4, r4, r7
 800c868:	2500      	movs	r5, #0
 800c86a:	e7e1      	b.n	800c830 <floor+0x48>
 800c86c:	2e33      	cmp	r6, #51	@ 0x33
 800c86e:	dd0a      	ble.n	800c886 <floor+0x9e>
 800c870:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c874:	d103      	bne.n	800c87e <floor+0x96>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	f7f3 fd17 	bl	80002ac <__adddf3>
 800c87e:	ec41 0b10 	vmov	d0, r0, r1
 800c882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c886:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c88a:	f04f 37ff 	mov.w	r7, #4294967295
 800c88e:	40df      	lsrs	r7, r3
 800c890:	4207      	tst	r7, r0
 800c892:	d0f4      	beq.n	800c87e <floor+0x96>
 800c894:	a30e      	add	r3, pc, #56	@ (adr r3, 800c8d0 <floor+0xe8>)
 800c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89a:	f7f3 fd07 	bl	80002ac <__adddf3>
 800c89e:	2200      	movs	r2, #0
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	f7f4 f949 	bl	8000b38 <__aeabi_dcmpgt>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	d0c2      	beq.n	800c830 <floor+0x48>
 800c8aa:	2c00      	cmp	r4, #0
 800c8ac:	da0a      	bge.n	800c8c4 <floor+0xdc>
 800c8ae:	2e14      	cmp	r6, #20
 800c8b0:	d101      	bne.n	800c8b6 <floor+0xce>
 800c8b2:	3401      	adds	r4, #1
 800c8b4:	e006      	b.n	800c8c4 <floor+0xdc>
 800c8b6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	40b3      	lsls	r3, r6
 800c8be:	441d      	add	r5, r3
 800c8c0:	4545      	cmp	r5, r8
 800c8c2:	d3f6      	bcc.n	800c8b2 <floor+0xca>
 800c8c4:	ea25 0507 	bic.w	r5, r5, r7
 800c8c8:	e7b2      	b.n	800c830 <floor+0x48>
 800c8ca:	2500      	movs	r5, #0
 800c8cc:	462c      	mov	r4, r5
 800c8ce:	e7af      	b.n	800c830 <floor+0x48>
 800c8d0:	8800759c 	.word	0x8800759c
 800c8d4:	7e37e43c 	.word	0x7e37e43c
 800c8d8:	bff00000 	.word	0xbff00000
 800c8dc:	000fffff 	.word	0x000fffff

0800c8e0 <_init>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	bf00      	nop
 800c8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8e6:	bc08      	pop	{r3}
 800c8e8:	469e      	mov	lr, r3
 800c8ea:	4770      	bx	lr

0800c8ec <_fini>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	bf00      	nop
 800c8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8f2:	bc08      	pop	{r3}
 800c8f4:	469e      	mov	lr, r3
 800c8f6:	4770      	bx	lr
